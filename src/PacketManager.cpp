#include "PacketManager.h"
#include "ServerInstance.h"
#include "PacketHelper_FullUserInfo.h"
#include "Packet_Metadata_Data.h"
#include "UserFastBuy.h"

using namespace std;

// 16Mb max zipped size
#define MAX_ZIP_SIZE	(1024 * 1024 * 16 )

enum OutRoomPacketType
{
	CreateAndJoin = 0,
	PlayerJoin = 1,
	PlayerLeave = 2,
	SetPlayerReady = 3,
	UpdateSettings = 4,
	SetHost = 5,
	SetGameResult = 6,
	KickUser = 7,
	InitiateVoteKick = 8,
	VoteKickResult = 9,
	PlayerLeaveIngame = 10,
	UserInviteList = 12,
	SetUserTeam = 13,
	ZBAddonSurvey = 35,
};

CPacketManager::CPacketManager()
{
	m_hMapListZip = CreateZip(0, MAX_ZIP_SIZE, ZIP_MEMORY);
	m_hClientTableZip = CreateZip(0, MAX_ZIP_SIZE, ZIP_MEMORY);
	m_hWeaponPartsZip = CreateZip(0, MAX_ZIP_SIZE, ZIP_MEMORY);
	m_hMatchingZip = CreateZip(0, MAX_ZIP_SIZE, ZIP_MEMORY);
	m_hProgressUnlockZip = CreateZip(0, MAX_ZIP_SIZE, ZIP_MEMORY);
	m_hGameModeListZip = CreateZip(0, MAX_ZIP_SIZE, ZIP_MEMORY);
	m_hReinforceMaxLvlZip = CreateZip(0, MAX_ZIP_SIZE, ZIP_MEMORY);
	m_hReinforceMaxExpZip = CreateZip(0, MAX_ZIP_SIZE, ZIP_MEMORY);
	m_hItemExpireTimeZip = CreateZip(0, MAX_ZIP_SIZE, ZIP_MEMORY);
	m_hHonorMoneyShopZip = CreateZip(0, MAX_ZIP_SIZE, ZIP_MEMORY);
	m_hScenarioTX_CommonZip = CreateZip(0, MAX_ZIP_SIZE, ZIP_MEMORY);
	m_hScenarioTX_DediZip = CreateZip(0, MAX_ZIP_SIZE, ZIP_MEMORY);
	m_hShopItemList_DediZip = CreateZip(0, MAX_ZIP_SIZE, ZIP_MEMORY);
	m_hZBCompetitiveZip = CreateZip(0, MAX_ZIP_SIZE, ZIP_MEMORY);
	m_hPPSystemZip = CreateZip(0, MAX_ZIP_SIZE, ZIP_MEMORY);
	m_hItemZip = CreateZip(0, MAX_ZIP_SIZE, ZIP_MEMORY);
	m_hCodisDataZip = CreateZip(0, MAX_ZIP_SIZE, ZIP_MEMORY);
	m_hWeaponPropZip = CreateZip(0, MAX_ZIP_SIZE, ZIP_MEMORY);

	if (!m_hMapListZip || !m_hClientTableZip || !m_hWeaponPartsZip || !m_hMatchingZip || !m_hProgressUnlockZip
		|| !m_hGameModeListZip || !m_hReinforceMaxLvlZip || !m_hReinforceMaxExpZip || !m_hItemExpireTimeZip
		|| !m_hHonorMoneyShopZip || !m_hScenarioTX_CommonZip || !m_hScenarioTX_DediZip || !m_hShopItemList_DediZip
		|| !m_hZBCompetitiveZip || !m_hPPSystemZip || !m_hItemZip || !m_hCodisDataZip || !m_hWeaponPropZip)
	{
		g_pConsole->Error("CPacketManager(): CreateZip() returned NULL. Some metadata not loaded\n");
	}

	if (ZipAdd(m_hMapListZip, "maplist.csv", "Data/maplist.csv", 0, ZIP_FILENAME)
		|| ZipAdd(m_hClientTableZip, "ClientTable.csv", "Data/ClientTable.csv", 0, ZIP_FILENAME)
		|| ZipAdd(m_hWeaponPartsZip, "weaponparts.csv", "Data/weaponparts.csv", 0, ZIP_FILENAME)
		|| ZipAdd(m_hMatchingZip, "MatchOption.csv", "Data/MatchOption.csv", 0, ZIP_FILENAME)
		|| ZipAdd(m_hProgressUnlockZip, "progress_unlock.csv", "Data/progress_unlock.csv", 0, ZIP_FILENAME)
		|| ZipAdd(m_hGameModeListZip, "GameModeList.csv", "Data/GameModeList.csv", 0, ZIP_FILENAME)
		|| ZipAdd(m_hReinforceMaxLvlZip, "ReinforceMaxLv.csv", "Data/ReinforceMaxLv.csv", 0, ZIP_FILENAME)
		|| ZipAdd(m_hReinforceMaxExpZip, "ReinforceMaxEXP.csv", "Data/ReinforceMaxEXP.csv", 0, ZIP_FILENAME)
		|| ZipAdd(m_hItemExpireTimeZip, "ItemExpireTime.csv", "Data/ItemExpireTime.csv", 0, ZIP_FILENAME)
		|| ZipAdd(m_hHonorMoneyShopZip, "HonorMoneyShop.csv", "Data/HonorMoneyShop.csv", 0, ZIP_FILENAME)
		|| ZipAdd(m_hScenarioTX_CommonZip, "scenariotx_common.json", "Data/scenariotx_common.json", 0, ZIP_FILENAME)
		|| ZipAdd(m_hScenarioTX_DediZip, "scenariotx_dedi.json", "Data/scenariotx_dedi.json", 0, ZIP_FILENAME)
		|| ZipAdd(m_hShopItemList_DediZip, "shopitemlist_dedi.json", "Data/shopitemlist_dedi.json", 0, ZIP_FILENAME)
		|| ZipAdd(m_hZBCompetitiveZip, "ZBCompetitive.json", "Data/ZBCompetitive.json", 0, ZIP_FILENAME)
		|| ZipAdd(m_hPPSystemZip, "ppsystem.json", "Data/ppsystem.json", 0, ZIP_FILENAME)
		|| ZipAdd(m_hItemZip, "Item.csv", "Data/Item.csv", 0, ZIP_FILENAME)
		|| ZipAdd(m_hCodisDataZip, "CodisData.csv", "Data/CodisData.csv", 0, ZIP_FILENAME)
		|| ZipAdd(m_hWeaponPropZip, "WeaponProp.json", "Data/WeaponProp.json", 0, ZIP_FILENAME))
	{
		g_pConsole->Error("CPacketManager(): ZipAdd() returned error. Some metadata not loaded\n");
	}

	m_pPaintItemList = LoadBinaryMetadata("Data/Metadata_PaintItemList.bin");
	m_pReinforceItemsExp = LoadBinaryMetadata("Data/Metadata_ReinforceItemsExp.bin");
	m_pRandomWeaponList = LoadBinaryMetadata("Data/Metadata_RandomWeaponList.bin");
	m_pUnk3 = LoadBinaryMetadata("Data/Metadata_Unk3.bin");
	m_pUnk8 = LoadBinaryMetadata("Data/Metadata_Unk8.bin");
	m_pUnk15 = LoadBinaryMetadata("Data/Metadata_Unk15.bin");
	m_pUnk20 = LoadBinaryMetadata("Data/Metadata_Unk20.bin");
	m_pUnk31 = LoadBinaryMetadata("Data/Metadata_Unk31.bin");
	m_pUnk43 = LoadBinaryMetadata("Data/Metadata_Unk43.bin");
	m_pUnk49 = LoadBinaryMetadata("Data/Metadata_Unk49.bin");

	if (!m_pPaintItemList || !m_pReinforceItemsExp || !m_pRandomWeaponList || !m_pUnk3 || !m_pUnk8 || !m_pUnk15 || !m_pUnk20 || !m_pUnk31 || !m_pUnk43 || !m_pUnk49)
	{
		g_pConsole->Error("Required metadata:\nMetadata_PaintItemList.bin\nMetadata_ReinforceItemsExp.bin\nMetadata_RandomWeaponList.bin\nMetadata_Unk3.bin\nMetadata_Unk8.bin\nMetadata_Unk15.bin\nMetadata_Unk20.bin\nMetadata_Unk31.bin\nMetadata_Unk43.bin\nMetadata_Unk49.bin\n");
	}
}

CPacketManager::~CPacketManager()
{
	CloseZip(m_hMapListZip);
	CloseZip(m_hClientTableZip);
	CloseZip(m_hWeaponPartsZip);
	CloseZip(m_hMatchingZip);
	CloseZip(m_hProgressUnlockZip);
	CloseZip(m_hGameModeListZip);
	CloseZip(m_hReinforceMaxLvlZip);
	CloseZip(m_hReinforceMaxExpZip);
	CloseZip(m_hItemExpireTimeZip);
	CloseZip(m_hHonorMoneyShopZip);
	CloseZip(m_hScenarioTX_CommonZip);
	CloseZip(m_hScenarioTX_DediZip);
	CloseZip(m_hShopItemList_DediZip);
	CloseZip(m_hZBCompetitiveZip);
	CloseZip(m_hPPSystemZip);
	CloseZip(m_hItemZip);
	CloseZip(m_hCodisDataZip);
	CloseZip(m_hWeaponPropZip);

	if (m_pPaintItemList)
	{
		free(m_pPaintItemList->buffer);
		delete m_pPaintItemList;
	}
	if (m_pReinforceItemsExp)
	{
		free(m_pReinforceItemsExp->buffer);
		delete m_pReinforceItemsExp;
	}
	if (m_pUnk3)
	{
		free(m_pUnk3->buffer);
		delete m_pUnk3;
	}
	if (m_pUnk8)
	{
		free(m_pUnk8->buffer);
		delete m_pUnk8;
	}
	if (m_pUnk15)
	{
		free(m_pUnk15->buffer);
		delete m_pUnk15;
	}
	if (m_pRandomWeaponList)
	{
		free(m_pRandomWeaponList->buffer);
		delete m_pRandomWeaponList;
	}
	if (m_pUnk20)
	{
		free(m_pUnk20->buffer);
		delete m_pUnk20;
	}
	if (m_pUnk31)
	{
		free(m_pUnk31->buffer);
		delete m_pUnk31;
	}
	if (m_pUnk43)
	{
		free(m_pUnk43->buffer);
		delete m_pUnk43;
	}
	if (m_pUnk49)
	{
		free(m_pUnk49->buffer);
		delete m_pUnk49;
	}
}

CSendPacket* CPacketManager::CreatePacket(CExtendedSocket* socket, int msgID)
{
	return new CSendPacket(socket, msgID);
}

BinMetadata* CPacketManager::LoadBinaryMetadata(const char* fileName)
{
	FILE* f = fopen(fileName, "rb");
	if (!f)
	{
		return NULL;
	}

	fseek(f, 0, SEEK_END);
	long size = ftell(f);
	rewind(f);

	void* buffer = malloc(sizeof(char) * size);
	if (buffer == NULL)
	{
		fclose(f);
		return NULL;
	}

	size_t result = fread(buffer, 1, size, f);
	if (result != size)
	{
		fclose(f);
		delete[] buffer;
		return false;
	}

	BinMetadata* metadata = new BinMetadata;
	metadata->buffer = buffer;
	metadata->size = size;

	return metadata;
}

void CPacketManager::SendUMsgNoticeMsgBoxToUuid(CExtendedSocket* socket, string text)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::UMsg);
	msg->BuildHeader();
	msg->WriteUInt8(UMsgPacketType::ServerNoticeMessageMsgBox);
	msg->WriteString(text);
	socket->Send(msg);
}

void CPacketManager::SendUMsgNoticeMessageInChat(CExtendedSocket* socket, string text)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::UMsg);
	msg->BuildHeader();
	msg->WriteUInt8(UMsgPacketType::ServerNoticeMessageInChat);
	msg->WriteString(text);
	socket->Send(msg);
}

void CPacketManager::SendUMsgChatMessage(CExtendedSocket* socket, int type, string gameName, string text, bool from)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::UMsg);
	msg->BuildHeader();

	msg->WriteUInt8(type);
	if (type == UMsgPacketType::WhisperUserMessage)
	{
		msg->WriteUInt8(from); // from or to
	}

	msg->WriteString(gameName);
	msg->WriteString(text);

	socket->Send(msg);
}

/*void CPacketManager::SendUMsgNoticeMsgBoxToUuid(CExtendedSocket* socket, string text)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::UMsg);
	msg->BuildHeader();
	msg->WriteUInt8(UMsgPacketType::ServerNoticeMessageMsgBox);
	msg->WriteString(text);
	socket->Send(msg);
}*/

void CPacketManager::SendUMsgWhisperMessage(CExtendedSocket* socket, string text, string destName, CUser* user, int type)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::UMsg);
	msg->BuildHeader();

	msg->WriteUInt8(UMsgPacketType::WhisperUserMessage);
	msg->WriteUInt8(type); // from or to
	msg->WriteString(destName); // user name
	msg->WriteString(text); // message

	socket->Send(msg);
}

void CPacketManager::SendUMsgRoomMessage(CExtendedSocket* socket, string senderName, string text)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::UMsg);
	msg->BuildHeader();

	msg->WriteUInt8(UMsgPacketType::RoomUserMessage);
	msg->WriteString(senderName); // user name
	msg->WriteString(text); // message

	socket->Send(msg);
}

void CPacketManager::SendUMsgRoomTeamMessage(CExtendedSocket* socket, string senderName, string text)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::UMsg);
	msg->BuildHeader();

	msg->WriteUInt8(UMsgPacketType::RoomTeamUserMessage);
	msg->WriteString(senderName); // user name
	msg->WriteString(text); // message

	socket->Send(msg);
}

void CPacketManager::SendUMsgSystemReply(CExtendedSocket* socket, int type, string replyMsg, vector<string> additionalText)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::UMsg);
	msg->BuildHeader();

	msg->WriteUInt8(type);

	msg->WriteString(replyMsg);
	msg->WriteUInt8(additionalText.size());

	for (auto& str : additionalText)
		msg->WriteString(str);

	socket->Send(msg);
}

void CPacketManager::SendUMsgLobbyMessage(CExtendedSocket* socket, string senderName, string text)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::UMsg);
	msg->BuildHeader();

	msg->WriteUInt8(UMsgPacketType::LobbyUserMessage);
	msg->WriteString(senderName);
	msg->WriteString(text);

	socket->Send(msg);
}

unsigned char rawData4[1290] = {
	0x41, 0xE3, 0x27, 0x01, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77,
	0x77, 0x77, 0x2E, 0x63, 0x73, 0x6E, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6F,
	0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x65, 0x6E, 0x2F, 0x77, 0x65, 0x65, 0x6B,
	0x6C, 0x79, 0x2D, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2D, 0x6E, 0x6F, 0x74,
	0x65, 0x73, 0x2D, 0x64, 0x65, 0x63, 0x65, 0x6D, 0x62, 0x65, 0x72, 0x2D,
	0x31, 0x34, 0x2D, 0x32, 0x30, 0x32, 0x32, 0x2F, 0x00, 0x34, 0xF4, 0xA8,
	0x01, 0xF4, 0x42, 0xA9, 0x01, 0x41, 0x64, 0x76, 0x65, 0x6E, 0x74, 0x20,
	0x43, 0x61, 0x6C, 0x65, 0x6E, 0x64, 0x61, 0x72, 0x20, 0x45, 0x76, 0x65,
	0x6E, 0x74, 0x20, 0x28, 0x31, 0x32, 0x2F, 0x31, 0x34, 0x20, 0xE2, 0x80,
	0x93, 0x20, 0x31, 0x32, 0x2F, 0x32, 0x38, 0x29, 0x00, 0x43, 0x6F, 0x6D,
	0x70, 0x6C, 0x65, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6D, 0x69,
	0x73, 0x73, 0x69, 0x6F, 0x6E, 0x73, 0x20, 0x65, 0x76, 0x65, 0x72, 0x79,
	0x20, 0x64, 0x61, 0x79, 0x2C, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x63, 0x6C,
	0x61, 0x69, 0x6D, 0x20, 0x79, 0x6F, 0x75, 0x72, 0x20, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x21, 0x20, 0x0D, 0x0A, 0x0D, 0x0A, 0x2A, 0x20,
	0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x73, 0x20, 0x2F, 0x20, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x0D, 0x0A, 0x2D, 0x20, 0x4D, 0x69,
	0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x31, 0x3A, 0x20, 0x43, 0x6C, 0x69,
	0x63, 0x6B, 0x20, 0x60, 0x43, 0x6C, 0x61, 0x69, 0x6D, 0x20, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x60, 0x20, 0x66, 0x72, 0x6F, 0x6D, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x4C, 0x6F, 0x67, 0x69, 0x6E, 0x20, 0x53, 0x75, 0x70,
	0x70, 0x6C, 0x69, 0x65, 0x73, 0x20, 0x77, 0x69, 0x6E, 0x64, 0x6F, 0x77,
	0x20, 0x2D, 0x20, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x20, 0x31,
	0x2C, 0x35, 0x30, 0x30, 0x20, 0x4D, 0x69, 0x6C, 0x65, 0x61, 0x67, 0x65,
	0x20, 0x0D, 0x0A, 0x2D, 0x20, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E,
	0x20, 0x32, 0x3A, 0x20, 0x43, 0x6C, 0x69, 0x63, 0x6B, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x60, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x73, 0x60,
	0x20, 0x74, 0x61, 0x62, 0x20, 0x28, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x20,
	0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x29, 0x20, 0x2D, 0x20, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x20, 0x35, 0x2C, 0x30, 0x30, 0x30,
	0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x20, 0x0D, 0x0A, 0x2D, 0x20,
	0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x33, 0x3A, 0x20, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x20, 0x50, 0x6F, 0x69, 0x6E,
	0x74, 0x20, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72, 0x20, 0x66, 0x72,
	0x6F, 0x6D, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x68, 0x6F, 0x70, 0x20,
	0x2D, 0x20, 0x47, 0x65, 0x74, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69, 0x65,
	0x20, 0x53, 0x63, 0x65, 0x6E, 0x61, 0x72, 0x69, 0x6F, 0x20, 0x41, 0x64,
	0x64, 0x2D, 0x4F, 0x6E, 0x20, 0x52, 0x61, 0x74, 0x65, 0x20, 0x42, 0x6F,
	0x78, 0x20, 0x78, 0x33, 0x20, 0x0D, 0x0A, 0x2D, 0x20, 0x4D, 0x69, 0x73,
	0x73, 0x69, 0x6F, 0x6E, 0x20, 0x34, 0x3A, 0x20, 0x43, 0x6C, 0x69, 0x63,
	0x6B, 0x20, 0x45, 0x78, 0x70, 0x6C, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,
	0x6E, 0x20, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x6F, 0x74,
	0x74, 0x6F, 0x6D, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4C,
	0x6F, 0x62, 0x62, 0x79, 0x20, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6E, 0x20,
	0x61, 0x6E, 0x64, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x45, 0x78, 0x70, 0x6C, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,
	0x6E, 0x20, 0x20, 0x74, 0x6F, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x20, 0x45, 0x78, 0x70, 0x6C, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,
	0x6E, 0x20, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x52, 0x61,
	0x74, 0x65, 0x2D, 0x55, 0x70, 0x20, 0x2B, 0x31, 0x30, 0x25, 0x20, 0x78,
	0x33, 0x20, 0x0D, 0x0A, 0x2D, 0x20, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F,
	0x6E, 0x20, 0x35, 0x3A, 0x20, 0x50, 0x6C, 0x61, 0x79, 0x20, 0x4F, 0x72,
	0x69, 0x67, 0x69, 0x6E, 0x61, 0x6C, 0x20, 0x2F, 0x20, 0x5A, 0x6F, 0x6D,
	0x62, 0x69, 0x65, 0x20, 0x53, 0x63, 0x65, 0x6E, 0x61, 0x72, 0x69, 0x6F,
	0x20, 0x2F, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69, 0x65, 0x20, 0x5A, 0x20,
	0x2F, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69, 0x65, 0x20, 0x43, 0x6C, 0x61,
	0x73, 0x73, 0x69, 0x63, 0x20, 0x2F, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69,
	0x65, 0x20, 0x48, 0x65, 0x72, 0x6F, 0x20, 0x2F, 0x20, 0x5A, 0x6F, 0x6D,
	0x62, 0x69, 0x65, 0x20, 0x45, 0x76, 0x6F, 0x6C, 0x75, 0x74, 0x69, 0x6F,
	0x6E, 0x20, 0x2F, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69, 0x65, 0x20, 0x43,
	0x6F, 0x6E, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x2F, 0x20, 0x48, 0x69,
	0x64, 0x65, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x53, 0x65, 0x65, 0x6B, 0x20,
	0x6D, 0x6F, 0x64, 0x65, 0x20, 0x31, 0x20, 0x74, 0x69, 0x6D, 0x65, 0x20,
	0x2D, 0x20, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x20, 0x55, 0x6E,
	0x69, 0x71, 0x75, 0x65, 0x20, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72,
	0x20, 0x78, 0x32, 0x0D, 0x0A, 0x2D, 0x20, 0x4D, 0x69, 0x73, 0x73, 0x69,
	0x6F, 0x6E, 0x20, 0x36, 0x3A, 0x20, 0x4C, 0x6F, 0x67, 0x20, 0x49, 0x6E,
	0x20, 0x6F, 0x6E, 0x20, 0x41, 0x6E, 0x6F, 0x74, 0x68, 0x65, 0x72, 0x20,
	0x44, 0x61, 0x79, 0x20, 0x2D, 0x20, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x20, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x63, 0x65, 0x6E, 0x64, 0x65,
	0x6E, 0x63, 0x65, 0x20, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72, 0x20,
	0x2B, 0x20, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x20, 0x44, 0x65, 0x63, 0x6F,
	0x64, 0x65, 0x72, 0x0D, 0x0A, 0x0D, 0x0A, 0x2A, 0x20, 0x4E, 0x6F, 0x74,
	0x69, 0x63, 0x65, 0x0D, 0x0A, 0x2D, 0x20, 0x54, 0x68, 0x65, 0x20, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x65,
	0x61, 0x63, 0x68, 0x20, 0x6D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20,
	0x63, 0x61, 0x6E, 0x20, 0x6F, 0x6E, 0x6C, 0x79, 0x20, 0x62, 0x65, 0x20,
	0x6F, 0x62, 0x74, 0x61, 0x69, 0x6E, 0x65, 0x64, 0x20, 0x6F, 0x6E, 0x63,
	0x65, 0x20, 0x61, 0x20, 0x64, 0x61, 0x79, 0x20, 0x70, 0x65, 0x72, 0x20,
	0x61, 0x63, 0x63, 0x6F, 0x75, 0x6E, 0x74, 0x2E, 0x0D, 0x0A, 0x2D, 0x20,
	0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x31, 0x20, 0x74, 0x68,
	0x72, 0x6F, 0x75, 0x67, 0x68, 0x20, 0x35, 0x20, 0x63, 0x61, 0x6E, 0x20,
	0x62, 0x65, 0x20, 0x63, 0x6C, 0x65, 0x61, 0x72, 0x65, 0x64, 0x20, 0x69,
	0x6E, 0x20, 0x61, 0x6E, 0x79, 0x20, 0x6F, 0x72, 0x64, 0x65, 0x72, 0x2E,
	0x0D, 0x0A, 0x2D, 0x20, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20,
	0x31, 0x20, 0x74, 0x68, 0x72, 0x6F, 0x75, 0x67, 0x68, 0x20, 0x35, 0x20,
	0x6D, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x63, 0x6C, 0x65, 0x61,
	0x72, 0x65, 0x64, 0x20, 0x62, 0x65, 0x66, 0x6F, 0x72, 0x65, 0x20, 0x63,
	0x6C, 0x65, 0x61, 0x72, 0x69, 0x6E, 0x67, 0x20, 0x4D, 0x69, 0x73, 0x73,
	0x69, 0x6F, 0x6E, 0x20, 0x36, 0x20, 0x74, 0x6F, 0x20, 0x63, 0x6C, 0x61,
	0x69, 0x6D, 0x20, 0x69, 0x74, 0x73, 0x20, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x2E, 0x0D, 0x0A, 0x2D, 0x20, 0x59, 0x6F, 0x75, 0x20, 0x63, 0x61,
	0x6E, 0x20, 0x66, 0x75, 0x6C, 0x66, 0x69, 0x6C, 0x6C, 0x20, 0x4D, 0x69,
	0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x36, 0x60, 0x73, 0x20, 0x63, 0x6F,
	0x6E, 0x64, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x6F, 0x75, 0x74, 0x20, 0x63, 0x6F, 0x6E, 0x73, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x76, 0x65, 0x20, 0x6C, 0x6F, 0x67, 0x2D, 0x69, 0x6E, 0x73,
	0x2E, 0x0D, 0x0A, 0x2D, 0x20, 0x43, 0x6F, 0x6D, 0x70, 0x6C, 0x65, 0x74,
	0x65, 0x64, 0x20, 0x6D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x73, 0x20,
	0x61, 0x72, 0x65, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x65, 0x76,
	0x65, 0x72, 0x79, 0x64, 0x61, 0x79, 0x20, 0x61, 0x74, 0x20, 0x6D, 0x69,
	0x64, 0x6E, 0x69, 0x67, 0x68, 0x74, 0x2E, 0x0D, 0x0A, 0x2D, 0x20, 0x59,
	0x6F, 0x75, 0x20, 0x63, 0x61, 0x6E, 0x20, 0x6F, 0x6E, 0x6C, 0x79, 0x20,
	0x64, 0x6F, 0x20, 0x6D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x73, 0x20,
	0x31, 0x20, 0x74, 0x68, 0x72, 0x6F, 0x75, 0x67, 0x68, 0x20, 0x35, 0x20,
	0x6F, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6C, 0x61, 0x73, 0x74, 0x20,
	0x64, 0x61, 0x79, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65,
	0x76, 0x65, 0x6E, 0x74, 0x2E, 0x00
};

void CPacketManager::SendUMsgNotice(CExtendedSocket* socket, Notice_s& notice, bool openDailyRewardsDialogOnClose)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::UMsg);
	msg->BuildHeader();

	msg->WriteUInt8(UMsgPacketType::Notice);

	msg->WriteUInt16(notice.id + 10000);
	msg->WriteUInt8(1);
	msg->WriteString("https://discord.com/invite/EvUAY6D");
	msg->WriteUInt32(g_pServerInstance->GetCurrentTime() - 1000);
	msg->WriteUInt32(g_pServerInstance->GetCurrentTime() + 2000);
	msg->WriteString(notice.name);
	msg->WriteString(notice.description);

	socket->Send(msg);
}

void CPacketManager::SendUMsgExpiryNotice(CExtendedSocket* socket, vector<int>& expiryItems)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::UMsg);
	msg->BuildHeader();

	msg->WriteUInt8(UMsgPacketType::ExpiredItem);
	msg->WriteUInt8(expiryItems.size());
	for (auto item : expiryItems)
	{
		msg->WriteUInt16(item);
		msg->WriteUInt8(0);
		msg->WriteUInt8(0);
	}

	socket->Send(msg);
}

void CPacketManager::SendUMsgRewardNotice(CExtendedSocket* socket, RewardNotice& reward, string title, string description, bool inGame, bool scen)
{
	string titleMsg;
	string text;

	CSendPacket* msg = CreatePacket(socket, PacketId::UMsg);
	msg->BuildHeader();

	if (!title.size() && !description.size() && !scen)
	{
		msg->WriteUInt8(inGame ? UMsgPacketType::RewardInGameNoticeMsgLocalized : UMsgPacketType::RewardNoticeMsgLocalized);
	}
	else if (scen)
	{
		msg->WriteUInt8(UMsgPacketType::RewardInGameNoticeScenario);
	}
	else
	{
		msg->WriteUInt8(inGame ? UMsgPacketType::RewardInGameNoticeMsg : UMsgPacketType::RewardNoticeMsg);
	}


	msg->WriteUInt16(reward.items.size());

	for (auto& item : reward.items)
	{
		msg->WriteUInt16(item.itemID);
		msg->WriteUInt16(item.count);
		msg->WriteUInt16(item.duration);
		msg->WriteUInt16(0);
		msg->WriteUInt32(0);

		msg->WriteUInt8(0);
		for (int i = 0; i < 0; i++)
		{
			msg->WriteUInt16(0);
		}

		msg->WriteUInt8(0);
		for (int i = 0; i < 0; i++)
		{
			msg->WriteUInt16(0);
		}

		msg->WriteUInt8(0);
	}

	msg->WriteUInt8(0);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteUInt32(0);
		msg->WriteUInt16(0);
		msg->WriteUInt16(0);
	}
	msg->WriteUInt8(0);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteUInt16(0);
	}

	msg->WriteUInt8(reward.points ? 1 : 0);
	if (reward.points)
		msg->WriteUInt32(reward.points);

	msg->WriteUInt8(reward.exp ? 1 : 0);
	if (reward.exp)
		msg->WriteUInt32(reward.exp);

	msg->WriteUInt8(reward.honorPoints ? 1 : 0);
	if (reward.honorPoints)
		msg->WriteUInt32(reward.honorPoints);

	msg->WriteUInt8(0);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteUInt32(0);
	}
	msg->WriteUInt8(0);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteUInt32(0);
	}
	msg->WriteUInt8(0);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteUInt32(0);
		msg->WriteUInt16(0);
	}
	msg->WriteUInt8(0);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteUInt32(0);
	}
	msg->WriteUInt8(0);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteUInt32(0);
	}

	switch (reward.rewardId)
	{
	case 1:
		titleMsg = "QUEST_REWARD_TITLE";
		text = "QUEST_REWARD_MSG";
		break;
	case 2:
		titleMsg = "BINGO_PRIZE_TITLE";
		text = "BINGO_PRIZE_MSG";
		break;
	case 3:
		titleMsg = "BINGO_CLEAR_PRIZE_TITLE";
		text = "BINGO_CLEAR_PRIZE_MSG";
		break;
	case 1001:
		titleMsg = "GIFT_LEVEL1_TITLE";
		text = "GIFT_LEVEL1_MSG";
		break;
	case 1002:
		titleMsg = "GIFT_LEVEL3_TITLE";
		text = "GIFT_LEVEL3_MSG";
		break;
	case 1003:
		titleMsg = "GIFT_LEVEL5_TITLE";
		text = "GIFT_LEVEL5_MSG";
		break;
	case 1004:
		titleMsg = "GIFT_LEVEL10_TITLE";
		text = "GIFT_LEVEL10_MSG";
		break;
	case 1005:
		titleMsg = "GIFT_LEVEL15_TITLE";
		text = "GIFT_LEVEL15_MSG";
		break;
	case 1006:
		titleMsg = "GIFT_LEVEL20_TITLE";
		text = "GIFT_LEVEL20_MSG";
		break;
	case 1007:
		titleMsg = "GIFT_LEVEL25_TITLE";
		text = "GIFT_LEVEL25_MSG";
		break;
	case 1008:
		titleMsg = "GIFT_LEVEL30_TITLE";
		text = "GIFT_LEVEL30_MSG";
		break;
	case 1016:
		titleMsg = "GIFT_LEVEL35_TITLE";
		text = "GIFT_LEVEL35_MSG";
		break;
	case 1017:
		titleMsg = "GIFT_LEVEL40_TITLE";
		text = "GIFT_LEVEL40_MSG";
		break;
	case 1018:
		titleMsg = "GIFT_LEVEL45_TITLE";
		text = "GIFT_LEVEL45_MSG";
		break;
	case 1019:
		titleMsg = "GIFT_LEVEL50_TITLE";
		text = "GIFT_LEVEL30_MSG";
		break;
	case 1020:
		titleMsg = "GIFT_LEVEL55_TITLE";
		text = "GIFT_LEVEL55_MSG";
		break;
	case 1021:
		titleMsg = "GIFT_LEVEL60_TITLE";
		text = "GIFT_LEVEL60_MSG";
		break;
	case 1022:
		titleMsg = "GIFT_LEVEL65_TITLE";
		text = "GIFT_LEVEL65_MSG";
		break;
	case 1023:
		titleMsg = "GIFT_LEVEL70_TITLE";
		text = "GIFT_LEVEL70_MSG";
		break;
	case 1024:
		titleMsg = "GIFT_LEVEL72_TITLE";
		text = "GIFT_LEVEL72_MSG";
		break;
	case 1027:
	case 1028:
	case 1029:
		titleMsg = "ExpCoupon_TITLE";
		text = "ExpCoupon_MSG";
		break;
	case 1030:
	case 1031:
	case 1032:
		titleMsg = "PntCoupon_TITLE";
		text = "PntCoupon_MSG";
		break;
	default:
		titleMsg = "";
		text = "";
	};

	msg->WriteString(titleMsg);
	msg->WriteString(text);

	msg->WriteUInt8(0); // additional str
	for (int i = 0; i < 0; i++)
	{
		msg->WriteString("fuck");
	}

	socket->Send(msg);
}

void CPacketManager::SendUMsgRewardSelect(CExtendedSocket* socket, Reward* reward)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::UMsg);
	msg->BuildHeader();
	msg->WriteUInt8(RewardNoticeSelect);

	msg->WriteUInt8(0); // unknown
	msg->WriteUInt16(0);
	msg->WriteUInt8(reward->items.size()); // items count
	for (auto& item : reward->items)
	{
		msg->WriteUInt8(1); // case
		msg->WriteUInt32(item.selectID);
		// case 1
		msg->WriteUInt16(item.itemID);
		msg->WriteUInt16(item.count);
		msg->WriteUInt16(item.duration);
		msg->WriteUInt16(0);
		msg->WriteUInt32(0);
		msg->WriteUInt8(0); // cycle count
		for (int i = 0; i < 0; i++)
		{
			msg->WriteUInt16(0);
		}
		msg->WriteUInt8(0);
	}

	msg->WriteString(reward->title); // reward title
	msg->WriteString(reward->description); // reward desc
	msg->WriteUInt8(0); // additional strings count
	for (int i = 0; i < 0; i++)
	{
		msg->WriteString("");
	}
	msg->WriteUInt32(reward->rewardId);

	socket->Send(msg);
}

void CPacketManager::SendServerList(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::ServerList);
	msg->BuildHeader();
	msg->WriteUInt8(g_pChannelManager->channelServers.size());
	for (auto server : g_pChannelManager->channelServers)
	{
		msg->WriteUInt8(server->index);
		msg->WriteUInt8(1);
		msg->WriteUInt8(0);
		msg->WriteString(server->name);
		msg->WriteUInt8(server->channels.size());
		for (auto chn : server->channels)
		{
			msg->WriteUInt8(chn->m_nIndex);
			msg->WriteString(chn->m_szName);
			msg->WriteUInt16(0);
		}
	}
	socket->Send(msg);
}

void CPacketManager::SendStatistic(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Statistic);
	msg->BuildHeader();
	msg->WriteUInt8(0);
	msg->WriteUInt8(1);
	socket->Send(msg);
}

void CPacketManager::SendInventoryAdd(CExtendedSocket* socket, vector<CUserInventoryItem>& items, int curSlot)
{
	// temp solution for inventory packet with len > 65535
	int cycles = ceil((float)items.size() / 1000.0);
	int itemsNextStart = 0;
	int itemsNextStartMax = 0;
	int itemsToSend = items.size();
	int itemsToSendLeft = items.size();
	for (int i = 0; i < cycles; i++)
	{
		itemsNextStart = itemsNextStartMax;
		if (itemsToSendLeft > 1000)
		{
			itemsToSend = 1000;
			itemsNextStartMax += 1000;
		}
		else
		{
			itemsToSend = itemsToSendLeft;
			itemsNextStartMax += itemsToSendLeft;
		}

		itemsToSendLeft -= itemsToSend;

		CSendPacket* msg = CreatePacket(socket, PacketId::Inventory);
		msg->BuildHeader();
		msg->WriteUInt32(0);
		msg->WriteUInt16(itemsToSend);
		for (int i = itemsNextStart; i < itemsNextStartMax; i++)
		{
			CUserInventoryItem& item = items[i];
			if (curSlot)
			{
				msg->WriteUInt16(curSlot++);
			}
			else
			{
				msg->WriteUInt16(item.GetGameSlot());
			}

			msg->WriteUInt8(item.m_nItemID != 0); // not empty slot
			if (item.m_nItemID != 0)
			{
				msg->WriteUInt16(item.m_nItemID);
				msg->WriteUInt16(item.m_nCount);
				msg->WriteUInt8(item.m_nStatus);
				msg->WriteUInt8(item.m_nInUse);
				msg->WriteUInt32(item.m_nObtainDate);
				msg->WriteUInt32(item.m_nExpiryDate);

				msg->WriteUInt16(item.m_nPaintID);

				std::stringstream iss(item.m_nPaintIDList);
				std::vector<int> paintIDs;
				int pID;

				while (iss >> pID)
					paintIDs.push_back(pID);

				msg->WriteUInt16(paintIDs.size());
				for (auto paintID : paintIDs)
				{
					msg->WriteUInt16(paintID);
				}

				msg->WriteUInt16(item.m_nEnhancementLevel);
				msg->WriteUInt32(item.m_nEnhancementExp);
				msg->WriteUInt32(item.m_nEnhanceValue);

				msg->WriteUInt8(0); // is storage item
				msg->WriteUInt32(0); // itemID or timestamp

				msg->WriteUInt8(item.GetPartCount());
				if (item.m_nPartSlot1)
				{
					msg->WriteUInt8(0);
					msg->WriteUInt16(item.m_nPartSlot1);
				}
				if (item.m_nPartSlot2)
				{
					msg->WriteUInt8(1);
					msg->WriteUInt16(item.m_nPartSlot2);
				}

				msg->WriteUInt8(item.m_nInUse);

				// unk shit #2
				msg->WriteUInt8(0); // bound flag (idk what is it)
				msg->WriteUInt8(item.m_nLockStatus); // 0 - locked, 1 - unlocked, 2 - special item

				// unk shit
				msg->WriteUInt32(0); // unk
				msg->WriteUInt8(0); // unk array size
				for (int i = 0; i < 0; i++)
				{
					msg->WriteUInt8(i++);
					msg->WriteUInt16(0);
				}
			}
		}
		socket->Send(msg);
	}
}

// Note: you can remove only 1 item from the vector
void CPacketManager::SendInventoryRemove(CExtendedSocket* socket, vector<CUserInventoryItem>& items, bool gameSlot)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Inventory);
	msg->BuildHeader();
	msg->WriteUInt32(0);
	msg->WriteUInt16(items.size());
	for (auto& item : items)
	{
		msg->WriteUInt16(gameSlot ? item.GetGameSlot() : item.m_nSlot);
		msg->WriteUInt8(0);
	}
	socket->Send(msg);
}

void CPacketManager::SendVersion(CExtendedSocket* socket, int result)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Version);
	msg->BuildHeader();
	msg->WriteUInt8(result); // 0 - Packet Version Ok, 1 - Packet Version Invalid, 2 - Packet Version Patch
	socket->Send(msg);
}

void CPacketManager::SendUserStart(CExtendedSocket* socket, int userID, string userName, string gameName, bool firstConnect)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::UserStart);
	msg->BuildHeader();
	msg->WriteUInt32(userID);
	msg->WriteString(userName);
	msg->WriteString(gameName);
	msg->WriteUInt8(firstConnect); // first connect
	msg->WriteUInt8(0);
	msg->WriteUInt8(0);
	msg->WriteUInt32(0); // 210429
	socket->Send(msg);
}

void CPacketManager::SendOption(CExtendedSocket* socket, vector<unsigned char>& config)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Option);
	msg->BuildHeader();

	msg->WriteUInt8(0);
	msg->WriteUInt16(config.size());
	msg->WriteData(config.data(), config.size());

	msg->WriteUInt8(1);

	socket->Send(msg);
}

void CPacketManager::SendOptionUnk(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Option);
	msg->BuildHeader();

	msg->WriteUInt8(1);
	msg->WriteUInt32(0xF41DC);

	socket->Send(msg);
}

void CPacketManager::SendOptionUnk2(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Option);
	msg->BuildHeader();

	msg->WriteUInt8(3);

	socket->Send(msg);
}

void CPacketManager::SendOptionUnk3(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Option);
	msg->BuildHeader();

	msg->WriteUInt8(2);
	msg->WriteUInt8(1);
	msg->WriteUInt8(0);

	socket->Send(msg);
}

void CPacketManager::SendMetadataMaplist(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_MapList);

	void* mem;
	unsigned long len = 0;
	ZipGetMemory(m_hMapListZip, &mem, &len);
	msg->WriteUInt16(len);
	if (mem != NULL && len > 0)
	{
		msg->WriteData(mem, len);
	}

	socket->Send(msg);
}

void CPacketManager::SendMetadataClientTable(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_ClientTable);

	void* mem;
	unsigned long len = 0;
	ZipGetMemory(m_hClientTableZip, &mem, &len);
	msg->WriteUInt16(len);
	if (mem != NULL && len > 0)
	{
		msg->WriteData(mem, len);
	}

	socket->Send(msg);
}

void CPacketManager::SendMetadataWeaponParts(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_WeaponParts);

	void* mem;
	unsigned long len = 0;
	ZipGetMemory(m_hWeaponPartsZip, &mem, &len);
	msg->WriteUInt16(len);
	if (mem != NULL && len > 0)
	{
		msg->WriteData(mem, len);
	}
	socket->Send(msg);
}

// unused
void CPacketManager::SendMetadataModelist(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_ModeList);
	msg->WriteUInt16(sizeof(metaData2)); // size

	msg->WriteData(metaData2, sizeof(metaData2));

	socket->Send(msg);
}

void CPacketManager::SendMetadataMatchOption(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_MatchOption);

	void* mem;
	unsigned long len = 0;
	ZipGetMemory(m_hMatchingZip, &mem, &len);
	msg->WriteUInt16(len);
	if (mem != NULL && len > 0)
	{
		msg->WriteData(mem, len);
	}

	socket->Send(msg);
}

void CPacketManager::SendMetadataProgressUnlock(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_ProgressUnlock); // progress_unlock.csv

	void* mem;
	unsigned long len = 0;
	ZipGetMemory(m_hProgressUnlockZip, &mem, &len);
	msg->WriteUInt16(len);
	if (mem != NULL && len > 0)
	{
		msg->WriteData(mem, len);
	}

	socket->Send(msg);
}

void CPacketManager::SendMetadataUnk8(CExtendedSocket* socket)
{
	if (!m_pUnk8)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteData(m_pUnk8->buffer, m_pUnk8->size);

	socket->Send(msg);
}

void CPacketManager::SendMetadataWeaponPaint(CExtendedSocket* socket)
{
	if (!m_pPaintItemList)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteData(m_pPaintItemList->buffer, m_pPaintItemList->size);

	socket->Send(msg);
}

void CPacketManager::SendMetadataUnk3(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteData(m_pUnk3->buffer, m_pUnk3->size);

	socket->Send(msg);
}

void CPacketManager::SendMetadataItemBox(CExtendedSocket* socket, vector<ItemBoxItem>& items)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_ItemBox);

	msg->WriteUInt32(items.size());

	for (auto& i : items)
	{
		msg->WriteUInt32(i.itemBoxItemID);
		msg->WriteUInt32(i.itemId);
		msg->WriteInt16(-1);
		msg->WriteUInt16(1);
		msg->WriteUInt8(3);
		msg->WriteUInt8(0);
		msg->WriteUInt8(1);
		msg->WriteUInt8(0);
		msg->WriteUInt32(0);
		msg->WriteUInt16(0); // enhance?
		msg->WriteUInt8(0); // part count?
		if (0)
		{
			for (int i = 0; i < 1; i++)
				msg->WriteUInt16(4001);
		}
		msg->WriteUInt16(0);
		msg->WriteUInt8(0);

	}

	socket->Send(msg);
}

void CPacketManager::SendMetadataEncyclopedia(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteData(metaData_Encyclopedia, sizeof(metaData_Encyclopedia));

	socket->Send(msg);
}

void CPacketManager::SendMetadataGameModeList(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_GameModeList);

	void* mem;
	unsigned long len = 0;
	ZipGetMemory(m_hGameModeListZip, &mem, &len);
	msg->WriteUInt16(len);
	if (mem != NULL && len > 0)
	{
		msg->WriteData(mem, len);
	}

	socket->Send(msg);
}

void CPacketManager::SendMetadataReinforceMaxLvl(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_ReinforceMaxLvl);

	void* mem;
	unsigned long len = 0;
	ZipGetMemory(m_hReinforceMaxLvlZip, &mem, &len);
	msg->WriteUInt16(len);
	if (mem != NULL && len > 0)
	{
		msg->WriteData(mem, len);
	}

	socket->Send(msg);
}

void CPacketManager::SendMetadataReinforceMaxEXP(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_ReinforceMaxEXP);

	void* mem;
	unsigned long len = 0;
	ZipGetMemory(m_hReinforceMaxExpZip, &mem, &len);
	msg->WriteUInt16(len);
	if (mem != NULL && len > 0)
	{
		msg->WriteData(mem, len);
	}

	socket->Send(msg);
}

void CPacketManager::SendMetadataReinforceItemsExp(CExtendedSocket* socket)
{
	if (!m_pReinforceItemsExp)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteData(m_pReinforceItemsExp->buffer, m_pReinforceItemsExp->size);

	socket->Send(msg);
}

void CPacketManager::SendMetadataItemExpireTime(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_ItemExpireTime);

	void* mem;
	unsigned long len = 0;
	ZipGetMemory(m_hItemExpireTimeZip, &mem, &len);
	msg->WriteUInt16(len);
	if (mem != NULL && len > 0)
	{
		msg->WriteData(mem, len);
	}

	socket->Send(msg);
}

void CPacketManager::SendMetadataUnk20(CExtendedSocket* socket)
{
	if (!m_pUnk20)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteData(m_pUnk20->buffer, m_pUnk20->size);

	socket->Send(msg);
}

void CPacketManager::SendMetadataUnk15(CExtendedSocket* socket)
{
	if (!m_pUnk15)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteData(m_pUnk15->buffer, m_pUnk15->size);

	socket->Send(msg);
}

void CPacketManager::SendMetadataRandomWeaponList(CExtendedSocket* socket)
{
	if (!m_pRandomWeaponList)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	//unsigned char* buf = (unsigned char*)m_pRandomWeaponList->buffer;
	//std::vector<unsigned char> vec(buf, buf + m_pRandomWeaponList->size);
	//Buffer bufer(vec);
	//bufer.readInt8();

	//int size = bufer.readUInt32_LE();
	//for (int i = 0; i < size; i++)
	//{
	//	int itemID = bufer.readUInt32_LE(); // itemID
	//	int size_2 = bufer.readUInt32_LE();
	//	printf("(1): itemID: %d\n", itemID);
	//	for (int j = 0; j < size_2; j++)
	//	{
	//		int unk2 = bufer.readUInt8(); // 0, 1, 2, 3, 4, 5
	//		int unk3 = bufer.readUInt32_LE(); // weird numbers (111, 222, 444, ...)
	//		int unk4 = bufer.readUInt32_LE(); // 0, 50, 100
	//		printf("(2): %d, %d, %d\n", unk2, unk3, unk4);
	//	}
	//}

	//msg->WriteUInt8(kPacket_Metadata_RandomWeaponList);
	//msg->WriteUInt32(0); // size
	//for (int i = 0; i < 0; i++)
	//{
	//	msg->WriteUInt32(0); // itemID
	//	msg->WriteUInt32(0); // size_2
	//	for (int j = 0; j < 0; j++)
	//	{
	//		msg->WriteUInt8(0); // 0, 1, 2, 3, 4, 5
	//		msg->WriteUInt32(0); // weird numbers (111, 222, 444, ...)
	//		msg->WriteUInt32(0); // 0, 50, 100
	//	}
	//}

	msg->WriteData(m_pRandomWeaponList->buffer, m_pRandomWeaponList->size);

	socket->Send(msg);
}

void CPacketManager::SendMetadataHash(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	//msg->WriteData(metaData_255, sizeof(metaData_255));

	socket->Send(msg);
}

void CPacketManager::SendMetadataUnk31(CExtendedSocket* socket)
{
	if (!m_pUnk31)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteData(m_pUnk31->buffer, m_pUnk31->size);

	socket->Send(msg);
}

void CPacketManager::SendMetadataHonorMoneyShop(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_HonorMoneyShop);

	void* mem;
	unsigned long len = 0;
	ZipGetMemory(m_hHonorMoneyShopZip, &mem, &len);
	msg->WriteUInt16(len);
	if (mem != NULL && len > 0)
	{
		msg->WriteData(mem, len);
	}

	socket->Send(msg);
}

void CPacketManager::SendMetadataScenarioTX_Common(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_ScenarioTX_Common);

	void* mem;
	unsigned long len = 0;
	ZipGetMemory(m_hScenarioTX_CommonZip, &mem, &len);
	msg->WriteUInt16(len);
	if (mem != NULL && len > 0)
	{
		msg->WriteData(mem, len);
	}

	socket->Send(msg);
}

void CPacketManager::SendMetadataScenarioTX_Dedi(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_ScenarioTX_Dedi);

	void* mem;
	unsigned long len = 0;
	ZipGetMemory(m_hScenarioTX_DediZip, &mem, &len);
	msg->WriteUInt16(len);
	if (mem != NULL && len > 0)
	{
		msg->WriteData(mem, len);
	}

	socket->Send(msg);
}

void CPacketManager::SendMetadataShopItemList_Dedi(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_ShopItemList_Dedi);

	void* mem;
	unsigned long len = 0;
	ZipGetMemory(m_hShopItemList_DediZip, &mem, &len);
	msg->WriteUInt16(len);
	if (mem != NULL && len > 0)
	{
		msg->WriteData(mem, len);
	}

	socket->Send(msg);
}

void CPacketManager::SendMetadataZBCompetitive(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_ZBCompetitive);

	void* mem;
	unsigned long len = 0;
	ZipGetMemory(m_hZBCompetitiveZip, &mem, &len);
	msg->WriteUInt16(len);
	if (mem != NULL && len > 0)
	{
		msg->WriteData(mem, len);
	}

	socket->Send(msg);
}

void CPacketManager::SendMetadataUnk43(CExtendedSocket* socket)
{
	if (!m_pUnk43)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteData(m_pUnk43->buffer, m_pUnk43->size);

	socket->Send(msg);
}

void CPacketManager::SendMetadataUnk49(CExtendedSocket* socket)
{
	if (!m_pUnk49)
		return;

	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteData(m_pUnk49->buffer, m_pUnk49->size);

	socket->Send(msg);
}

void CPacketManager::SendMetadataWeaponProp(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_WeaponProp);

	void* mem;
	unsigned long len = 0;
	ZipGetMemory(m_hWeaponPropZip, &mem, &len);
	msg->WriteUInt16(len);
	if (mem != NULL && len > 0)
	{
		msg->WriteData(mem, len);
	}

	socket->Send(msg);
}

void CPacketManager::SendMetadataPPSystem(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_PPSystem);

	void* mem;
	unsigned long len = 0;
	ZipGetMemory(m_hPPSystemZip, &mem, &len);
	msg->WriteUInt16(len);
	if (mem != NULL && len > 0)
	{
		msg->WriteData(mem, len);
	}

	socket->Send(msg);
}

void CPacketManager::SendMetadataCodisData(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_CodisData);

	void* mem;
	unsigned long len = 0;
	ZipGetMemory(m_hCodisDataZip, &mem, &len);
	msg->WriteUInt16(len);
	if (mem != NULL && len > 0)
	{
		msg->WriteData(mem, len);
	}

	socket->Send(msg);
}

void CPacketManager::SendMetadataItem(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Metadata);
	msg->BuildHeader();

	msg->WriteUInt8(kPacket_Metadata_Item);

	void* mem;
	unsigned long len = 0;
	ZipGetMemory(m_hItemZip, &mem, &len);
	msg->WriteUInt16(len);
	if (mem != NULL && len > 0)
	{
		msg->WriteData(mem, len);
	}

	socket->Send(msg);
}

void CPacketManager::SendGameMatchInfo(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::GameMatch);
	msg->BuildHeader();

	msg->WriteUInt8(40);

	msg->WriteUInt16(0x2D);
	msg->WriteUInt8(2); // split 16
	msg->WriteUInt8(1);
	msg->WriteString("");

	msg->WriteUInt8(4);

	msg->WriteUInt8(0);
	msg->WriteUInt8(3);
	msg->WriteUInt16(0x2D);
	msg->WriteString("Zombie3z");

	msg->WriteUInt8(1);
	msg->WriteUInt8(0);
	msg->WriteUInt16(0);
	msg->WriteString("quickstart");

	msg->WriteUInt8(2);
	msg->WriteUInt8(1);
	msg->WriteUInt16(0);
	msg->WriteString("roomlist");

	msg->WriteUInt8(3);
	msg->WriteUInt8(3);
	msg->WriteUInt16(0x26);
	msg->WriteString("studio");

	socket->Send(msg);
}

void CPacketManager::SendGameMatchUnk(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::GameMatch);
	msg->BuildHeader();

	vector<unsigned char> vec = { 0x65, 0x01, 0x0, 0xE, 0x0, 0x2, 0x0, 0xFF };
	for (auto& def : vec)
	{
		msg->WriteInt8(def);
	}

	socket->Send(msg);
}

void CPacketManager::SendGameMatchUnk9(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::GameMatch);
	msg->BuildHeader();

	msg->WriteUInt8(9);

	msg->WriteUInt16(0x20);
	msg->WriteUInt16(0x0E);
	msg->WriteUInt16(0x2);
	msg->WriteUInt16(0xFFFF);

	socket->Send(msg);
}

void CPacketManager::SendReply(CExtendedSocket* socket, int type)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Reply);
	msg->BuildHeader();

	msg->WriteUInt8(type);
	msg->WriteString("S_REPLY_YES"); // S_REPLY_CREATEOK
	msg->WriteUInt8(0);
	msg->WriteUInt8(0);

	socket->Send(msg);
}

unsigned char rawData1[5] = {
	0x16, 0x01, 0x00, 0x96, 0x08
};

unsigned char rawData2[420] = {
	0x08, 0x00, 0x01, 0x01, 0x70, 0x8A, 0x6C, 0x5C, 0xF0, 0x22, 0x90, 0x5C,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0F, 0x05, 0x84, 0x08, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x84, 0x08,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x85,
	0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F,
	0x86, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00
};

unsigned char rawData3[4] = {
	0x08, 0x00, 0x00, 0x01
};

void CPacketManager::SendItemUnk1(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Item);
	msg->BuildHeader();

	msg->WriteData(rawData1, sizeof(rawData1));

	socket->Send(msg);
}
void CPacketManager::SendItemUnk3(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Item);
	msg->BuildHeader();

	msg->WriteData(rawData3, sizeof(rawData3));

	socket->Send(msg);
}

void CPacketManager::SendItemEquipTattoo(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Item);
	msg->BuildHeader();

	msg->WriteUInt8(ItemPacketType::TattooEquip);

	socket->Send(msg);
}

void CPacketManager::SendItemDailyRewardsUpdate(CExtendedSocket* socket, UserDailyRewards& dailyRewards)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Item);
	msg->BuildHeader();

	msg->WriteUInt8(ItemPacketType::DailyRewards);

	msg->WriteUInt8(0); // updatedailyrewards

	msg->WriteUInt8(1);
	msg->WriteUInt32(1);

	if (1)
	{
		msg->WriteUInt32(222222);
		msg->WriteUInt32(222222);
		msg->WriteUInt64(0);
		msg->WriteUInt8(0x24);
		msg->WriteUInt64(0);
	}

	socket->Send(msg);
}

void CPacketManager::SendItemDailyRewardsSpinResult(CExtendedSocket* socket, RewardItem& item)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Item);
	msg->BuildHeader();

	msg->WriteUInt8(ItemPacketType::DailyRewards);

	msg->WriteUInt8(1); // spinresult

	msg->WriteUInt32(item.itemID);
	msg->WriteUInt16(item.duration);
	msg->WriteUInt16(item.count);
	msg->WriteUInt8(1); // event flag

	socket->Send(msg);
}

void CPacketManager::SendItemOpenDecoderResult(CExtendedSocket* socket, ItemBoxOpenResult& result)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Item);
	msg->BuildHeader();

	msg->WriteUInt8(ItemPacketType::OpenDecoder);

	msg->WriteUInt8(1); // result

	msg->WriteUInt32(result.itemBoxItemId); // decoder itemid
	msg->WriteUInt16(0); // mileage points
	msg->WriteUInt32(0xFAD); // 0xFAD PARTS ITEMID ?????????
	msg->WriteUInt8(result.items.size()); // item count
	for (auto& item : result.items)
	{
		msg->WriteUInt32(item.itemId);
		msg->WriteInt16(item.duration);
		msg->WriteUInt16(1); // units 1
		msg->WriteUInt8(item.grade);
		msg->WriteUInt8(0); // parts count
		if (0)
		{
			msg->WriteUInt16(0); // part item ID
		}
		msg->WriteUInt16(0);
		msg->WriteUInt16(0);
	}

	socket->Send(msg);
}

void CPacketManager::SendItemOpenDecoderErrorReply(CExtendedSocket* socket, ItemBoxError code)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Item);
	string text;

	msg->BuildHeader();

	msg->WriteUInt8(ItemPacketType::OpenDecoder);
	switch (code)
	{
	case ItemBoxError::FAIL_INVENTORY_FULL:
		text = "LOTTERY_FAIL_INVENTORY_FULL";
		break;
	case ItemBoxError::FAIL_PAUSED:
		text = "LOTTERY_FAIL_PAUSED";
		break;
	case ItemBoxError::FAIL_USEITEM:
		text = "LOTTERY_FAIL_NOITEM";
		break;
	case ItemBoxError::NOT_KEY:
		text = "LOTTERY_NOT_KEY";
		break;
	default:
		text = "LOTTERY_FAIL_NOT_TERM";
	}

	msg->WriteUInt8(0);
	msg->WriteString(text);
	socket->Send(msg);
}

void CPacketManager::SendItemEnhanceResult(CExtendedSocket* socket, EnhResult& result)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Item);
	msg->BuildHeader();

	msg->WriteUInt8(14);

	msg->WriteUInt8(result.status);
	if (result.status < ENHANCE_FAILURE)
	{
		msg->WriteUInt16(result.itemSlot);
		msg->WriteUInt16(result.enhLevel);
		msg->WriteUInt32(result.enhLevel);
		msg->WriteUInt8(result.enhAttribute);
	}

	msg->WriteUInt8(0);

	socket->Send(msg);
}

void CPacketManager::SendItemWeaponPaintReply(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Item);
	msg->BuildHeader();

	msg->WriteUInt8(17);
	msg->WriteUInt8(1);
	msg->WriteUInt8(1);

	socket->Send(msg);
}

void CPacketManager::SendItemPartCheck(CExtendedSocket* socket, int slot, int partNum)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Item);
	msg->BuildHeader();

	msg->WriteUInt8(21);
	msg->WriteUInt8(0);
	msg->WriteUInt16(slot);
	msg->WriteString("PARTS_SYSTEM_ERROR0");

	socket->Send(msg);
}

void CPacketManager::SendItemGachapon(CExtendedSocket* socket, int gachaponItem)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Item);

	msg->BuildHeader();
	msg->WriteUInt8(gachaponItem ? ItemPacketType::GachaponNotice : ItemPacketType::FabenduNotice);
	socket->Send(msg);
}

void CPacketManager::SendLobbyJoin(CExtendedSocket* socket, CChannel* channel)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Lobby);
	msg->BuildHeader();

	msg->WriteUInt8(LobbyPacketType::Join);
	msg->WriteUInt16(channel->m_Users.size());
	for (auto user : channel->m_Users)
	{
		//	if (user->currentRoom)
		//	{
		//		WriteUInt32(0);
		//	}
		//	else
		//	{
		msg->WriteUInt32(user->GetID());
		//	}
		msg->WriteString("TIBE YEBAT'?");

		CUserCharacter character = user->GetCharacter(0xFFFFFFFF);

		CPacketHelper_FullUserInfo fullUserInfo;
		fullUserInfo.Build(msg->m_OutStream, user->GetID(), character);
	}
	socket->Send(msg);
}

void CPacketManager::SendLobbyUserJoin(CExtendedSocket* socket, CUser* joinedUser)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Lobby);
	msg->BuildHeader();

	msg->WriteUInt8(LobbyPacketType::UserJoin);
	msg->WriteUInt32(joinedUser->GetID()); // userid
	msg->WriteString("TIBE YEBAT'?");

	CUserCharacter character = joinedUser->GetCharacter(0xFFFFFFFF);

	CPacketHelper_FullUserInfo fullUserInfo;
	fullUserInfo.Build(msg->m_OutStream, joinedUser->GetID(), character);

	socket->Send(msg);
}

void CPacketManager::SendLobbyUserLeft(CExtendedSocket* socket, CUser* user)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Lobby);
	msg->BuildHeader();

	msg->WriteUInt8(LobbyPacketType::UserLeft);
	msg->WriteUInt32(user->GetID());

	socket->Send(msg);
}

int GetRoomListValidFullFlag(bool highFlag)
{
	if (!highFlag)
	{
		return RLFLAG_NAME | RLFLAG_UNK | RLFLAG_HASPASSWORD | RLFLAG_LEVELLIMIT | RLFLAG_GAMEMODE | RLFLAG_MAPID | RLFLAG_PLAYERS | RLFLAG_MAXPLAYERS | RLFLAG_ARMSRESTRICTION |
			RLFLAG_HOSTPLAYER | RLFLAG_UNK2 | RLFLAG_HOSTNETINFO | RLFLAG_CLANBATTLE | RLFLAG_UNK3 | RLFLAG_STATUS | RLFLAG_UNK4 |
			RLFLAG_UNK5 | RLFLAG_UNK6 | RLFLAG_UNK7 | RLFLAG_UNK8 | RLFLAG_UNK9 | RLFLAG_UNK10 | RLFLAG_UNK11 | RLFLAG_UNK12 | RLFLAG_UNK13 |
			RLFLAG_UNK14 | RLFLAG_UNK15 | RLFLAG_UNK16 | RLFLAG_UNK17 | RLFLAG_UNK18;
	}

	return RLHFLAG_UNK | RLHFLAG_UNK2 | RLHFLAG_UNK3;
}

void BuildRoomInfo(CSendPacket* msg, CRoom* room, int lFlag, int hFlag)
{
	msg->WriteUInt8(0);
	msg->WriteUInt32(room->GetID());
	msg->WriteUInt8(4);
	msg->WriteUInt8(0);
	msg->WriteUInt16(0x0E3E);

	// room info
	msg->WriteUInt32(lFlag);
	msg->WriteUInt32(hFlag);

	if (lFlag & RLFLAG_NAME) {
		msg->WriteString(room->GetSettings()->roomName);
	}
	if (lFlag & RLFLAG_UNK) {
		msg->WriteUInt8(0);
	}
	if (lFlag & RLFLAG_HASPASSWORD) {
		msg->WriteUInt8(room->HasPassword());
	}
	if (lFlag & RLFLAG_LEVELLIMIT) {
		msg->WriteUInt8(0);
	}
	if (lFlag & RLFLAG_GAMEMODE) {
		msg->WriteUInt8(room->GetSettings()->gameMode);
	}
	if (lFlag & RLFLAG_MAPID) {
		msg->WriteUInt16(room->GetSettings()->mapId);
	}
	if (lFlag & RLFLAG_PLAYERS) {
		msg->WriteUInt8(room->GetNumOfPlayers());
	}
	if (lFlag & RLFLAG_MAXPLAYERS) {
		msg->WriteUInt8(room->GetSettings()->maxPlayers);
	}
	if (lFlag & RLFLAG_ARMSRESTRICTION) {
		msg->WriteUInt8(room->GetSettings()->armsRestriction);
	}
	if (lFlag & RLFLAG_HOSTPLAYER) {
		msg->WriteUInt8(0);
	}
	if (lFlag & RLFLAG_UNK2) {
		msg->WriteUInt8(0);
	}
	if (lFlag & RLFLAG_HOSTNETINFO) {
		msg->WriteUInt16(0);
	}
	if (lFlag & RLFLAG_CLANBATTLE) {
		msg->WriteUInt8(0);
	}
	if (lFlag & RLFLAG_UNK3) {
		msg->WriteUInt8(0);
		msg->WriteUInt8(0);
	}
	if (lFlag & RLFLAG_STATUS) {
		msg->WriteUInt8(3);
	}
	if (lFlag & RLFLAG_UNK4) {
		msg->WriteUInt8(0);
		msg->WriteUInt8(0);
	}
	if (lFlag & RLFLAG_UNK5) {
		msg->WriteUInt8(room->GetSettings()->unk47 == 3 ? 2 : 0);
	}
	if (lFlag & RLFLAG_UNK6) {
		msg->WriteUInt16(0);
	}
	if (lFlag & RLFLAG_UNK7) {
		msg->WriteUInt8(0);
	}
	if (lFlag & RLFLAG_UNK8) {
		msg->WriteUInt8(0);
	}
	if (lFlag & RLFLAG_UNK9) {
		msg->WriteUInt8(0);
	}
	if (lFlag & RLFLAG_UNK10) {
		msg->WriteUInt8(0);
	}
	if (lFlag & RLFLAG_UNK11) {
		msg->WriteUInt8(0);
	}
	if (lFlag & RLFLAG_UNK12) {
		msg->WriteUInt8(0);
	}
	if (lFlag & RLFLAG_UNK13) {
		msg->WriteUInt8(0);
	}
	if (lFlag & RLFLAG_UNK14) {
		msg->WriteUInt8(0);
	}
	if (lFlag & RLFLAG_UNK15) {
		msg->WriteUInt8(0);
	}
	if (lFlag & RLFLAG_UNK16) {
		msg->WriteUInt8(0);
	}
	if (lFlag & RLFLAG_UNK17) {
		msg->WriteUInt8(room->GetSettings()->unk60);
		if (room->GetSettings()->zbLimit.size())
		{
			msg->WriteUInt32(room->GetSettings()->zbLimit[0]);
			msg->WriteUInt32(room->GetSettings()->zbLimit[1]);
			msg->WriteUInt32(room->GetSettings()->zbLimit[2]);
			msg->WriteUInt32(room->GetSettings()->zbLimit[3]);
		}
		else
		{
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
		}
	}
	if (lFlag & RLFLAG_UNK18) {
		msg->WriteUInt8(0);
	}

	if (hFlag & RLHFLAG_UNK) {
		msg->WriteUInt8(0);
	}
	if (hFlag & RLHFLAG_UNK2) {
		msg->WriteUInt8(room->GetSettings()->isZbCompetitive);
	}
	if (hFlag & RLHFLAG_UNK3) {
		msg->WriteUInt8(0);
	}

	// studio related
	if (room->GetSettings()->mapId == 254)
	{
		msg->WriteUInt32(0); // some flags

		//if (flag & 0x8) {
		//	msg->WriteString("test");
		//}
		//if (flag & 0x100) {
		//	msg->WriteString("test");
		//}
	}
}

void CPacketManager::SendRoomListFull(CExtendedSocket* socket, vector<CRoom*>& rooms)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::GameMatchRoomList);
	msg->BuildHeader();

	msg->WriteUInt8(RoomListPacketType::FullRoomList);
	msg->WriteUInt8(4);
	msg->WriteUInt16(0xFFFF);
	msg->WriteUInt16(0);
	msg->WriteUInt16(1);
	msg->WriteUInt16(0);

	msg->WriteUInt16(2);
	msg->WriteUInt16(1);
	msg->WriteUInt8(rooms.size()); // room count

	for (const auto room : rooms)
	{
		BuildRoomInfo(msg, room, GetRoomListValidFullFlag(false), GetRoomListValidFullFlag(true));
	}

	socket->Send(msg);
}

void CPacketManager::SendRoomListAdd(CExtendedSocket* socket, CRoom* room)
{
	/*CSendPacket* msg = CreatePacket(socket, PacketId::GameMatchRoomList);
	msg->BuildHeader();

	msg->WriteUInt8(RoomListPacketType::AddRoom);

	BuildRoomInfo(msg, room);

	socket->Send(msg);
*/
}

void CPacketManager::SendRoomListUpdate(CExtendedSocket* socket, CRoom* room)
{
	/*CSendPacket* msg = CreatePacket(socket, PacketId::GameMatchRoomList);
	msg->BuildHeader();

	msg->WriteUInt8(RoomListPacketType::UpdateRoom);

	BuildRoomInfo(msg, room);

	socket->Send(msg);
*/
}

void CPacketManager::SendRoomListRemove(CExtendedSocket* socket, int roomID)
{
	/*CSendPacket* msg = CreatePacket(socket, PacketId::GameMatchRoomList);
	msg->BuildHeader();

	msg->WriteUInt8(RoomListPacketType::RemoveRoom);
	msg->WriteUInt16(roomID);

	socket->Send(msg);
*/
}

void CPacketManager::SendShopUpdate(CExtendedSocket* socket, vector<Product>& products)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Shop);
	msg->BuildHeader();

	msg->WriteUInt8(ShopPacketType::UpdateProducts);
	msg->WriteUInt8(products.size());

	for (auto& product : products)
	{
		msg->WriteUInt32(product.relationProductID);
		msg->WriteUInt8(product.isPoints);
		msg->WriteUInt8(product.subProducts.size());
		for (auto& subproduct : product.subProducts)
		{
			msg->WriteUInt32(subproduct.productID);
			msg->WriteInt16(subproduct.items[0].duration);
			msg->WriteUInt8(1);
			msg->WriteUInt16(subproduct.items[0].count);
			msg->WriteUInt32(subproduct.price);
			msg->WriteUInt32(subproduct.additionalPoints);
			msg->WriteUInt8(subproduct.adType);
			msg->WriteUInt8(0);
			for (int i = 0; i < 0; i++)
			{
				msg->WriteUInt8(0);
			}
		}
	}

	msg->WriteString("UAH"); // currency 

	socket->Send(msg);
}

void CPacketManager::SendShopReply(CExtendedSocket* socket, int replyCode)
{
	string replyMsg;

	CSendPacket* msg = CreatePacket(socket, PacketId::Shop);
	msg->BuildHeader();

	msg->WriteUInt8(ShopPacketType::BuyReply);
	msg->WriteUInt8(0);

	switch (replyCode)
	{
	case 1:
		replyMsg = "BUY_OK";
		break;
	case 2:
		replyMsg = "BUY_FAIL_NOITEM";
		break;
	case 3:
		replyMsg = "BUY_FAIL_NO_POINT";
		break;
	case 4:
		replyMsg = "BUY_FAIL_INVENTORY_FULL";
		break;
	default:
		replyMsg = "BUY_FAIL_SYSTEM_ERROR";
		break;
	};
	msg->WriteString(replyMsg);

	socket->Send(msg);
}

void CPacketManager::SendShopBuyProductReply(CExtendedSocket* socket, int replyCode)
{
	string replyMsg;

	CSendPacket* msg = CreatePacket(socket, PacketId::Shop);
	msg->BuildHeader();

	msg->WriteUInt8(ShopPacketType::RequestBuyProduct);

	msg->WriteUInt8(1);
	switch (replyCode)
	{
	case 1:
		replyMsg = "BUY_OK";
		break;
	case 2:
		replyMsg = "BUY_FAIL_NOITEM";
		break;
	case 3:
		replyMsg = "BUY_FAIL_NO_POINT";
		break;
	case 4:
		replyMsg = "BUY_FAIL_INVENTORY_FULL";
		break;
	default:
		replyMsg = "BUY_FAIL_SYSTEM_ERROR";
		break;
	};
	msg->WriteString(replyMsg);
	msg->WriteUInt16(0);

	socket->Send(msg);
}

void CPacketManager::SendShopRecommendedProducts(CExtendedSocket* socket, vector<vector<int>>& products)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Shop);
	msg->BuildHeader();

	msg->WriteUInt8(ShopPacketType::UpdateRecommendedProducts);
	msg->WriteUInt32(products.size()); // page
	for (auto product : products)
	{
		msg->WriteString("Test");
		msg->WriteString("Test2");
		msg->WriteUInt32(0);
		msg->WriteUInt32(product.size()); // 6 items per page
		for (auto id : product)
		{
			msg->WriteUInt32(id);
		}
	}
	socket->Send(msg);
}

void CPacketManager::SendShopPopularProducts(CExtendedSocket* socket, vector<int>& products)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Shop);
	msg->BuildHeader();

	msg->WriteUInt8(ShopPacketType::UpdatePopularProducts);
	msg->WriteUInt32(products.size()); // max 4
	for (auto product : products)
	{
		msg->WriteUInt32(product);
	}

	socket->Send(msg);
}

void CPacketManager::SendSearchRoomNotice(CExtendedSocket* socket, CRoom* room, string invitersGameName, string inviteMsg)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::SearchRoom);
	msg->BuildHeader();

	msg->WriteUInt8(3);

	CChannel* channel = room->GetParentChannel();
	CChannelServer* channelServer = channel->GetParentChannelServer();

	msg->WriteUInt8(channelServer->index);
	msg->WriteUInt8(channel->m_nIndex);
	msg->WriteUInt16(room->GetID());

	// short room info
	CRoomSettings* roomSettings = room->GetSettings();
	msg->WriteUInt8(roomSettings->gameMode);
	msg->WriteUInt8(roomSettings->mapId);
	msg->WriteUInt8(roomSettings->maxPlayers);
	msg->WriteUInt8(9);
	msg->WriteUInt8(10);
	msg->WriteUInt8(11);
	msg->WriteUInt8(1); // array size
	msg->WriteUInt8(22);
	msg->WriteUInt8(33);

	msg->WriteUInt8(1);

	msg->WriteString((const char*)OBFUSCATE("228 unk str"));
	msg->WriteString(invitersGameName);
	msg->WriteString(inviteMsg);

	socket->Send(msg);
}

void CPacketManager::SendUserUpdateInfo(CExtendedSocket* socket, CUser* user, const CUserCharacter& character)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::UserInfo);
	msg->BuildHeader();
	msg->WriteUInt32(user->GetID());

	CPacketHelper_FullUserInfo fullUserInfo;
	fullUserInfo.Build(msg->m_OutStream, user->GetID(), character);

	socket->Send(msg);
}

void CPacketManager::SendUserSurvey(CExtendedSocket* socket, Survey& survey)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::UserSurvey);
	msg->BuildHeader();

	msg->WriteUInt8(0);

	msg->WriteUInt32(survey.id);
	msg->WriteString(survey.title);
	msg->WriteUInt8(survey.questions.size());
	for (auto& question : survey.questions)
	{
		msg->WriteUInt8(question.id); // survey subid
		msg->WriteString(question.question);
		msg->WriteUInt8(question.answerType); // 0 - checkboxes, 1 - textentry, 2 - unk

		if (question.answerType == 1)
		{
			msg->WriteUInt16(question.answerTextEntry.unk);
		}
		else
		{
			msg->WriteUInt8(question.answerCheckBoxType); // 0 - ваще выбирать не можешь))) 1 - only one choose, 2 - multiple choose
			msg->WriteUInt8(question.answersCheckBox.size());
			for (auto& answer : question.answersCheckBox)
			{
				msg->WriteUInt8(answer.id);
				msg->WriteString(answer.answer);
			}
		}
	}

	socket->Send(msg);
}

void CPacketManager::SendUserSurveyReply(CExtendedSocket* socket, int result)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::UserSurvey);
	msg->BuildHeader();

	msg->WriteUInt8(11);

	msg->WriteUInt8(result);

	/*msg->WriteUInt8(12); // error

	msg->WriteUInt8(1);
	msg->WriteUInt8(0);
	if (1)
	{
	msg->WriteString("HTO YA?");
	}*/

	socket->Send(msg);
}

void GetFlags(CRoomSettings* settings, int& lowFlag, int& lowMidFlag, int& highMidFlag, int& highFlag) // need to rewrite
{
	if (settings->roomName.empty() == NULL) {
		lowFlag |= ROOM_LOW_NAME;
	}
	if (settings->unk00 != NULL) {
		lowFlag |= ROOM_LOW_UNK;
	}
	if (settings->unk01 != NULL || settings->unk02 != NULL || settings->unk03 != NULL || settings->unk04 != NULL) {
		lowFlag |= ROOM_LOW_UNK2;
	}
	if (settings->password.empty() == NULL) {
		lowFlag |= ROOM_LOW_PASSWORD;
	}
	if (settings->unk06 != NULL) {
		lowFlag |= ROOM_LOW_LEVELLIMIT;
	}
	if (settings->unk07 != NULL) {
		lowFlag |= ROOM_LOW_UNK7;
	}
	if (settings->gameMode != NULL) {
		lowFlag |= ROOM_LOW_GAMEMODE;
	}
	if (settings->mapId != NULL) {
		lowFlag |= ROOM_LOW_MAPID;
	}
	if (settings->maxPlayers != NULL) {
		lowFlag |= ROOM_LOW_MAXPLAYERS;
	}
	if (settings->winLimit != NULL) {
		lowFlag |= ROOM_LOW_WINLIMIT;
	}
	if (settings->neededKills != NULL) {
		lowFlag |= ROOM_LOW_NEEDEDKILLS;
	}
	if (settings->gameTime != NULL) {
		lowFlag |= ROOM_LOW_GAMETIME;
	}
	if (settings->roundTime != NULL) {
		lowFlag |= ROOM_LOW_ROUNDTIME;
	}
	if (settings->armsRestriction != NULL) {
		lowFlag |= ROOM_LOW_ARMSRESTRICTION;
	}
	if (settings->unk16 != NULL) {
		lowFlag |= ROOM_LOW_HOSTAGEKILLLIMIT;
	}
	if (settings->freezeTime != NULL) {
		lowFlag |= ROOM_LOW_FREEZETIME;
	}
	if (settings->buyTime != NULL) {
		lowFlag |= ROOM_LOW_BUYTIME;
	}
	if (settings->displayNickname != NULL) {
		lowFlag |= ROOM_LOW_DISPLAYGAMENAME;
	}
	if (settings->teamBalance != NULL) {
		lowFlag |= ROOM_LOW_TEAMBALANCE;
	}
	if (settings->unk21 != NULL) {
		lowFlag |= ROOM_LOW_UNK21;
	}
	if (settings->friendlyFire != NULL) {
		lowFlag |= ROOM_LOW_FRIENDLYFIRE;
	}
	if (settings->flashlight != NULL) {
		lowFlag |= ROOM_LOW_FLASHLIGHT;
	}
	if (settings->footsteps != NULL) {
		lowFlag |= ROOM_LOW_FOOTSTEPS;
	}
	if (settings->unk25 != NULL) {
		lowFlag |= ROOM_LOW_UNK25;
	}
	if (settings->unk26 != NULL) {
		lowFlag |= ROOM_LOW_UNK26;
	}
	if (settings->unk27 != NULL) {
		lowFlag |= ROOM_LOW_UNK27;
	}
	if (settings->unk28 != NULL) {
		lowFlag |= ROOM_LOW_UNK28;
	}
	if (settings->unk29 != NULL) {
		lowFlag |= ROOM_LOW_UNK29;
	}
	if (settings->unk30 != NULL) {
		lowFlag |= ROOM_LOW_VIEWFLAG;
	}
	if (settings->voiceChat != NULL) {
		lowFlag |= ROOM_LOW_VOICECHAT;
	}
	if (settings->status != NULL) {
		lowFlag |= ROOM_LOW_STATUS;
	}
	if (settings->unk33 != NULL) {
		lowFlag |= ROOM_LOW_UNK33;
	}

	if (settings->unk34.empty() != NULL || settings->unk35 != NULL || settings->unk36 != NULL || settings->unk37 != NULL) {
		lowMidFlag |= ROOM_LOWMID_UNK;
	}
	if (settings->unk38 != NULL) {
		lowMidFlag |= ROOM_LOWMID_C4TIMER;
	}
	if (settings->botDifficulty != NULL || settings->friendlyBots != NULL || settings->enemyBots != NULL || settings->botBalance != NULL || settings->botAdd != NULL) {
		lowMidFlag |= ROOM_LOWMID_BOT;
	}
	if (settings->kdRule != NULL) {
		lowMidFlag |= ROOM_LOWMID_KDRULE;
	}
	if (settings->startingCash != NULL) {
		lowMidFlag |= ROOM_LOWMID_STARTINGCASH;
	}
	if (settings->unk46 != NULL) {
		lowMidFlag |= ROOM_LOWMID_MOVINGSHOT;
	}
	if (settings->unk47 != NULL) {
		lowMidFlag |= ROOM_LOWMID_UNK47;
	}
	if (settings->unk48 != NULL) {
		lowMidFlag |= ROOM_LOWMID_STATUSSYMBOL;
	}
	if (settings->unk49 != NULL) {
		lowMidFlag |= ROOM_LOWMID_RANDOMMAP;
	}
	if (settings->unk50 != NULL) {
		lowMidFlag |= ROOM_LOWMID_MULTIPLEMAPS;
	}
	if (settings->unk51 != NULL) {
		lowMidFlag |= ROOM_LOWMID_UNK51;
	}
	if (settings->enhancement != NULL) {
		lowMidFlag |= ROOM_LOWMID_WPNENHANCERESTRICT;
	}
	if (settings->unk53 != NULL) {
		lowMidFlag |= ROOM_LOWMID_SD;
	}
	if (settings->zsDifficulty != NULL || settings->unk55 != NULL || settings->unk56 != NULL) {
		lowMidFlag |= ROOM_LOWMID_ZSDIFFICULTY;
	}
	if (settings->league != NULL) {
		lowMidFlag |= ROOM_LOWMID_LEAGUERULE;
	}
	if (settings->mannerLimit != NULL) {
		lowMidFlag |= ROOM_LOWMID_MANNERLIMIT;
	}
	if (settings->unk59 != NULL) {
		lowMidFlag |= ROOM_LOWMID_UNK59;
	}
	if (settings->unk60 != NULL || !settings->zbLimit.empty()) {
		lowMidFlag |= ROOM_LOWMID_ZBLIMIT;
	}
	if (settings->unk61 != NULL) {
		lowMidFlag |= ROOM_LOWMID_UNK61;
	}
	if (settings->unk62 != NULL) {
		lowMidFlag |= ROOM_LOWMID_UNK62;
	}
	if (settings->unk63 != NULL) {
		lowMidFlag |= ROOM_LOWMID_UNK63;
	}
	if (settings->teamSwitch != NULL) {
		lowMidFlag |= ROOM_LOWMID_TEAMSWITCH;
	}
	if (settings->unk65 != NULL) {
		lowMidFlag |= ROOM_LOWMID_UNK65;
	}
	if (settings->unk66 != NULL) {
		lowMidFlag |= ROOM_LOWMID_UNK66;
	}
	if (settings->unk67 != NULL) {
		lowMidFlag |= ROOM_LOWMID_UNK67;
	}
	if (settings->unk68 != NULL) {
		lowMidFlag |= ROOM_LOWMID_UNK68;
	}
	if (settings->isZbCompetitive != NULL) {
		lowMidFlag |= ROOM_LOWMID_ISZBCOMPETITIVE;
	}
	if (settings->unk70 != NULL) {
		lowMidFlag |= ROOM_LOWMID_UNK70;
	}
	if (settings->unk71 != NULL) {
		lowMidFlag |= ROOM_LOWMID_UNK71;
	}
	if (settings->unk72 != NULL) {
		lowMidFlag |= ROOM_LOWMID_UNK72;
	}

	if (settings->unk73 != NULL) {
		highMidFlag |= ROOM_HIGHMID_UNK73;
	}
	if (settings->unk74 != NULL || !settings->unk74_vec.empty()) {
		highMidFlag |= ROOM_HIGHMID_UNK74;
	}
	if (settings->unk75 != NULL) {
		highMidFlag |= ROOM_HIGHMID_UNK75;
	}
	if (settings->unk76 != NULL) {
		highMidFlag |= ROOM_HIGHMID_UNK76;
	}
}

void WriteSettings(CSendPacket* msg, CRoomSettings* newSettings, int low, int lowMid, int highMid, int high)
{
	int lowFlag = 0;
	int lowMidFlag = 0;
	int highMidFlag = 0;
	int highFlag = 0;

	if (low || lowMid || highMid || high)
	{
		lowFlag = low;
		lowMidFlag = lowMid;
		highMidFlag = highMid;
		highFlag = high;

		msg->WriteUInt32(lowFlag);
		msg->WriteUInt32(lowMidFlag);
		msg->WriteUInt32(highMidFlag);
		msg->WriteUInt32(highFlag);
	}
	else
	{
		GetFlags(newSettings, lowFlag, lowMidFlag, highMidFlag, highFlag);

		msg->WriteUInt32(lowFlag);
		msg->WriteUInt32(lowMidFlag);
		msg->WriteUInt32(highMidFlag);
		msg->WriteUInt32(highFlag);
	}

	if (lowFlag & ROOM_LOW_NAME) {
		msg->WriteString(newSettings->roomName);
	}
	if (lowFlag & ROOM_LOW_UNK) {
		msg->WriteUInt8(newSettings->unk00);
	}
	if (lowFlag & ROOM_LOW_UNK2) {
		msg->WriteUInt8(newSettings->unk01);
		msg->WriteUInt8(newSettings->unk02);
		msg->WriteUInt8(newSettings->unk03);
		msg->WriteUInt32(newSettings->unk04);
	}
	if (lowFlag & ROOM_LOW_PASSWORD) {
		msg->WriteString(newSettings->password);
	}
	if (lowFlag & ROOM_LOW_LEVELLIMIT) {
		msg->WriteUInt8(2);
	}
	if (lowFlag & ROOM_LOW_UNK7) {
		msg->WriteUInt8(newSettings->unk07);
	}
	if (lowFlag & ROOM_LOW_GAMEMODE) {
		msg->WriteUInt8(newSettings->gameMode);
	}
	if (lowFlag & ROOM_LOW_MAPID) {
		msg->WriteUInt16(newSettings->mapId);
	}
	if (lowFlag & ROOM_LOW_MAXPLAYERS) {
		msg->WriteUInt8(newSettings->maxPlayers);
	}
	if (lowFlag & ROOM_LOW_WINLIMIT) {
		msg->WriteUInt8(newSettings->winLimit);
	}
	if (lowFlag & ROOM_LOW_NEEDEDKILLS) {
		msg->WriteUInt16(newSettings->neededKills);
	}
	if (lowFlag & ROOM_LOW_GAMETIME) {
		msg->WriteUInt8(newSettings->gameTime);
	}
	if (lowFlag & ROOM_LOW_ROUNDTIME) {
		msg->WriteUInt8(newSettings->roundTime);
	}
	if (lowFlag & ROOM_LOW_ARMSRESTRICTION) {
		msg->WriteUInt8(newSettings->armsRestriction);
	}
	if (lowFlag & ROOM_LOW_HOSTAGEKILLLIMIT) {
		msg->WriteUInt8(newSettings->unk16);
	}
	if (lowFlag & ROOM_LOW_FREEZETIME) {
		msg->WriteUInt8(newSettings->freezeTime);
	}
	if (lowFlag & ROOM_LOW_BUYTIME) {
		msg->WriteUInt8(newSettings->buyTime);
	}
	if (lowFlag & ROOM_LOW_DISPLAYGAMENAME) {
		msg->WriteUInt8(newSettings->displayNickname);
	}
	if (lowFlag & ROOM_LOW_TEAMBALANCE) {
		msg->WriteUInt8(newSettings->teamBalance);
	}
	if (lowFlag & ROOM_LOW_UNK21) {
		msg->WriteUInt8(newSettings->unk21);
	}
	if (lowFlag & ROOM_LOW_FRIENDLYFIRE) {
		msg->WriteUInt8(newSettings->friendlyFire);
	}
	if (lowFlag & ROOM_LOW_FLASHLIGHT) {
		msg->WriteUInt8(newSettings->flashlight);
	}
	if (lowFlag & ROOM_LOW_FOOTSTEPS) {
		msg->WriteUInt8(newSettings->footsteps);
	}
	if (lowFlag & ROOM_LOW_UNK25) {
		msg->WriteUInt8(newSettings->unk25);
	}
	if (lowFlag & ROOM_LOW_UNK26) {
		msg->WriteUInt8(newSettings->unk26);
	}
	if (lowFlag & ROOM_LOW_UNK27) {
		msg->WriteUInt8(newSettings->unk27);
	}
	if (lowFlag & ROOM_LOW_UNK28) {
		msg->WriteUInt8(newSettings->unk28);
	}
	if (lowFlag & ROOM_LOW_UNK29) {
		msg->WriteUInt8(newSettings->unk29);
	}
	if (lowFlag & ROOM_LOW_VIEWFLAG) {
		msg->WriteUInt8(newSettings->unk30);
	}
	if (lowFlag & ROOM_LOW_VOICECHAT) {
		msg->WriteUInt8(newSettings->voiceChat);
	}
	if (lowFlag & ROOM_LOW_STATUS) {
		msg->WriteUInt8(newSettings->status);
	}
	if (lowFlag & ROOM_LOW_UNK33) {
		msg->WriteUInt8(newSettings->unk33);

		// shiet
		for (int i = 0; i < 2; i++)
		{
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			msg->WriteUInt8(0);
			msg->WriteUInt16(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt16(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
		}
	}

	if (lowMidFlag & ROOM_LOWMID_UNK) {
		msg->WriteUInt32(0);
		msg->WriteString(newSettings->unk34);
		msg->WriteUInt8(newSettings->unk35);
		msg->WriteUInt8(newSettings->unk36);
		msg->WriteUInt8(newSettings->unk37);
	}
	if (lowMidFlag & ROOM_LOWMID_C4TIMER) {
		msg->WriteUInt8(newSettings->unk38);
	}
	if (lowMidFlag & ROOM_LOWMID_BOT) {
		msg->WriteUInt8(newSettings->botDifficulty);
		msg->WriteUInt8(newSettings->friendlyBots);
		msg->WriteUInt8(newSettings->enemyBots);
		msg->WriteUInt8(newSettings->botBalance);
		msg->WriteUInt8(newSettings->botAdd);
	}
	if (lowMidFlag & ROOM_LOWMID_KDRULE) {
		msg->WriteUInt8(newSettings->kdRule);
	}
	if (lowMidFlag & ROOM_LOWMID_STARTINGCASH) {
		msg->WriteUInt16(newSettings->startingCash);
	}
	if (lowMidFlag & ROOM_LOWMID_MOVINGSHOT) {
		msg->WriteUInt8(newSettings->unk46);
	}
	if (lowMidFlag & ROOM_LOWMID_UNK47) {
		msg->WriteUInt8(newSettings->unk47);
	}
	if (lowMidFlag & ROOM_LOWMID_STATUSSYMBOL) {
		msg->WriteUInt8(newSettings->unk48); // color
	}
	if (lowMidFlag & ROOM_LOWMID_RANDOMMAP) {
		msg->WriteUInt8(newSettings->unk49);
	}
	if (lowMidFlag & ROOM_LOWMID_MULTIPLEMAPS) {
		msg->WriteUInt8(newSettings->unk50_vec.size());
		for (size_t i = 0; i < newSettings->unk50_vec.size(); i++)
		{
			msg->WriteUInt8(newSettings->unk50_vec[i].unk1);
			msg->WriteUInt16(newSettings->unk50_vec[i].unk2);
		}
	}
	if (lowMidFlag & ROOM_LOWMID_UNK51) {
		msg->WriteUInt8(newSettings->unk51);
	}
	if (lowMidFlag & ROOM_LOWMID_WPNENHANCERESTRICT) {
		msg->WriteUInt8(newSettings->enhancement);
	}
	if (lowMidFlag & ROOM_LOWMID_SD) {
		msg->WriteUInt8(newSettings->unk53);
	}
	if (lowMidFlag & ROOM_LOWMID_ZSDIFFICULTY) {
		msg->WriteUInt8(newSettings->zsDifficulty);
		msg->WriteUInt32(newSettings->unk55);
		msg->WriteUInt32(newSettings->unk56);
	}
	if (lowMidFlag & ROOM_LOWMID_LEAGUERULE) {
		msg->WriteUInt8(newSettings->league);
	}
	if (lowMidFlag & ROOM_LOWMID_MANNERLIMIT) {
		msg->WriteUInt8(newSettings->mannerLimit);
	}
	if (lowMidFlag & ROOM_LOWMID_UNK59) {
		msg->WriteUInt16(newSettings->unk59);
	}
	if (lowMidFlag & ROOM_LOWMID_ZBLIMIT) {
		msg->WriteUInt8(newSettings->unk60);
		if (newSettings->zbLimit.size() == 4)
		{
			msg->WriteUInt32(newSettings->zbLimit[0]);
			msg->WriteUInt32(newSettings->zbLimit[1]);
			msg->WriteUInt32(newSettings->zbLimit[2]);
			msg->WriteUInt32(newSettings->zbLimit[3]);
		}
		else
		{
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
		}
	}
	if (lowMidFlag & ROOM_LOWMID_UNK61) {
		msg->WriteUInt32(newSettings->unk61);
		// some shit should be here (studio mode related)
		// if (newSettings->unk61)
	}
	if (lowMidFlag & ROOM_LOWMID_UNK62) {
		msg->WriteUInt8(newSettings->unk62_vec.size());
		for (size_t i = 0; i < newSettings->unk62_vec.size(); i++)
		{
			msg->WriteUInt16(newSettings->unk62_vec[i]);
		}
	}
	if (lowMidFlag & ROOM_LOWMID_UNK63) {
		msg->WriteUInt8(newSettings->unk63);
	}
	if (lowMidFlag & ROOM_LOWMID_TEAMSWITCH) {
		msg->WriteUInt8(newSettings->teamSwitch);
	}
	if (lowMidFlag & ROOM_LOWMID_UNK65) {
		msg->WriteUInt8(newSettings->unk65);
	}
	if (lowMidFlag & ROOM_LOWMID_UNK66) {
		msg->WriteUInt8(newSettings->unk66);
	}
	if (lowMidFlag & ROOM_LOWMID_UNK67) {
		msg->WriteUInt8(newSettings->unk67);
	}
	if (lowMidFlag & ROOM_LOWMID_UNK68) {
		msg->WriteUInt8(newSettings->unk68);
	}
	if (lowMidFlag & ROOM_LOWMID_ISZBCOMPETITIVE) {
		msg->WriteUInt8(newSettings->isZbCompetitive);
	}
	if (lowMidFlag & ROOM_LOWMID_UNK70) {
		msg->WriteUInt8(newSettings->unk70);
	}
	if (lowMidFlag & ROOM_LOWMID_UNK71) {
		msg->WriteUInt8(newSettings->unk71);
	}
	if (lowMidFlag & ROOM_LOWMID_UNK72) {
		msg->WriteUInt8(newSettings->unk72);
	}

	if (highMidFlag & ROOM_HIGHMID_UNK73)
	{
		msg->WriteUInt8(newSettings->unk73);
	}
	if (highMidFlag & ROOM_HIGHMID_UNK74) {
		msg->WriteUInt8(newSettings->unk74);
		if (newSettings->unk74_vec.size() != 4)
		{
			for (int i = 0; i < 4; i++)
			{
				msg->WriteUInt8(0);
			}
		}
		else
		{
			for (int i = 0; i < 4; i++)
			{
				msg->WriteUInt8(newSettings->unk74_vec[i]);
			}
		}
	}
	if (highMidFlag & ROOM_HIGHMID_UNK75) {
		msg->WriteUInt8(newSettings->unk75);
	}
	if (highMidFlag & ROOM_HIGHMID_UNK76) {
		msg->WriteUInt8(newSettings->unk76);
	}
}

uint64_t GetRoomValidFullFlag(bool highFlag)
{
	if (!highFlag)
	{
		return ROOM_LOW_NAME | ROOM_LOW_UNK | ROOM_LOW_UNK2 | ROOM_LOW_PASSWORD | ROOM_LOW_LEVELLIMIT | ROOM_LOW_UNK7 | ROOM_LOW_GAMEMODE | ROOM_LOW_MAPID | ROOM_LOW_MAXPLAYERS |
			ROOM_LOW_WINLIMIT | ROOM_LOW_NEEDEDKILLS | ROOM_LOW_GAMETIME | ROOM_LOW_ROUNDTIME | ROOM_LOW_ARMSRESTRICTION | ROOM_LOW_HOSTAGEKILLLIMIT | ROOM_LOW_FREEZETIME |
			ROOM_LOW_BUYTIME | ROOM_LOW_DISPLAYGAMENAME | ROOM_LOW_TEAMBALANCE | ROOM_LOW_UNK21 | ROOM_LOW_FRIENDLYFIRE | ROOM_LOW_FLASHLIGHT | ROOM_LOW_FOOTSTEPS | ROOM_LOW_UNK25 | ROOM_LOW_UNK26 |
			ROOM_LOW_UNK27 | ROOM_LOW_UNK28 | ROOM_LOW_UNK29 | ROOM_LOW_VIEWFLAG | ROOM_LOW_VOICECHAT | ROOM_LOW_STATUS | ROOM_LOW_UNK33;
	}

	return ROOM_LOWMID_UNK | ROOM_LOWMID_C4TIMER | ROOM_LOWMID_BOT | ROOM_LOWMID_KDRULE | ROOM_LOWMID_STARTINGCASH | ROOM_LOWMID_MOVINGSHOT | ROOM_LOWMID_UNK47 | ROOM_LOWMID_STATUSSYMBOL | ROOM_LOWMID_RANDOMMAP |
		ROOM_LOWMID_MULTIPLEMAPS | ROOM_LOWMID_UNK51 | ROOM_LOWMID_WPNENHANCERESTRICT | ROOM_LOWMID_SD | ROOM_LOWMID_ZSDIFFICULTY | ROOM_LOWMID_LEAGUERULE | ROOM_LOWMID_MANNERLIMIT |
		ROOM_LOWMID_UNK59 | ROOM_LOWMID_ZBLIMIT | ROOM_LOWMID_UNK61 | ROOM_LOWMID_UNK62 | ROOM_LOWMID_UNK63 | ROOM_LOWMID_TEAMSWITCH | ROOM_LOWMID_UNK65 | ROOM_LOWMID_UNK66 | ROOM_LOWMID_UNK67 |
		ROOM_LOWMID_UNK68 | ROOM_LOWMID_ISZBCOMPETITIVE | ROOM_LOWMID_UNK70 | ROOM_LOWMID_UNK71 | ROOM_LOWMID_UNK72;
}

void CPacketManager::SendRoomCreateAndJoin(CExtendedSocket* socket, CRoom* roomInfo)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(OutRoomPacketType::CreateAndJoin);

	msg->WriteUInt8(0);
	msg->WriteUInt32(roomInfo->GetID());
	msg->WriteUInt32(roomInfo->GetHostUser()->GetID());
	msg->WriteUInt16(0xB5);
	msg->WriteUInt8(0xFF);

	WriteSettings(msg, roomInfo->GetSettings(), /*GetRoomValidFullFlag(false) & ~ROOM_LOW_UNK33*/ 0x7FFFFFFB, 0xFFFFFFFF &~ ROOM_LOWMID_UNK61/*0x7FFBFFFE*/, -1, -1);

	msg->WriteUInt8(roomInfo->GetUsers().size());
	for (auto user : roomInfo->GetUsers())
	{
		UserNetworkConfig_s network = user->GetNetworkConfig();

		msg->WriteUInt32(user->GetID());
		msg->WriteString("");

		// user network info
		msg->WriteUInt8(user->GetRoomData()->m_Team);
		msg->WriteUInt8(0);
		msg->WriteUInt8(0);
		msg->WriteUInt8(0);
		msg->WriteUInt32(ip_string_to_int(network.m_szExternalIpAddress), false);
		msg->WriteUInt16(network.m_nExternalServerPort);
		msg->WriteUInt16(network.m_nExternalClientPort); //user->externalClientPort
		msg->WriteUInt32(ip_string_to_int(network.m_szLocalIpAddress), false);
		msg->WriteUInt16(network.m_nLocalServerPort);
		msg->WriteUInt16(network.m_nExternalClientPort); //user->localClientPort

		CUserCharacter character = user->GetCharacter(0xFFFFFFFF);

		CPacketHelper_FullUserInfo fullUserInfo;
		fullUserInfo.Build(msg->m_OutStream, user->GetID(), character);
	}

	socket->Send(msg);
}

void CPacketManager::SendRoomPlayerJoin(CExtendedSocket* socket, CUser* user, RoomTeamNum num)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(OutRoomPacketType::PlayerJoin);

	msg->WriteUInt32(user->GetID());
	msg->WriteString("");

	UserNetworkConfig_s network = user->GetNetworkConfig();

	// user network info
	msg->WriteUInt8(num);
	msg->WriteUInt8(0);
	msg->WriteUInt8(0);
	msg->WriteUInt8(0);
	msg->WriteUInt32(ip_string_to_int(network.m_szExternalIpAddress), false);
	msg->WriteUInt16(network.m_nExternalServerPort);
	msg->WriteUInt16(network.m_nExternalClientPort); //user->externalClientPort
	msg->WriteUInt32(ip_string_to_int(network.m_szLocalIpAddress), false);
	msg->WriteUInt16(network.m_nLocalServerPort);
	msg->WriteUInt16(network.m_nExternalClientPort); //user->localClientPort

	CUserCharacter character = user->GetCharacter(0xFFFFFFFF);

	CPacketHelper_FullUserInfo fullUserInfo;
	fullUserInfo.Build(msg->m_OutStream, user->GetID(), character);

	socket->Send(msg);
}

void CPacketManager::SendRoomUpdateSettings(CExtendedSocket* socket, CRoomSettings* newSettings, int low, int lowMid, int highMid, int high)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(OutRoomPacketType::UpdateSettings);

	WriteSettings(msg, newSettings, low, lowMid, highMid, high);

	socket->Send(msg);
}

void CPacketManager::SendRoomSetUserTeam(CExtendedSocket* socket, CUser* user, int teamNum)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(OutRoomPacketType::SetUserTeam);

	msg->WriteUInt32(user->GetID());
	msg->WriteUInt8(teamNum);

	socket->Send(msg);
}

void CPacketManager::SendRoomSetPlayerReady(CExtendedSocket* socket, CUser* user, RoomReadyStatus readyStatus)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(3);

	msg->WriteUInt32(user->GetID());
	msg->WriteUInt8(readyStatus);

	socket->Send(msg);
}

void CPacketManager::SendRoomSetHost(CExtendedSocket* socket, CUser* user)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(OutRoomPacketType::SetHost);
	msg->WriteUInt32(user->GetID());
	msg->WriteUInt8(1);

	socket->Send(msg);
}

void CPacketManager::SendRoomPlayerLeave(CExtendedSocket* socket, int userId)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(OutRoomPacketType::PlayerLeave);
	msg->WriteUInt32(userId);

	socket->Send(msg);
}

void CPacketManager::SendRoomPlayerLeaveIngame(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(OutRoomPacketType::PlayerLeaveIngame);

	socket->Send(msg);
}

void CPacketManager::SendRoomInviteUserList(CExtendedSocket* socket, CUser* user)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(OutRoomPacketType::UserInviteList);

	CChannel* channel = user->GetCurrentChannel();
	msg->WriteUInt16(channel->m_Users.size());

	for (auto u : channel->m_Users)
	{
		msg->WriteUInt32(u->GetID());

		CUserCharacter character = u->GetCharacter(0xFFFFFFFF);

		CPacketHelper_FullUserInfo fullUserInfo;
		fullUserInfo.Build(msg->m_OutStream, user->GetID(), character);
	}

	socket->Send(msg);
}

void CPacketManager::SendRoomGameResult(CExtendedSocket* socket, CRoom* room, CGameMatch* match)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(OutRoomPacketType::SetGameResult);

	int winTeam = 0;
	if (match->m_nCtWinCount > match->m_nTerWinCount)
		winTeam = 1;
	else
		winTeam = 2;

	msg->WriteUInt8(winTeam);
	msg->WriteUInt8(0);
	msg->WriteUInt8(0);
	msg->WriteUInt8(match->m_UserStats.size());
	msg->WriteUInt8(room->GetSettings()->gameMode);

	for (auto stat : match->m_UserStats)
	{
		CUser* user = stat->m_pUser;

		//int totalExp = stat->m_nExpEarned + stat->m_nBonusExpEarned + uData->exp;

		msg->WriteUInt32(user->GetID());
		msg->WriteUInt8(room->GetUserTeam(user));
		msg->WriteInt32(stat->m_nKills);
		msg->WriteUInt16(stat->m_nDeaths);
		msg->WriteUInt8(0); // win
		msg->WriteUInt8(0); // lose
		msg->WriteUInt16(stat->m_nExpEarned);
		msg->WriteUInt32(stat->m_nBonusExpEarned);
		msg->WriteUInt16(stat->m_nPointsEarned);
		msg->WriteUInt32(stat->m_nBonusPointsEarned);
		msg->WriteUInt8(match->m_nFirstPlaceUserId == user->GetID()); // is first place
		msg->WriteUInt8(0/*user->CheckForLvlUp(totalExp)*/); // is level up
		msg->WriteUInt16(0); // other bonus points
		msg->WriteUInt16(stat->m_nItemBonusPoints);
		msg->WriteUInt16(stat->m_nClassBonusPoints);
		msg->WriteUInt16(0); // event bonus points
		msg->WriteUInt16(0); // accessories bonus points
		msg->WriteUInt16(0); // team/clan bonus points
		msg->WriteUInt16(0);
		msg->WriteUInt16(0);
		msg->WriteUInt16(0); // other bonus exp
		msg->WriteUInt16(stat->m_nItemBonusExp);
		msg->WriteUInt16(stat->m_nClassBonusPoints);
		msg->WriteUInt16(0); // event bonus exp
		msg->WriteUInt16(0); // accessories bonus exp
		msg->WriteUInt16(0); // team/clan bonus exp
		msg->WriteUInt16(0);
		msg->WriteUInt16(0); 
		msg->WriteUInt8(0); // kakaito huita sleva
		msg->WriteUInt8(0); // headshots
		msg->WriteUInt8(0); // frag kills
		msg->WriteUInt8(0); // knife kills

		switch (room->GetSettings()->gameMode)
		{
		case 0:
		case 3:
		case 6:
		case 7:
		case 50:
			msg->WriteUInt8(0); // bombs defused
			msg->WriteUInt8(0); // targets ???
			msg->WriteUInt8(0); // hostages rescued
			msg->WriteUInt8(0); // escaped as VIP
			msg->WriteUInt8(0); // killed VIP
			break;
		case 8:
		case 9:
		case 14:
		case 20:
		case 24:
		case 32:
		case 45:
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			break;
		case 11:
		case 13:
			msg->WriteUInt32(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			break;
		case 12:
			msg->WriteUInt32(0);
			msg->WriteUInt16(0);
			break;
		case 15:
		case 17:
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			msg->WriteUInt16(0);
			break;
		case 16:
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			break;
		case 18:
			msg->WriteUInt32(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			break;
		case 10:
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			break;
		case 21:
			msg->WriteUInt16(0);
			msg->WriteUInt8(0);
			break;
		case 23:
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt16(0);
			break;
		case 25:
			msg->WriteUInt16(0);
			msg->WriteUInt32(0);
			break;
		case 26:
			msg->WriteUInt16(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			break;
		case 27:
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			break;
		case 28:
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			break;
		case 29:
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			break;
		case 30:
			msg->WriteUInt32(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			break;
		case 33:
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt32(0);
			break;
		case 38:
		case 39:
			msg->WriteUInt32(0);
			break;
		case 37:
			msg->WriteUInt16(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt8(0);
			break;
		case 46:
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			break;
		case 49:
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			break;
		case 42:
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt8(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			break;
		case 43:
		case 44:
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt8(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			break;
		case 47:
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt8(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			break;
		}
	}

	socket->Send(msg);
}

void CPacketManager::SendRoomKick(CExtendedSocket* socket, int userID)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(OutRoomPacketType::KickUser);

	msg->WriteUInt32(userID);

	socket->Send(msg);
}

void CPacketManager::SendRoomInitiateVoteKick(CExtendedSocket* socket, int userID, int destUserID, int reason)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(OutRoomPacketType::InitiateVoteKick);

	msg->WriteUInt32(userID);
	msg->WriteUInt32(destUserID);
	msg->WriteUInt8(reason);

	socket->Send(msg);
}

void CPacketManager::SendRoomVoteKickResult(CExtendedSocket* socket, bool kick, int userID, int reason)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(OutRoomPacketType::VoteKickResult);

	msg->WriteUInt8(kick);
	if (kick && kick != 1)
	{
		msg->WriteString("UNK STR");
	}
	else
	{
		msg->WriteUInt32(userID); // userID
		msg->WriteUInt8(reason); // reason
	}

	socket->Send(msg);
}

void CPacketManager::SendRoomZBAddonSurvey(CExtendedSocket* socket, vector<int>& addons)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Room);
	msg->BuildHeader();

	msg->WriteUInt8(OutRoomPacketType::ZBAddonSurvey);

	msg->WriteUInt8(addons.size());
	for (auto addonID : addons)
	{
		msg->WriteUInt16(addonID);
	}

	socket->Send(msg);
}

void CPacketManager::SendDefaultItems(CExtendedSocket* socket, vector<CUserInventoryItem>& items)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Inventory_DefaultItems);
	msg->BuildHeader();
	msg->WriteUInt16(items.size());
	for (auto& item : items)
	{
		msg->WriteUInt16(item.m_nSlot);
		msg->WriteUInt8(1); // flag
		if (1)
		{
			msg->WriteUInt16(item.m_nItemID);
			msg->WriteUInt16(item.m_nCount);
			msg->WriteUInt8(item.m_nStatus);
			msg->WriteUInt8(item.m_nInUse);
			msg->WriteUInt32(item.m_nObtainDate);
			msg->WriteUInt32(item.m_nExpiryDate);

			msg->WriteUInt16(item.m_nPaintID);

			std::stringstream iss(item.m_nPaintIDList);
			std::vector<int> paintIDs;
			int pID;

			while (iss >> pID)
				paintIDs.push_back(pID);

			msg->WriteUInt16(paintIDs.size());
			for (auto paintID : paintIDs)
			{
				msg->WriteUInt16(paintID);
			}

			msg->WriteUInt16(item.m_nEnhancementLevel);
			msg->WriteUInt32(item.m_nEnhancementExp);
			msg->WriteUInt32(item.m_nEnhanceValue);

			msg->WriteUInt8(3); // can be disassembled flag
			msg->WriteUInt32(0); // itemID or timestamp

			msg->WriteUInt8(item.GetPartCount());
			if (item.m_nPartSlot1)
			{
				msg->WriteUInt8(0);
				msg->WriteUInt16(item.m_nPartSlot1);
			}
			if (item.m_nPartSlot2)
			{
				msg->WriteUInt8(1);
				msg->WriteUInt16(item.m_nPartSlot2);
			}

			msg->WriteUInt8(item.m_nInUse);

			// unk shit
			msg->WriteUInt8(0); 
			msg->WriteUInt8(item.m_nLockStatus); // locked item

			msg->WriteUInt32(0); // unk
			msg->WriteUInt8(0); // unk array size
			for (int i = 0; i < 0; i++)
			{
				msg->WriteUInt8(i++);
				msg->WriteUInt16(0);
			}
		}
	}
	socket->Send(msg);
}

void CPacketManager::SendHostOnItemUse(CExtendedSocket* socket, int userId, int itemId)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Host);
	msg->BuildHeader();
	msg->WriteUInt8(HostPacketType::UseScenItem);
	msg->WriteUInt32(userId);
	msg->WriteUInt16(itemId);
	msg->WriteInt8(-1);
	socket->Send(msg);
}

void CPacketManager::SendHostServerJoin(CExtendedSocket* socket, int ipAddress, bool bigEndian, int port, int userId)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Host);
	msg->BuildHeader();
	msg->WriteUInt8(HostPacketType::HostServerJoin);
	msg->WriteUInt32(ipAddress, bigEndian);
	msg->WriteUInt16(port);
	msg->WriteUInt64(userId);
	socket->Send(msg);
}

void CPacketManager::SendHostStop(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Host);
	msg->BuildHeader();
	msg->WriteUInt8(HostPacketType::HostStop);
	socket->Send(msg);
}

void CPacketManager::SendHostLeaveResultWindow(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Host);
	msg->BuildHeader();
	msg->WriteUInt8(HostPacketType::LeaveResultWindow);
	socket->Send(msg);
}

void CPacketManager::SendHostUserInventory(CExtendedSocket* socket, int userId, vector<CUserInventoryItem>& items)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Host);
	msg->BuildHeader();

	msg->WriteUInt8(HostPacketType::SetInventory);
	msg->WriteUInt32(userId);

	msg->WriteUInt16(items.size());
	for (auto& item : items)
	{
		msg->WriteUInt16(item.m_nItemID);
		msg->WriteUInt8(0); // что это?
		msg->WriteUInt16(item.m_nCount);
		msg->WriteUInt16(item.m_nPaintID);
		msg->WriteUInt16(item.m_nEnhancementLevel);
		msg->WriteUInt32(item.m_nEnhanceValue);
		msg->WriteUInt8(item.GetPartCount());

		if (item.m_nPartSlot1)
		{
			msg->WriteUInt8(0);
			msg->WriteUInt16(item.m_nPartSlot1);
		}
		if (item.m_nPartSlot2)
		{
			msg->WriteUInt8(1);
			msg->WriteUInt16(item.m_nPartSlot2);
		}
	}

	socket->Send(msg);
}

void CPacketManager::SendHostGameStart(CExtendedSocket* socket, int userId)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Host);
	msg->BuildHeader();

	msg->WriteUInt8(HostPacketType::GameStart);
	msg->WriteUInt32(userId);
	msg->WriteUInt8(0);
	msg->WriteUInt8(0); // enable nexon analytics(it write every step on the map like kill event etc)

	socket->Send(msg);
}

void CPacketManager::SendHostZBAddon(CExtendedSocket* socket, int userID, vector<int>& addons)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Host);
	msg->BuildHeader();

	msg->WriteUInt8(11); // set zb addon

	msg->WriteUInt32(userID);
	msg->WriteUInt16(addons.size());
	for (auto addonID : addons)
	{
		msg->WriteUInt16(addonID);
	}

	socket->Send(msg);
}

void CPacketManager::SendHostJoin(CExtendedSocket* socket, int hostID)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Host);
	msg->BuildHeader();

	msg->WriteUInt8(HostPacketType::HostJoin);
	msg->WriteUInt32(hostID);
	msg->WriteUInt64(0); // что это?

	/*UserNetworkConfig_s network = user->GetNetworkConfig();

	msg->WriteUInt32(ip_string_to_int(network.m_szExternalIpAddress), false);
	msg->WriteUInt16(network.m_nExternalServerPort);
	msg->WriteUInt16(network.m_nExternalClientPort); //user->externalClientPort
	msg->WriteUInt32(ip_string_to_int(network.m_szLocalIpAddress), false);
	msg->WriteUInt16(network.m_nLocalServerPort);
	msg->WriteUInt16(network.m_nExternalClientPort); //user->localClientPort*/

	socket->Send(msg);
}

void CPacketManager::SendHostFlyerFlock(CExtendedSocket* socket, int type)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Host);
	msg->BuildHeader();

	msg->WriteUInt8(HostPacketType::FlyerFlock);
	if (type == 1)
		msg->WriteString(OBFUSCATE("mosquito"));
	else if (type == 2)
		msg->WriteString(OBFUSCATE("kite"));
	else
		msg->WriteString(OBFUSCATE("unknown"));

	msg->WriteUInt8(type ? 1 : 0); // active

	socket->Send(msg);
}

void CPacketManager::SendHostAdBalloon(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Host);
	msg->BuildHeader();

	msg->WriteUInt8(HostPacketType::AdBalloon);
	// to reverse
	msg->WriteUInt32(0); // userID?
	msg->WriteUInt16(0);

	socket->Send(msg);
}

void CPacketManager::SendHostRestart(CExtendedSocket* socket, int newHostUserID, bool host, CGameMatch* match)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Host);
	msg->BuildHeader();

	msg->WriteUInt8(HostPacketType::HostRestart);
	msg->WriteUInt32(newHostUserID);

	if (host)
	{
		vector<unsigned char>& saveData = match->GetSaveData();
		msg->WriteUInt16(saveData.size());
		msg->WriteData(saveData.data(), saveData.size());

		msg->WriteUInt8(match->m_UserStats.size());
		for (auto userStat : match->m_UserStats)
		{
			msg->WriteUInt32(userStat->m_pUser->GetID());
		}
	}
	else
	{
		msg->WriteUInt8(1);
	}

	socket->Send(msg);
}

void CPacketManager::SendCharacter(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Character);
	msg->BuildHeader();
	socket->Send(msg);
}

void CPacketManager::SendEventAdd(CExtendedSocket* socket, int eventsFlag)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Event);
	msg->BuildHeader();
	msg->WriteUInt8(1);
	msg->WriteUInt32(eventsFlag);
	socket->Send(msg);
}

void CPacketManager::SendEventUnk(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Event);
	msg->BuildHeader();
	msg->WriteUInt8(0);
	msg->WriteUInt8(0);
	socket->Send(msg);
}

void CPacketManager::SendEventUnk2(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Event);
	msg->BuildHeader();
	msg->WriteUInt8(3);
	msg->WriteUInt32(8); // 5 - christmas, 6 - halloween, 7 - halloween + snow
	socket->Send(msg);
}

void CPacketManager::SendMiniGameBingoUpdate(CExtendedSocket* socket, UserBingo& bingo, vector<UserBingoSlot>& slots, vector<UserBingoPrizeSlot>& prizes)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::MiniGame);
	msg->BuildHeader();

	msg->WriteUInt8(0); // bingo
	msg->WriteUInt8(0); // update desk
	msg->WriteUInt8(slots.size());
	for (auto &slot : slots)
	{
		msg->WriteUInt8(slot.number);
		msg->WriteUInt8(slot.opened);
	}
	msg->WriteUInt8(prizes.size());
	for (auto &prize : prizes)
	{
		msg->WriteUInt16(prize.item.itemID);
		msg->WriteUInt8(prize.item.count);
		msg->WriteUInt8(prize.item.duration);
		msg->WriteUInt8(prize.opened);
	}

	socket->Send(msg);
}

void CPacketManager::SendMiniGameWeaponReleaseUpdate(CExtendedSocket* socket, WeaponReleaseConfig& cfg, vector<UserWeaponReleaseRow>& rows, vector<UserWeaponReleaseCharacter>& characters, int totalCount)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::MiniGame);
	msg->BuildHeader();

	msg->WriteUInt8(6); // weapon release
	msg->WriteUInt8(65); // update

	msg->WriteUInt8(1); // game status(1 - active, 2 - event ended)
	msg->WriteUInt8(cfg.rows.size());
	for (auto& row : cfg.rows)
	{
		auto rowIt = find_if(rows.begin(), rows.end(),
			[row](UserWeaponReleaseRow& progressRow) { return progressRow.id == row.item.itemID; });

		msg->WriteUInt16(row.item.itemID);
		msg->WriteUInt8(row.item.count);
		msg->WriteUInt8(row.item.duration);
		msg->WriteString(row.rowName);

		if (rowIt != rows.end())
		{
			msg->WriteUInt8(rowIt->progress);
			msg->WriteUInt8(rowIt->opened);
		}
		else
		{
			msg->WriteUInt8(0);
			msg->WriteUInt8(0);
		}
	}
	msg->WriteUInt8(cfg.characters.size());
	for (auto character : cfg.characters)
	{
		msg->WriteUInt8(character);

		auto characterIt = find_if(characters.begin(), characters.end(),
			[character](UserWeaponReleaseCharacter& progressCharacter) { return progressCharacter.character == character; });
		if (characterIt != characters.end())
		{
			msg->WriteUInt8(characterIt->count);
		}
		else
		{
			msg->WriteUInt8(0);
		}
	}

	msg->WriteUInt16(totalCount);

	socket->Send(msg);
}

void CPacketManager::SendMiniGameWeaponReleaseSetCharacter(CExtendedSocket* socket, int status, int weaponSlot, int slot, int character, int charLeft)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::MiniGame);
	msg->BuildHeader();

	msg->WriteUInt8(6); // weapon release
	msg->WriteUInt8(66);

	msg->WriteUInt8(status); // 0 - set character, 1 - grey button, 2 - set last character, 3 - CSO_Event_NotInProgress, 4 - CSO_WeaponRelease_No_Letter, 5 - CSO_WeaponRelease_Already_Use_Letter
	if (status <= 2)
	{
		msg->WriteUInt8(status == 2 ? 0 : 1); // row is not closed
		msg->WriteUInt8(weaponSlot);
		msg->WriteUInt8(slot);
		msg->WriteUInt8(character);
		msg->WriteUInt8(charLeft);
	}

	socket->Send(msg);
}

void CPacketManager::SendMiniGameWeaponReleaseUnk2(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::MiniGame);
	msg->BuildHeader();

	msg->WriteUInt8(6); // weapon release
	msg->WriteUInt8(67);

	msg->WriteUInt8(0);
	msg->WriteUInt16(5);

	socket->Send(msg);
}

void CPacketManager::SendMiniGameWeaponReleaseIGNotice(CExtendedSocket* socket, char character)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::MiniGame);
	msg->BuildHeader();

	msg->WriteUInt8(6); // weapon release
	msg->WriteUInt8(68);

	msg->WriteUInt8(character);

	socket->Send(msg);
}

void CPacketManager::SendQuests(CExtendedSocket* socket, int userID, vector<CQuest*>& quests, vector<UserQuestProgress>& questsProgress, int infoFlag, int taskFlag, int rewardFlag, int statFlag)
{
	g_pConsole->Warn("SendQuests TODO: reverse\n");
}

void CPacketManager::SendQuestUpdateMainInfo(CExtendedSocket* socket, int flag, CQuest* quest, UserQuestProgress& questProgress)
{
	g_pConsole->Warn("SendQuestUpdateMainInfo TODO: reverse\n");
}

void CPacketManager::SendQuestUpdateTaskInfo(CExtendedSocket* socket, int flag, int questID, CQuestTask* task, UserQuestTaskProgress& taskProgress)
{
	g_pConsole->Warn("SendQuestUpdateTaskInfo TODO: reverse\n");
}

void CPacketManager::SendQuestUpdateRewardInfo(CExtendedSocket* socket, int flag, int questID, QuestReward_s& reward)
{
	g_pConsole->Warn("SendQuestUpdateRewardInfo TODO: reverse\n");
}

void CPacketManager::SendQuestUpdateQuestStat(CExtendedSocket* socket, int flag, int honorPoints, UserQuestStat& stat)
{
	g_pConsole->Warn("SendQuestUpdateQuestStat TODO: reverse\n");
}

void CPacketManager::SendFavoriteLoadout(CExtendedSocket* socket, int characterItemID, int currentLoadout, CUserLoadout& loadouts)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Favorite);
	msg->BuildHeader();

	msg->WriteUInt8(FavoritePacketType::SetLoadout);
	msg->WriteUInt16(characterItemID);
	msg->WriteUInt8(currentLoadout);
	msg->WriteUInt8(LOADOUT_COUNT);
	msg->WriteUInt8(LOADOUT_SLOT_COUNT); // items in loadout

	for (auto &loadout : loadouts.m_Loadouts)
	{
		msg->WriteUInt16(loadout[0]);
		msg->WriteUInt16(loadout[1]);
		msg->WriteUInt16(loadout[2]);
		msg->WriteUInt16(loadout[3]);
	}

	socket->Send(msg);
}

void CPacketManager::SendFavoriteFastBuy(CExtendedSocket* socket, vector<CUserFastBuy>& fastbuy)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Favorite);
	msg->BuildHeader();

	msg->WriteUInt8(FavoritePacketType::SetFastBuy);

	int i = 0;
	for (auto &subFastBuy : fastbuy)
	{
		msg->WriteUInt8(i++);

		msg->WriteString(subFastBuy.m_Name);

		for (auto item : subFastBuy.m_Items)
		{
			msg->WriteUInt16(item);
		}
	}

	socket->Send(msg);
}

void CPacketManager::SendFavoriteBuyMenu(CExtendedSocket* socket, vector<CUserBuyMenu>& buyMenu)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Favorite);
	msg->BuildHeader();

	msg->WriteUInt8(FavoritePacketType::SetBuyMenu);

	int i = 0;
	for (auto &subMenu : buyMenu)
	{
		msg->WriteUInt8(i++);

		for (auto item : subMenu.items)
		{
			msg->WriteUInt16(item);
		}

		if (i == 17)
		{
			msg->WriteUInt16(460);
			msg->WriteUInt16(459);
			msg->WriteUInt16(1);
		}
		else
		{
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
			msg->WriteUInt16(0);
		}
	}

	socket->Send(msg);
}

void CPacketManager::SendFavoriteBookmark(CExtendedSocket* socket, vector<int>& bookmark)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Favorite);
	msg->BuildHeader();

	msg->WriteUInt8(FavoritePacketType::SetBookmark);

	msg->WriteUInt8(bookmark.size());
	for (auto itemID : bookmark)
	{
		msg->WriteUInt16(itemID);
	}

	socket->Send(msg);
}

unsigned char rawData[12011] = {
	0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x34, 0xF4, 0xA8, 0x01, 0xF4, 0x42,
	0xA9, 0x01, 0x00, 0x00, 0x41, 0x64, 0x76, 0x65, 0x6E, 0x74, 0x20, 0x43,
	0x61, 0x6C, 0x65, 0x6E, 0x64, 0x61, 0x72, 0x20, 0x45, 0x76, 0x65, 0x6E,
	0x74, 0x00, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x66, 0x6F,
	0x72, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x6D, 0x69, 0x73, 0x73, 0x69,
	0x6F, 0x6E, 0x20, 0x77, 0x68, 0x65, 0x6E, 0x20, 0x64, 0x61, 0x69, 0x6C,
	0x79, 0x20, 0x6D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x73, 0x20, 0x61,
	0x72, 0x65, 0x20, 0x63, 0x6F, 0x6D, 0x70, 0x6C, 0x65, 0x74, 0x65, 0x64,
	0x3A, 0x0A, 0x0A, 0x20, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20,
	0x31, 0x3A, 0x20, 0x43, 0x6C, 0x69, 0x63, 0x6B, 0x20, 0x47, 0x65, 0x74,
	0x20, 0x4C, 0x6F, 0x67, 0x69, 0x6E, 0x20, 0x53, 0x75, 0x70, 0x70, 0x6C,
	0x69, 0x65, 0x73, 0x20, 0x66, 0x72, 0x6F, 0x6D, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x4C, 0x6F, 0x67, 0x69, 0x6E, 0x20, 0x53, 0x75, 0x70, 0x70, 0x6C,
	0x79, 0x20, 0x57, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x2E, 0x0A, 0x20, 0x4D,
	0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x32, 0x3A, 0x20, 0x43, 0x6C,
	0x69, 0x63, 0x6B, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4D, 0x69, 0x73, 0x73,
	0x69, 0x6F, 0x6E, 0x73, 0x20, 0x74, 0x61, 0x62, 0x20, 0x74, 0x6F, 0x20,
	0x76, 0x69, 0x65, 0x77, 0x20, 0x74, 0x68, 0x65, 0x20, 0x45, 0x76, 0x65,
	0x6E, 0x74, 0x20, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x2E, 0x0A,
	0x20, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x33, 0x3A, 0x20,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x20, 0x50, 0x6F, 0x69,
	0x6E, 0x74, 0x20, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72, 0x20, 0x66,
	0x72, 0x6F, 0x6D, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x68, 0x6F, 0x70,
	0x2E, 0x0A, 0x20, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x34,
	0x3A, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x45, 0x78, 0x70, 0x6C,
	0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x6F, 0x6E, 0x63, 0x65,
	0x20, 0x62, 0x79, 0x20, 0x63, 0x6C, 0x69, 0x63, 0x6B, 0x69, 0x6E, 0x67,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x45, 0x78, 0x70, 0x6C, 0x6F, 0x72, 0x61,
	0x74, 0x69, 0x6F, 0x6E, 0x20, 0x62, 0x75, 0x74, 0x74, 0x6F, 0x6E, 0x20,
	0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x6F, 0x74, 0x74, 0x6F,
	0x6D, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4C, 0x6F, 0x62,
	0x62, 0x79, 0x20, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6E, 0x2E, 0x0A, 0x20,
	0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x35, 0x3A, 0x20, 0x50,
	0x6C, 0x61, 0x79, 0x20, 0x4F, 0x72, 0x69, 0x67, 0x69, 0x6E, 0x61, 0x6C,
	0x2C, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69, 0x65, 0x20, 0x53, 0x63, 0x65,
	0x6E, 0x61, 0x72, 0x69, 0x6F, 0x2C, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69,
	0x65, 0x20, 0x5A, 0x2C, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69, 0x65, 0x20,
	0x43, 0x6C, 0x61, 0x73, 0x73, 0x69, 0x63, 0x2C, 0x20, 0x5A, 0x6F, 0x6D,
	0x62, 0x69, 0x65, 0x20, 0x48, 0x65, 0x72, 0x6F, 0x2C, 0x20, 0x5A, 0x6F,
	0x6D, 0x62, 0x69, 0x65, 0x20, 0x45, 0x76, 0x6F, 0x6C, 0x75, 0x74, 0x69,
	0x6F, 0x6E, 0x2C, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69, 0x65, 0x20, 0x43,
	0x6F, 0x6E, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2C, 0x20, 0x61, 0x6E, 0x64,
	0x20, 0x48, 0x69, 0x64, 0x65, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x53, 0x65,
	0x65, 0x6B, 0x20, 0x6D, 0x6F, 0x64, 0x65, 0x20, 0x31, 0x20, 0x74, 0x69,
	0x6D, 0x65, 0x2E, 0x0A, 0x20, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E,
	0x20, 0x36, 0x3A, 0x20, 0x4C, 0x6F, 0x67, 0x20, 0x69, 0x6E, 0x20, 0x6F,
	0x6E, 0x20, 0x61, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6E,
	0x74, 0x20, 0x64, 0x61, 0x79, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20,
	0x63, 0x6F, 0x6D, 0x70, 0x6C, 0x65, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x4D,
	0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x73, 0x20, 0x31, 0x20, 0x74, 0x68,
	0x72, 0x6F, 0x75, 0x67, 0x68, 0x20, 0x35, 0x2E, 0x0A, 0x0A, 0x4F, 0x6E,
	0x6C, 0x79, 0x20, 0x72, 0x6F, 0x6F, 0x6D, 0x73, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x33, 0x20, 0x6F, 0x72, 0x20, 0x6D, 0x6F, 0x72, 0x65, 0x20,
	0x70, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x73, 0x0A, 0x43, 0x6F, 0x75, 0x6E,
	0x74, 0x73, 0x20, 0x69, 0x6E, 0x20, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6F,
	0x20, 0x4D, 0x6F, 0x64, 0x65, 0x2E, 0x0A, 0x4E, 0x6F, 0x20, 0x6D, 0x6F,
	0x64, 0x65, 0x20, 0x6D, 0x69, 0x6E, 0x69, 0x6D, 0x75, 0x6D, 0x20, 0x70,
	0x6C, 0x61, 0x79, 0x20, 0x6C, 0x69, 0x6D, 0x69, 0x74, 0x2E, 0x0A, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x65,
	0x61, 0x63, 0x68, 0x20, 0x6D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20,
	0x63, 0x61, 0x6E, 0x20, 0x6F, 0x6E, 0x6C, 0x79, 0x20, 0x62, 0x65, 0x20,
	0x6F, 0x62, 0x74, 0x61, 0x69, 0x6E, 0x65, 0x64, 0x20, 0x6F, 0x6E, 0x63,
	0x65, 0x20, 0x61, 0x20, 0x64, 0x61, 0x79, 0x20, 0x70, 0x65, 0x72, 0x20,
	0x61, 0x63, 0x63, 0x6F, 0x75, 0x6E, 0x74, 0x2E, 0x0A, 0x4D, 0x69, 0x73,
	0x73, 0x69, 0x6F, 0x6E, 0x73, 0x20, 0x63, 0x61, 0x6E, 0x20, 0x62, 0x65,
	0x20, 0x63, 0x6C, 0x65, 0x61, 0x72, 0x65, 0x64, 0x20, 0x72, 0x65, 0x67,
	0x61, 0x72, 0x64, 0x6C, 0x65, 0x73, 0x73, 0x20, 0x6F, 0x66, 0x20, 0x6F,
	0x72, 0x64, 0x65, 0x72, 0x2E, 0x0A, 0x43, 0x6F, 0x6D, 0x70, 0x6C, 0x65,
	0x74, 0x65, 0x64, 0x20, 0x6D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x73,
	0x20, 0x61, 0x72, 0x65, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x65,
	0x76, 0x65, 0x72, 0x79, 0x20, 0x64, 0x61, 0x79, 0x20, 0x61, 0x74, 0x20,
	0x6D, 0x69, 0x64, 0x6E, 0x69, 0x67, 0x68, 0x74, 0x2E, 0x0A, 0x4F, 0x6E,
	0x6C, 0x79, 0x20, 0x6D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x73, 0x20,
	0x31, 0x20, 0x74, 0x68, 0x72, 0x6F, 0x75, 0x67, 0x68, 0x20, 0x35, 0x20,
	0x61, 0x72, 0x65, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6C, 0x61, 0x62, 0x6C,
	0x65, 0x20, 0x6F, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6C, 0x61, 0x73,
	0x74, 0x20, 0x64, 0x61, 0x79, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x65, 0x76, 0x65, 0x6E, 0x74, 0x2E, 0x00, 0x68, 0x74, 0x74, 0x70,
	0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x63, 0x73, 0x6E, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6F, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x77, 0x65, 0x65,
	0x6B, 0x6C, 0x79, 0x2D, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2D, 0x6E, 0x6F,
	0x74, 0x65, 0x73, 0x2D, 0x64, 0x65, 0x63, 0x65, 0x6D, 0x62, 0x65, 0x72,
	0x2D, 0x31, 0x34, 0x2D, 0x32, 0x30, 0x32, 0x32, 0x2F, 0x00, 0x00, 0x06,
	0x00, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x31, 0x2C, 0x20,
	0x47, 0x65, 0x74, 0x20, 0x4C, 0x6F, 0x67, 0x69, 0x6E, 0x20, 0x53, 0x75,
	0x70, 0x70, 0x6C, 0x69, 0x65, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E,
	0x20, 0x32, 0x2C, 0x20, 0x56, 0x69, 0x65, 0x77, 0x20, 0x45, 0x76, 0x65,
	0x6E, 0x74, 0x20, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x73, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x69,
	0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x33, 0x2C, 0x20, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x20,
	0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x57, 0x0A, 0x00, 0x00, 0x03, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x69, 0x73,
	0x73, 0x69, 0x6F, 0x6E, 0x20, 0x34, 0x2C, 0x20, 0x50, 0x72, 0x6F, 0x63,
	0x65, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x45, 0x78, 0x70,
	0x6C, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x80, 0x21, 0x00, 0x00, 0x03,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x69,
	0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x35, 0x2C, 0x20, 0x43, 0x6F, 0x6D,
	0x70, 0x6C, 0x65, 0x74, 0x65, 0x20, 0x47, 0x61, 0x6D, 0x65, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x74, 0x20, 0x00,
	0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x36, 0x2C, 0x20, 0x4C,
	0x6F, 0x67, 0x20, 0x69, 0x6E, 0x20, 0x6F, 0x6E, 0x20, 0x64, 0x69, 0x66,
	0x66, 0x65, 0x72, 0x65, 0x6E, 0x74, 0x20, 0x64, 0x61, 0x79, 0x20, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x20, 0x63, 0x6F, 0x6D, 0x70, 0x6C, 0x65, 0x74,
	0x69, 0x6E, 0x67, 0x20, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x73,
	0x20, 0x31, 0x20, 0x74, 0x68, 0x72, 0x6F, 0x75, 0x67, 0x68, 0x20, 0x35,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x64,
	0x20, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x05, 0x21, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xE3, 0x25, 0xA9, 0x01, 0x00, 0x00, 0x00, 0x65, 0x76, 0x74, 0x32, 0x32,
	0x31, 0x32, 0x31, 0x34, 0x41, 0x64, 0x76, 0x65, 0x6E, 0x74, 0x43, 0x61,
	0x6C, 0x65, 0x6E, 0x64, 0x65, 0x72, 0x00, 0x01, 0x00, 0x00, 0xF4, 0xA5,
	0xA0, 0x01, 0xA4, 0x87, 0xE1, 0x01, 0x00, 0x00, 0x45, 0x78, 0x70, 0x6C,
	0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x50, 0x69, 0x6C, 0x65,
	0x75, 0x70, 0x20, 0x50, 0x72, 0x6F, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20,
	0x45, 0x76, 0x65, 0x6E, 0x74, 0x00, 0x4D, 0x61, 0x79, 0x20, 0x74, 0x68,
	0x6F, 0x73, 0x65, 0x20, 0x77, 0x68, 0x6F, 0x20, 0x76, 0x69, 0x67, 0x6F,
	0x72, 0x6F, 0x75, 0x73, 0x6C, 0x79, 0x20, 0x65, 0x78, 0x70, 0x6C, 0x6F,
	0x72, 0x65, 0x20, 0x65, 0x61, 0x72, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x77, 0x65, 0x61, 0x70, 0x6F, 0x6E, 0x73, 0x2E, 0x0A, 0x0A, 0x46, 0x6F,
	0x72, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x74, 0x69, 0x6D, 0x65, 0x20,
	0x79, 0x6F, 0x75, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x20,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x20, 0x66, 0x69, 0x6E, 0x69, 0x73, 0x68, 0x69, 0x6E, 0x67, 0x20,
	0x65, 0x78, 0x70, 0x6C, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2C,
	0x20, 0x79, 0x6F, 0x75, 0x20, 0x65, 0x61, 0x72, 0x6E, 0x20, 0x70, 0x6F,
	0x69, 0x6E, 0x74, 0x73, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6F,
	0x6E, 0x20, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6C, 0x74, 0x79,
	0x2E, 0x0A, 0x45, 0x61, 0x72, 0x6E, 0x20, 0x61, 0x20, 0x70, 0x65, 0x72,
	0x6D, 0x61, 0x6E, 0x65, 0x6E, 0x74, 0x20, 0x54, 0x72, 0x61, 0x6E, 0x73,
	0x63, 0x65, 0x6E, 0x64, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x57, 0x65, 0x61,
	0x70, 0x6F, 0x6E, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x74, 0x69, 0x6D,
	0x65, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x20,
	0x31, 0x30, 0x30, 0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x2E, 0x0A,
	0x0A, 0x2D, 0x20, 0x45, 0x41, 0x53, 0x59, 0x20, 0x44, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6C, 0x74, 0x79, 0x3A, 0x20, 0x31, 0x20, 0x70, 0x6F,
	0x69, 0x6E, 0x74, 0x0A, 0x2D, 0x20, 0x4E, 0x4F, 0x52, 0x4D, 0x41, 0x4C,
	0x20, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6C, 0x74, 0x79, 0x3A,
	0x20, 0x32, 0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x0A, 0x2D, 0x20,
	0x48, 0x41, 0x52, 0x44, 0x20, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6C, 0x74, 0x79, 0x3A, 0x20, 0x34, 0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74,
	0x73, 0x0A, 0x0A, 0x2A, 0x20, 0x43, 0x61, 0x6E, 0x20, 0x65, 0x61, 0x72,
	0x6E, 0x20, 0x75, 0x70, 0x20, 0x74, 0x6F, 0x20, 0x34, 0x20, 0x70, 0x6F,
	0x69, 0x6E, 0x74, 0x73, 0x20, 0x70, 0x65, 0x72, 0x20, 0x64, 0x61, 0x79,
	0x2E, 0x0A, 0x2A, 0x20, 0x52, 0x65, 0x66, 0x65, 0x72, 0x20, 0x74, 0x6F,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
	0x20, 0x66, 0x6F, 0x72, 0x20, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x20,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6C, 0x73, 0x2E, 0x00, 0x75, 0x72, 0x6C,
	0x00, 0x00, 0x02, 0x00, 0x44, 0x61, 0x69, 0x6C, 0x79, 0x20, 0x50, 0x6F,
	0x69, 0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x50, 0x6F, 0x69,
	0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x65, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69,
	0x6F, 0x6E, 0x32, 0x31, 0x31, 0x31, 0x31, 0x38, 0x00, 0x02, 0x01, 0x00,
	0xD8, 0x6B, 0x8D, 0x01, 0xFC, 0x89, 0xE1, 0x01, 0x00, 0x00, 0x53, 0x65,
	0x61, 0x73, 0x6F, 0x6E, 0x20, 0x32, 0x20, 0x4E, 0x65, 0x77, 0x20, 0x4D,
	0x65, 0x64, 0x61, 0x6C, 0x20, 0x26, 0x20, 0x57, 0x65, 0x61, 0x70, 0x6F,
	0x6E, 0x20, 0x50, 0x61, 0x69, 0x6E, 0x74, 0x20, 0x47, 0x69, 0x76, 0x65,
	0x61, 0x77, 0x61, 0x79, 0x00, 0x48, 0x6F, 0x6C, 0x79, 0x20, 0x53, 0x77,
	0x6F, 0x72, 0x64, 0x20, 0x44, 0x69, 0x76, 0x69, 0x6E, 0x65, 0x20, 0x4F,
	0x72, 0x64, 0x65, 0x72, 0x20, 0x77, 0x65, 0x61, 0x70, 0x6F, 0x6E, 0x20,
	0x70, 0x61, 0x69, 0x6E, 0x74, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6E, 0x20,
	0x75, 0x70, 0x6F, 0x6E, 0x20, 0x6F, 0x62, 0x74, 0x61, 0x69, 0x6E, 0x69,
	0x6E, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4D, 0x61, 0x64, 0x65, 0x20,
	0x69, 0x6E, 0x20, 0x48, 0x65, 0x61, 0x76, 0x65, 0x6E, 0x20, 0x6D, 0x65,
	0x64, 0x61, 0x6C, 0x0A, 0x0A, 0x48, 0x6F, 0x77, 0x20, 0x74, 0x6F, 0x20,
	0x6F, 0x62, 0x74, 0x61, 0x69, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4D,
	0x65, 0x64, 0x61, 0x6C, 0x3A, 0x20, 0x48, 0x61, 0x76, 0x65, 0x20, 0x61,
	0x6C, 0x6C, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x65,
	0x72, 0x6D, 0x61, 0x6E, 0x65, 0x6E, 0x74, 0x20, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6F, 0x6E, 0x73, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x69, 0x74, 0x65, 0x6D, 0x73, 0x20, 0x6C, 0x69, 0x73, 0x74, 0x65, 0x64,
	0x20, 0x62, 0x65, 0x6C, 0x6F, 0x77, 0x0A, 0x0A, 0x20, 0x2D, 0x20, 0x4B,
	0x61, 0x6C, 0x61, 0x65, 0x6C, 0x0A, 0x20, 0x2D, 0x20, 0x4D, 0x65, 0x64,
	0x65, 0x61, 0x0A, 0x20, 0x2D, 0x20, 0x4B, 0x61, 0x6C, 0x61, 0x65, 0x6C,
	0x27, 0x73, 0x20, 0x57, 0x69, 0x6E, 0x67, 0x73, 0x0A, 0x20, 0x2D, 0x20,
	0x4D, 0x65, 0x64, 0x65, 0x61, 0x27, 0x73, 0x20, 0x57, 0x69, 0x6E, 0x67,
	0x73, 0x0A, 0x20, 0x2D, 0x20, 0x48, 0x6F, 0x6C, 0x79, 0x20, 0x53, 0x77,
	0x6F, 0x72, 0x64, 0x20, 0x44, 0x69, 0x76, 0x69, 0x6E, 0x65, 0x20, 0x4F,
	0x72, 0x64, 0x65, 0x72, 0x0A, 0x20, 0x2D, 0x20, 0x42, 0x6C, 0x61, 0x64,
	0x65, 0x20, 0x52, 0x75, 0x6E, 0x65, 0x62, 0x72, 0x65, 0x61, 0x6B, 0x65,
	0x72, 0x0A, 0x0A, 0x2A, 0x20, 0x43, 0x61, 0x6E, 0x20, 0x6F, 0x62, 0x74,
	0x61, 0x69, 0x6E, 0x20, 0x6F, 0x6E, 0x6C, 0x79, 0x20, 0x6F, 0x6E, 0x63,
	0x65, 0x20, 0x70, 0x65, 0x72, 0x20, 0x61, 0x63, 0x63, 0x6F, 0x75, 0x6E,
	0x74, 0x0A, 0x2A, 0x20, 0x54, 0x68, 0x65, 0x20, 0x48, 0x6F, 0x6C, 0x79,
	0x20, 0x53, 0x77, 0x6F, 0x72, 0x64, 0x20, 0x44, 0x69, 0x76, 0x69, 0x6E,
	0x65, 0x20, 0x4F, 0x72, 0x64, 0x65, 0x72, 0x20, 0x73, 0x6B, 0x69, 0x6E,
	0x20, 0x77, 0x69, 0x6C, 0x6C, 0x20, 0x62, 0x65, 0x20, 0x67, 0x69, 0x76,
	0x65, 0x6E, 0x20, 0x6F, 0x6E, 0x63, 0x65, 0x20, 0x6F, 0x6E, 0x6C, 0x79,
	0x20, 0x70, 0x65, 0x72, 0x20, 0x61, 0x63, 0x63, 0x6F, 0x75, 0x6E, 0x74,
	0x2C, 0x20, 0x77, 0x68, 0x65, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6D,
	0x65, 0x64, 0x61, 0x6C, 0x20, 0x69, 0x73, 0x20, 0x6F, 0x62, 0x74, 0x61,
	0x69, 0x6E, 0x65, 0x64, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x76, 0x65, 0x72, 0x79, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20,
	0x74, 0x69, 0x6D, 0x65, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F,
	0x77, 0x77, 0x77, 0x2E, 0x63, 0x73, 0x6E, 0x73, 0x74, 0x75, 0x64, 0x69,
	0x6F, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x77, 0x65, 0x65, 0x6B, 0x6C, 0x79,
	0x2D, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2D, 0x6E, 0x6F, 0x74, 0x65, 0x73,
	0x2D, 0x6A, 0x75, 0x6C, 0x79, 0x2D, 0x31, 0x30, 0x2D, 0x32, 0x30, 0x31,
	0x39, 0x2F, 0x00, 0x00, 0x01, 0x00, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x20, 0x4F, 0x62, 0x74, 0x61, 0x69, 0x6E, 0x65, 0x64, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x23, 0x20, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x65, 0x76, 0x74, 0x31, 0x39, 0x30, 0x36, 0x31, 0x33, 0x5F,
	0x6D, 0x61, 0x64, 0x65, 0x5F, 0x69, 0x6E, 0x5F, 0x68, 0x65, 0x61, 0x76,
	0x65, 0x6E, 0x00, 0x03, 0x01, 0x00, 0x14, 0x4A, 0x91, 0x01, 0x94, 0x88,
	0xE1, 0x01, 0x00, 0x00, 0x46, 0x61, 0x6D, 0x69, 0x6C, 0x79, 0x20, 0x42,
	0x6F, 0x6E, 0x75, 0x73, 0x20, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x00, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x77, 0x69, 0x6C, 0x6C, 0x20,
	0x64, 0x65, 0x70, 0x65, 0x6E, 0x64, 0x20, 0x6F, 0x6E, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x74, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x61, 0x63, 0x63, 0x75,
	0x6D, 0x75, 0x6C, 0x61, 0x74, 0x65, 0x64, 0x20, 0x50, 0x6C, 0x61, 0x79,
	0x74, 0x69, 0x6D, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x79, 0x6F, 0x75, 0x72,
	0x20, 0x46, 0x61, 0x6D, 0x69, 0x6C, 0x79, 0x20, 0x4D, 0x65, 0x6D, 0x62,
	0x65, 0x72, 0x73, 0x2C, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x20, 0x6F, 0x66, 0x20, 0x63,
	0x6F, 0x6E, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x20, 0x46, 0x61,
	0x6D, 0x69, 0x6C, 0x79, 0x20, 0x4D, 0x65, 0x6D, 0x62, 0x65, 0x72, 0x73,
	0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6F, 0x6E,
	0x6C, 0x69, 0x6E, 0x65, 0x2E, 0x20, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3A,
	0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x63, 0x73, 0x6E, 0x73, 0x74, 0x75,
	0x64, 0x69, 0x6F, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x77, 0x70, 0x6E, 0x2D,
	0x6A, 0x61, 0x6E, 0x75, 0x61, 0x72, 0x79, 0x2D, 0x32, 0x2D, 0x32, 0x30,
	0x32, 0x30, 0x2F, 0x00, 0x00, 0x0A, 0x00, 0x43, 0x6F, 0x6E, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6E, 0x74, 0x20, 0x46, 0x61, 0x6D, 0x69, 0x6C, 0x79,
	0x20, 0x4D, 0x65, 0x6D, 0x62, 0x65, 0x72, 0x73, 0x20, 0x4F, 0x6E, 0x6C,
	0x69, 0x6E, 0x65, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x6C, 0x03, 0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x6F, 0x6E, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6E, 0x74, 0x20, 0x46, 0x61, 0x6D, 0x69, 0x6C, 0x79, 0x20, 0x4D,
	0x65, 0x6D, 0x62, 0x65, 0x72, 0x73, 0x20, 0x4F, 0x6E, 0x6C, 0x69, 0x6E,
	0x65, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00,
	0xA8, 0x1F, 0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x43, 0x6F, 0x6E, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6E,
	0x74, 0x20, 0x46, 0x61, 0x6D, 0x69, 0x6C, 0x79, 0x20, 0x4D, 0x65, 0x6D,
	0x62, 0x65, 0x72, 0x73, 0x20, 0x4F, 0x6E, 0x6C, 0x69, 0x6E, 0x65, 0x00,
	0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x72, 0x1F,
	0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x43, 0x6F, 0x6E, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x20,
	0x46, 0x61, 0x6D, 0x69, 0x6C, 0x79, 0x20, 0x4D, 0x65, 0x6D, 0x62, 0x65,
	0x72, 0x73, 0x20, 0x4F, 0x6E, 0x6C, 0x69, 0x6E, 0x65, 0x00, 0x04, 0x00,
	0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0xB1, 0x1F, 0x00, 0x00,
	0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57,
	0x65, 0x65, 0x6B, 0x6C, 0x79, 0x20, 0x46, 0x61, 0x6D, 0x69, 0x6C, 0x79,
	0x20, 0x50, 0x6C, 0x61, 0x79, 0x74, 0x69, 0x6D, 0x65, 0x20, 0x28, 0x68,
	0x6F, 0x75, 0x72, 0x73, 0x29, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3C, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x57, 0x65, 0x65, 0x6B, 0x6C, 0x79, 0x20, 0x46,
	0x61, 0x6D, 0x69, 0x6C, 0x79, 0x20, 0x50, 0x6C, 0x61, 0x79, 0x74, 0x69,
	0x6D, 0x65, 0x20, 0x28, 0x68, 0x6F, 0x75, 0x72, 0x73, 0x29, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x65, 0x65,
	0x6B, 0x6C, 0x79, 0x20, 0x46, 0x61, 0x6D, 0x69, 0x6C, 0x79, 0x20, 0x50,
	0x6C, 0x61, 0x79, 0x74, 0x69, 0x6D, 0x65, 0x20, 0x28, 0x68, 0x6F, 0x75,
	0x72, 0x73, 0x29, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x57, 0x65, 0x65, 0x6B, 0x6C, 0x79, 0x20, 0x46, 0x61, 0x6D,
	0x69, 0x6C, 0x79, 0x20, 0x50, 0x6C, 0x61, 0x79, 0x74, 0x69, 0x6D, 0x65,
	0x20, 0x28, 0x68, 0x6F, 0x75, 0x72, 0x73, 0x29, 0x00, 0x01, 0x00, 0x00,
	0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x65, 0x65, 0x6B, 0x6C,
	0x79, 0x20, 0x46, 0x61, 0x6D, 0x69, 0x6C, 0x79, 0x20, 0x50, 0x6C, 0x61,
	0x79, 0x74, 0x69, 0x6D, 0x65, 0x20, 0x28, 0x68, 0x6F, 0x75, 0x72, 0x73,
	0x29, 0x00, 0x01, 0x00, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x4D, 0x69, 0x6E, 0x69, 0x6D, 0x75, 0x6D, 0x20, 0x50, 0x6C, 0x61, 0x79,
	0x74, 0x69, 0x6D, 0x65, 0x20, 0x28, 0x6D, 0x69, 0x6E, 0x73, 0x29, 0x20,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x66, 0x6F, 0x72,
	0x20, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x6C, 0x61,
	0x6E, 0x5F, 0x77, 0x65, 0x65, 0x6B, 0x6C, 0x79, 0x5F, 0x62, 0x6F, 0x6E,
	0x75, 0x73, 0x32, 0x00, 0x04, 0x00, 0x00, 0x34, 0xF4, 0xA8, 0x01, 0xF4,
	0x42, 0xA9, 0x01, 0x00, 0x00, 0x57, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x20,
	0x46, 0x65, 0x73, 0x74, 0x69, 0x76, 0x61, 0x6C, 0x20, 0x45, 0x76, 0x65,
	0x6E, 0x74, 0x00, 0x2D, 0x20, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x20, 0x66, 0x6F, 0x72, 0x20,
	0x6D, 0x65, 0x65, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x66, 0x6F, 0x6C, 0x6C, 0x6F, 0x77, 0x69, 0x6E, 0x67, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x64,
	0x75, 0x72, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x76,
	0x65, 0x6E, 0x74, 0x2E, 0x20, 0x43, 0x6C, 0x61, 0x69, 0x6D, 0x20, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x70, 0x65, 0x72, 0x20, 0x74,
	0x6F, 0x74, 0x61, 0x6C, 0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x20,
	0x61, 0x63, 0x63, 0x75, 0x6D, 0x75, 0x6C, 0x61, 0x74, 0x65, 0x64, 0x2E,
	0x0A, 0x0A, 0x20, 0x2D, 0x20, 0x45, 0x61, 0x72, 0x6E, 0x20, 0x31, 0x20,
	0x70, 0x6F, 0x69, 0x6E, 0x74, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x6F, 0x62,
	0x74, 0x61, 0x69, 0x6E, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x73, 0x75, 0x70, 0x70, 0x6C, 0x79, 0x20, 0x62, 0x6F, 0x78, 0x20, 0x69,
	0x6E, 0x20, 0x7A, 0x6F, 0x6D, 0x62, 0x69, 0x65, 0x20, 0x6D, 0x6F, 0x64,
	0x65, 0x20, 0x28, 0x75, 0x70, 0x20, 0x74, 0x6F, 0x20, 0x35, 0x20, 0x70,
	0x6F, 0x69, 0x6E, 0x74, 0x73, 0x20, 0x61, 0x20, 0x64, 0x61, 0x79, 0x29,
	0x0A, 0x20, 0x2D, 0x20, 0x45, 0x61, 0x72, 0x6E, 0x20, 0x31, 0x20, 0x70,
	0x6F, 0x69, 0x6E, 0x74, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x72, 0x65, 0x61,
	0x63, 0x68, 0x69, 0x6E, 0x67, 0x20, 0x31, 0x30, 0x20, 0x6D, 0x69, 0x6E,
	0x75, 0x74, 0x65, 0x73, 0x20, 0x6F, 0x66, 0x20, 0x50, 0x54, 0x20, 0x28,
	0x75, 0x70, 0x20, 0x74, 0x6F, 0x20, 0x35, 0x20, 0x70, 0x6F, 0x69, 0x6E,
	0x74, 0x73, 0x20, 0x61, 0x20, 0x64, 0x61, 0x79, 0x29, 0x0A, 0x20, 0x2D,
	0x20, 0x45, 0x61, 0x72, 0x6E, 0x20, 0x32, 0x20, 0x70, 0x6F, 0x69, 0x6E,
	0x74, 0x73, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20,
	0x74, 0x69, 0x6D, 0x65, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x61, 0x63, 0x63,
	0x6F, 0x6D, 0x70, 0x6C, 0x69, 0x73, 0x68, 0x20, 0x32, 0x20, 0x4B, 0x69,
	0x6C, 0x6C, 0x73, 0x2C, 0x20, 0x36, 0x20, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x73, 0x2C, 0x20, 0x6F, 0x72, 0x20, 0x32, 0x20, 0x48, 0x75, 0x6D,
	0x61, 0x6E, 0x20, 0x49, 0x6E, 0x66, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E,
	0x73, 0x20, 0x28, 0x62, 0x6F, 0x74, 0x73, 0x20, 0x65, 0x78, 0x63, 0x6C,
	0x75, 0x64, 0x65, 0x64, 0x29, 0x20, 0x69, 0x6E, 0x20, 0x7A, 0x6F, 0x6D,
	0x62, 0x69, 0x65, 0x20, 0x6D, 0x6F, 0x64, 0x65, 0x20, 0x28, 0x75, 0x70,
	0x20, 0x74, 0x6F, 0x20, 0x34, 0x30, 0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74,
	0x73, 0x20, 0x61, 0x20, 0x64, 0x61, 0x79, 0x29, 0x0A, 0x20, 0x2D, 0x20,
	0x45, 0x61, 0x72, 0x6E, 0x20, 0x35, 0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74,
	0x20, 0x66, 0x6F, 0x72, 0x20, 0x63, 0x6C, 0x65, 0x61, 0x72, 0x20, 0x5A,
	0x6F, 0x6D, 0x62, 0x69, 0x65, 0x20, 0x53, 0x63, 0x65, 0x6E, 0x61, 0x72,
	0x69, 0x6F, 0x20, 0x69, 0x6E, 0x20, 0x68, 0x61, 0x72, 0x64, 0x20, 0x6F,
	0x72, 0x20, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x20, 0x64, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6C, 0x74, 0x79, 0x20, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6E, 0x67, 0x20, 0x31,
	0x30, 0x30, 0x20, 0x6B, 0x69, 0x6C, 0x6C, 0x73, 0x20, 0x28, 0x75, 0x70,
	0x20, 0x74, 0x6F, 0x20, 0x34, 0x30, 0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74,
	0x73, 0x20, 0x61, 0x20, 0x64, 0x61, 0x79, 0x29, 0x00, 0x68, 0x74, 0x74,
	0x70, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x63, 0x73, 0x6E, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6F, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x77, 0x65,
	0x65, 0x6B, 0x6C, 0x79, 0x2D, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2D, 0x6E,
	0x6F, 0x74, 0x65, 0x73, 0x2D, 0x64, 0x65, 0x63, 0x65, 0x6D, 0x62, 0x65,
	0x72, 0x2D, 0x31, 0x34, 0x2D, 0x32, 0x30, 0x32, 0x32, 0x2F, 0x00, 0x00,
	0x12, 0x00, 0x57, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x20, 0x46, 0x65, 0x73,
	0x74, 0x69, 0x76, 0x61, 0x6C, 0x20, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20,
	0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C,
	0x02, 0x00, 0x00, 0x00, 0x00, 0x57, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x20,
	0x46, 0x65, 0x73, 0x74, 0x69, 0x76, 0x61, 0x6C, 0x20, 0x54, 0x6F, 0x64,
	0x61, 0x79, 0x27, 0x73, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x69,
	0x6E, 0x74, 0x65, 0x72, 0x20, 0x46, 0x65, 0x73, 0x74, 0x69, 0x76, 0x61,
	0x6C, 0x20, 0x54, 0x6F, 0x64, 0x61, 0x79, 0x27, 0x73, 0x20, 0x4B, 0x69,
	0x6C, 0x6C, 0x2F, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x20, 0x50, 0x6F,
	0x69, 0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x57, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x20, 0x46, 0x65,
	0x73, 0x74, 0x69, 0x76, 0x61, 0x6C, 0x20, 0x54, 0x6F, 0x64, 0x61, 0x79,
	0x27, 0x73, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69, 0x65, 0x20, 0x53, 0x63,
	0x65, 0x6E, 0x61, 0x72, 0x69, 0x6F, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74,
	0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x57, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x20, 0x46, 0x65, 0x73, 0x74, 0x69,
	0x76, 0x61, 0x6C, 0x20, 0x54, 0x6F, 0x64, 0x61, 0x79, 0x27, 0x73, 0x20,
	0x50, 0x6C, 0x61, 0x79, 0x74, 0x69, 0x6D, 0x65, 0x20, 0x50, 0x6F, 0x69,
	0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x57, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x20, 0x46, 0x65, 0x73,
	0x74, 0x69, 0x76, 0x61, 0x6C, 0x20, 0x54, 0x6F, 0x64, 0x61, 0x79, 0x27,
	0x73, 0x20, 0x53, 0x75, 0x70, 0x70, 0x6C, 0x79, 0x20, 0x42, 0x6F, 0x78,
	0x20, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E,
	0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x69, 0x6E, 0x74, 0x65, 0x72,
	0x20, 0x46, 0x65, 0x73, 0x74, 0x69, 0x76, 0x61, 0x6C, 0x20, 0x54, 0x6F,
	0x74, 0x61, 0x6C, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x76, 0x20, 0x00,
	0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x57, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x20, 0x46, 0x65, 0x73, 0x74, 0x69,
	0x76, 0x61, 0x6C, 0x20, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x50, 0x6F,
	0x69, 0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x74, 0x20, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x69, 0x6E, 0x74, 0x65, 0x72,
	0x20, 0x46, 0x65, 0x73, 0x74, 0x69, 0x76, 0x61, 0x6C, 0x20, 0x54, 0x6F,
	0x74, 0x61, 0x6C, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x02, 0x00, 0x32, 0x22, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x20, 0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x57, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x20, 0x46, 0x65,
	0x73, 0x74, 0x69, 0x76, 0x61, 0x6C, 0x20, 0x54, 0x6F, 0x74, 0x61, 0x6C,
	0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xB4, 0x00, 0x00, 0x00, 0x02, 0x00, 0x57, 0x0A, 0x00, 0x00, 0x05, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF6, 0x09, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x57, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x20, 0x46, 0x65, 0x73, 0x74, 0x69,
	0x76, 0x61, 0x6C, 0x20, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x50, 0x6F,
	0x69, 0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE1, 0x00, 0x00,
	0x00, 0x03, 0x00, 0x32, 0x22, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00, 0x01, 0x00,
	0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAF, 0x21, 0x00,
	0x00, 0x01, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x57, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x20, 0x46, 0x65, 0x73, 0x74, 0x69,
	0x76, 0x61, 0x6C, 0x20, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x50, 0x6F,
	0x69, 0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x01, 0x00,
	0x00, 0x02, 0x00, 0x80, 0x21, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD1, 0x21, 0x00, 0x00, 0x05, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x69, 0x6E,
	0x74, 0x65, 0x72, 0x20, 0x46, 0x65, 0x73, 0x74, 0x69, 0x76, 0x61, 0x6C,
	0x20, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74,
	0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3B, 0x01, 0x00, 0x00, 0x03, 0x00,
	0x32, 0x22, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x61, 0x02, 0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF,
	0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x0A, 0x00, 0x00, 0x05, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x69, 0x6E,
	0x74, 0x65, 0x72, 0x20, 0x46, 0x65, 0x73, 0x74, 0x69, 0x76, 0x61, 0x6C,
	0x20, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74,
	0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x01, 0x00, 0x00, 0x02, 0x00,
	0xD2, 0x21, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xF6, 0x09, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x69, 0x6E, 0x74, 0x65, 0x72,
	0x20, 0x46, 0x65, 0x73, 0x74, 0x69, 0x76, 0x61, 0x6C, 0x20, 0x54, 0x6F,
	0x74, 0x61, 0x6C, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x95, 0x01, 0x00, 0x00, 0x02, 0x00, 0x05, 0x21, 0x00,
	0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE3, 0x25, 0xA9, 0x01, 0x00,
	0x4A, 0x22, 0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x57, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x20, 0x46, 0x65,
	0x73, 0x74, 0x69, 0x76, 0x61, 0x6C, 0x20, 0x54, 0x6F, 0x74, 0x61, 0x6C,
	0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xC2, 0x01, 0x00, 0x00, 0x03, 0x00, 0x32, 0x22, 0x00, 0x00, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x03, 0x00,
	0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x21, 0x21, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x57, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x20, 0x46, 0x65,
	0x73, 0x74, 0x69, 0x76, 0x61, 0x6C, 0x20, 0x54, 0x6F, 0x74, 0x61, 0x6C,
	0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xEF, 0x01, 0x00, 0x00, 0x02, 0x00, 0x77, 0x20, 0x00, 0x00, 0x07, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x22, 0x00,
	0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x57, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x20, 0x46, 0x65, 0x73, 0x74, 0x69,
	0x76, 0x61, 0x6C, 0x20, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x50, 0x6F,
	0x69, 0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x02, 0x00,
	0x00, 0x01, 0x00, 0x64, 0x20, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x76, 0x74, 0x32,
	0x32, 0x31, 0x32, 0x30, 0x31, 0x5F, 0x57, 0x69, 0x6E, 0x74, 0x65, 0x72,
	0x46, 0x65, 0x73, 0x74, 0x69, 0x76, 0x61, 0x6C, 0x00, 0x05, 0x01, 0x00,
	0x94, 0xE1, 0x97, 0x01, 0xA4, 0x87, 0xE1, 0x01, 0x00, 0x00, 0x57, 0x61,
	0x69, 0x74, 0x21, 0x20, 0x54, 0x61, 0x6B, 0x65, 0x20, 0x54, 0x68, 0x69,
	0x73, 0x20, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6C, 0x20, 0x57, 0x65,
	0x61, 0x70, 0x6F, 0x6E, 0x00, 0x20, 0x2D, 0x20, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x20, 0x67, 0x72, 0x61, 0x6E, 0x74, 0x65, 0x64, 0x20,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x32, 0x30, 0x2C, 0x20, 0x34, 0x30,
	0x2C, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x38, 0x30, 0x20, 0x6D, 0x69, 0x6E,
	0x75, 0x74, 0x65, 0x73, 0x20, 0x6F, 0x66, 0x20, 0x70, 0x6C, 0x61, 0x79,
	0x20, 0x74, 0x69, 0x6D, 0x65, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6E, 0x67,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x76, 0x65, 0x6E, 0x74, 0x2E, 0x0A,
	0x20, 0x2D, 0x20, 0x59, 0x6F, 0x75, 0x20, 0x63, 0x61, 0x6E, 0x20, 0x67,
	0x65, 0x74, 0x20, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x20,
	0x6F, 0x6E, 0x63, 0x65, 0x20, 0x70, 0x65, 0x72, 0x20, 0x64, 0x61, 0x79,
	0x2C, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x6C, 0x61, 0x73, 0x74, 0x20, 0x66,
	0x6F, 0x72, 0x20, 0x36, 0x30, 0x20, 0x6D, 0x69, 0x6E, 0x75, 0x74, 0x65,
	0x73, 0x2E, 0x0A, 0x0A, 0x20, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6C,
	0x20, 0x49, 0x74, 0x65, 0x6D, 0x20, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E,
	0x74, 0x73, 0x20, 0x28, 0x31, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6E, 0x20,
	0x61, 0x74, 0x20, 0x72, 0x61, 0x6E, 0x64, 0x6F, 0x6D, 0x29, 0x0A, 0x0A,
	0x20, 0x2D, 0x20, 0x4C, 0x69, 0x67, 0x68, 0x74, 0x6E, 0x69, 0x6E, 0x67,
	0x20, 0x46, 0x75, 0x72, 0x79, 0x0A, 0x20, 0x2D, 0x20, 0x4D, 0x61, 0x67,
	0x6E, 0x75, 0x6D, 0x20, 0x4C, 0x61, 0x75, 0x6E, 0x63, 0x68, 0x65, 0x72,
	0x0A, 0x20, 0x2D, 0x20, 0x48, 0x6F, 0x6C, 0x79, 0x20, 0x53, 0x77, 0x6F,
	0x72, 0x64, 0x20, 0x44, 0x69, 0x76, 0x69, 0x6E, 0x65, 0x20, 0x4F, 0x72,
	0x64, 0x65, 0x72, 0x0A, 0x20, 0x2D, 0x20, 0x50, 0x73, 0x79, 0x63, 0x68,
	0x69, 0x63, 0x20, 0x48, 0x61, 0x72, 0x6D, 0x6F, 0x6E, 0x69, 0x75, 0x6D,
	0x0A, 0x20, 0x2D, 0x20, 0x49, 0x6E, 0x66, 0x69, 0x6E, 0x69, 0x74, 0x79,
	0x20, 0x4C, 0x61, 0x73, 0x65, 0x72, 0x20, 0x46, 0x69, 0x73, 0x74, 0x0A,
	0x20, 0x2D, 0x20, 0x58, 0x2D, 0x54, 0x52, 0x41, 0x43, 0x4B, 0x45, 0x52,
	0x0A, 0x20, 0x2D, 0x20, 0x44, 0x75, 0x61, 0x6C, 0x20, 0x53, 0x77, 0x6F,
	0x72, 0x64, 0x20, 0x50, 0x68, 0x61, 0x6E, 0x74, 0x6F, 0x6D, 0x20, 0x53,
	0x6C, 0x61, 0x79, 0x65, 0x72, 0x0A, 0x20, 0x2D, 0x20, 0x44, 0x75, 0x61,
	0x6C, 0x20, 0x42, 0x65, 0x72, 0x65, 0x74, 0x74, 0x61, 0x20, 0x47, 0x75,
	0x6E, 0x73, 0x6C, 0x69, 0x6E, 0x67, 0x65, 0x72, 0x0A, 0x20, 0x2D, 0x20,
	0x42, 0x61, 0x72, 0x72, 0x65, 0x74, 0x74, 0x20, 0x4D, 0x39, 0x35, 0x20,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x20, 0x54, 0x69, 0x67, 0x65, 0x72, 0x0A,
	0x20, 0x2D, 0x20, 0x54, 0x72, 0x69, 0x6E, 0x69, 0x74, 0x79, 0x20, 0x47,
	0x72, 0x65, 0x6E, 0x61, 0x64, 0x65, 0x0A, 0x20, 0x2D, 0x20, 0x44, 0x75,
	0x61, 0x6C, 0x20, 0x53, 0x77, 0x6F, 0x72, 0x64, 0x20, 0x49, 0x6E, 0x66,
	0x65, 0x72, 0x6E, 0x61, 0x6C, 0x20, 0x48, 0x75, 0x6E, 0x74, 0x65, 0x72,
	0x0A, 0x20, 0x2D, 0x20, 0x4D, 0x33, 0x20, 0x42, 0x6C, 0x61, 0x63, 0x6B,
	0x20, 0x44, 0x72, 0x61, 0x67, 0x6F, 0x6E, 0x0A, 0x0A, 0x20, 0x2A, 0x20,
	0x49, 0x74, 0x65, 0x6D, 0x20, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6F, 0x6E, 0x20, 0x74, 0x69, 0x6D, 0x65, 0x72, 0x73, 0x20, 0x63,
	0x6F, 0x75, 0x6E, 0x74, 0x20, 0x64, 0x6F, 0x77, 0x6E, 0x20, 0x65, 0x76,
	0x65, 0x6E, 0x20, 0x69, 0x66, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x64, 0x6F,
	0x6E, 0x27, 0x74, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x6D,
	0x2E, 0x0A, 0x20, 0x2A, 0x20, 0x45, 0x61, 0x72, 0x6E, 0x69, 0x6E, 0x67,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6D, 0x65, 0x20, 0x69, 0x74,
	0x65, 0x6D, 0x20, 0x61, 0x20, 0x73, 0x65, 0x63, 0x6F, 0x6E, 0x64, 0x20,
	0x74, 0x69, 0x6D, 0x65, 0x20, 0x77, 0x69, 0x6C, 0x6C, 0x20, 0x65, 0x78,
	0x74, 0x65, 0x6E, 0x64, 0x20, 0x69, 0x74, 0x73, 0x20, 0x74, 0x69, 0x6D,
	0x65, 0x72, 0x20, 0x62, 0x79, 0x20, 0x36, 0x30, 0x20, 0x6D, 0x69, 0x6E,
	0x75, 0x74, 0x65, 0x73, 0x2E, 0x0A, 0x20, 0x2A, 0x20, 0x4F, 0x6E, 0x6C,
	0x79, 0x20, 0x74, 0x69, 0x6D, 0x65, 0x20, 0x70, 0x6C, 0x61, 0x79, 0x65,
	0x64, 0x20, 0x69, 0x6E, 0x20, 0x6D, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x34, 0x20, 0x6F, 0x72, 0x20, 0x6D,
	0x6F, 0x72, 0x65, 0x20, 0x70, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x73, 0x20,
	0x63, 0x6F, 0x75, 0x6E, 0x74, 0x73, 0x2E, 0x00, 0x68, 0x74, 0x74, 0x70,
	0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x63, 0x73, 0x6E, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6F, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x77, 0x70, 0x6E,
	0x2D, 0x6F, 0x63, 0x74, 0x6F, 0x62, 0x65, 0x72, 0x2D, 0x32, 0x38, 0x2D,
	0x32, 0x30, 0x32, 0x30, 0x2F, 0x00, 0x00, 0x03, 0x00, 0x54, 0x6F, 0x74,
	0x61, 0x6C, 0x20, 0x50, 0x6C, 0x61, 0x79, 0x74, 0x69, 0x6D, 0x65, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x6F,
	0x74, 0x61, 0x6C, 0x20, 0x50, 0x6C, 0x61, 0x79, 0x74, 0x69, 0x6D, 0x65,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54,
	0x6F, 0x74, 0x61, 0x6C, 0x20, 0x50, 0x6C, 0x61, 0x79, 0x74, 0x69, 0x6D,
	0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x65, 0x76, 0x74, 0x32, 0x30, 0x31, 0x30, 0x32, 0x38, 0x5F,
	0x72, 0x61, 0x6E, 0x64, 0x5F, 0x77, 0x65, 0x61, 0x70, 0x6F, 0x6E, 0x5F,
	0x36, 0x30, 0x6D, 0x69, 0x6E, 0x00, 0x06, 0x01, 0x00, 0xB8, 0xF4, 0x9C,
	0x01, 0xA4, 0x87, 0xE1, 0x01, 0x00, 0x00, 0x53, 0x74, 0x75, 0x64, 0x69,
	0x6F, 0x20, 0x54, 0x68, 0x65, 0x6D, 0x65, 0x20, 0x50, 0x61, 0x63, 0x6B,
	0x61, 0x67, 0x65, 0x20, 0x47, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79,
	0x00, 0x55, 0x70, 0x6F, 0x6E, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x69,
	0x6E, 0x67, 0x20, 0x33, 0x30, 0x20, 0x6D, 0x69, 0x6E, 0x75, 0x74, 0x65,
	0x73, 0x20, 0x6F, 0x66, 0x20, 0x70, 0x6C, 0x61, 0x79, 0x74, 0x69, 0x6D,
	0x65, 0x20, 0x69, 0x6E, 0x20, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6F, 0x20,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x4D, 0x6F, 0x64,
	0x65, 0x2C, 0x0A, 0x79, 0x6F, 0x75, 0x20, 0x77, 0x69, 0x6C, 0x6C, 0x20,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x20, 0x35, 0x20, 0x74, 0x68,
	0x65, 0x6D, 0x65, 0x20, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x73,
	0x2E, 0x0A, 0x0A, 0x2D, 0x20, 0x43, 0x68, 0x69, 0x6E, 0x61, 0x20, 0x54,
	0x68, 0x65, 0x6D, 0x65, 0x20, 0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65,
	0x0A, 0x2D, 0x20, 0x4D, 0x61, 0x70, 0x6C, 0x65, 0x20, 0x54, 0x68, 0x65,
	0x6D, 0x65, 0x20, 0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x0A, 0x2D,
	0x20, 0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x6D, 0x61, 0x73, 0x20, 0x54,
	0x68, 0x65, 0x6D, 0x65, 0x20, 0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65,
	0x0A, 0x20, 0x2D, 0x20, 0x53, 0x70, 0x61, 0x63, 0x65, 0x20, 0x54, 0x68,
	0x65, 0x6D, 0x65, 0x20, 0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x0A,
	0x20, 0x2D, 0x20, 0x53, 0x6F, 0x63, 0x63, 0x65, 0x72, 0x20, 0x54, 0x68,
	0x65, 0x6D, 0x65, 0x20, 0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x0A,
	0x0A, 0x2A, 0x20, 0x45, 0x61, 0x63, 0x68, 0x20, 0x61, 0x63, 0x63, 0x6F,
	0x75, 0x6E, 0x74, 0x20, 0x63, 0x61, 0x6E, 0x20, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x20, 0x69, 0x74,
	0x65, 0x6D, 0x73, 0x20, 0x6F, 0x6E, 0x6C, 0x79, 0x20, 0x6F, 0x6E, 0x63,
	0x65, 0x2E, 0x0A, 0x2A, 0x20, 0x59, 0x6F, 0x75, 0x20, 0x77, 0x69, 0x6C,
	0x6C, 0x20, 0x6F, 0x6E, 0x6C, 0x79, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x20, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x73, 0x20,
	0x79, 0x6F, 0x75, 0x20, 0x64, 0x6F, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x61,
	0x6C, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x6F, 0x77, 0x6E, 0x2E, 0x0A,
	0x20, 0x53, 0x61, 0x6C, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x6D, 0x65, 0x20, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x73, 0x20,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x6C, 0x79, 0x20, 0x62, 0x65,
	0x69, 0x6E, 0x67, 0x20, 0x73, 0x6F, 0x6C, 0x64, 0x20, 0x69, 0x6E, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x73, 0x68, 0x6F, 0x70, 0x20, 0x77, 0x69, 0x6C,
	0x6C, 0x20, 0x65, 0x6E, 0x64, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20,
	0x4A, 0x75, 0x6E, 0x65, 0x20, 0x33, 0x72, 0x64, 0x2E, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x50, 0x6C, 0x61, 0x79,
	0x74, 0x69, 0x6D, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00,
	0x00, 0x05, 0x00, 0x47, 0x1F, 0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF,
	0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x1F, 0x00, 0x00, 0x01, 0x00,
	0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8C, 0x1F, 0x00,
	0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xA7, 0x1F, 0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xAD, 0x1F, 0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF,
	0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x74, 0x75, 0x64,
	0x69, 0x6F, 0x54, 0x68, 0x65, 0x6D, 0x65, 0x50, 0x61, 0x63, 0x6B, 0x61,
	0x67, 0x65, 0x00, 0x07, 0x00, 0x00, 0xB8, 0x2F, 0x9E, 0x01, 0xA4, 0x87,
	0xE1, 0x01, 0x00, 0x00, 0x4E, 0x65, 0x77, 0x20, 0x5A, 0x6F, 0x6D, 0x62,
	0x69, 0x65, 0x20, 0x53, 0x63, 0x65, 0x6E, 0x61, 0x72, 0x69, 0x6F, 0x20,
	0x53, 0x74, 0x75, 0x64, 0x69, 0x6F, 0x20, 0x4D, 0x61, 0x70, 0x20, 0x45,
	0x76, 0x65, 0x6E, 0x74, 0x00, 0x4E, 0x65, 0x77, 0x20, 0x53, 0x74, 0x75,
	0x64, 0x69, 0x6F, 0x20, 0x4D, 0x61, 0x70, 0x2C, 0x20, 0x52, 0x65, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x27, 0x73, 0x20, 0x4C, 0x6F,
	0x67, 0x20, 0x23, 0x30, 0x37, 0x3A, 0x20, 0x54, 0x68, 0x65, 0x20, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x0A, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x20, 0x67, 0x69, 0x76, 0x65, 0x6E, 0x20, 0x75, 0x70, 0x6F, 0x6E, 0x20,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6E, 0x67, 0x20, 0x31, 0x30, 0x20,
	0x6D, 0x69, 0x6E, 0x75, 0x74, 0x65, 0x73, 0x20, 0x6F, 0x66, 0x20, 0x70,
	0x6C, 0x61, 0x79, 0x74, 0x69, 0x6D, 0x65, 0x0A, 0x0A, 0x20, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x3A, 0x20, 0x55, 0x6E, 0x69, 0x71, 0x75, 0x65,
	0x20, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72, 0x20, 0x78, 0x31, 0x0A,
	0x0A, 0x20, 0x2A, 0x20, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x20, 0x63,
	0x61, 0x6E, 0x20, 0x6F, 0x6E, 0x6C, 0x79, 0x20, 0x62, 0x65, 0x20, 0x63,
	0x6C, 0x61, 0x69, 0x6D, 0x65, 0x64, 0x20, 0x6F, 0x6E, 0x63, 0x65, 0x20,
	0x70, 0x65, 0x72, 0x20, 0x61, 0x63, 0x63, 0x6F, 0x75, 0x6E, 0x74, 0x00,
	0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x63,
	0x73, 0x6E, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6F, 0x2E, 0x63, 0x6F, 0x6D,
	0x2F, 0x77, 0x70, 0x6E, 0x2D, 0x61, 0x75, 0x67, 0x75, 0x73, 0x74, 0x2D,
	0x31, 0x31, 0x2D, 0x32, 0x30, 0x32, 0x31, 0x2F, 0x00, 0x00, 0x01, 0x00,
	0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x50, 0x6C, 0x61, 0x79, 0x74, 0x69,
	0x6D, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x74, 0x20, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x01, 0x00, 0x74, 0x20, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x65, 0x76, 0x74, 0x32, 0x31, 0x30, 0x37, 0x32, 0x39, 0x5F, 0x7A, 0x73,
	0x5F, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6F, 0x5F, 0x74, 0x75, 0x74, 0x6F,
	0x72, 0x69, 0x61, 0x6C, 0x5F, 0x63, 0x6C, 0x65, 0x61, 0x72, 0x00, 0x08,
	0x00, 0x00, 0xF8, 0x07, 0xA4, 0x01, 0x54, 0x49, 0x13, 0x04, 0x00, 0x00,
	0x4E, 0x65, 0x77, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6E, 0x69, 0x6E, 0x67, 0x20, 0x50, 0x6C, 0x61, 0x79, 0x65, 0x72,
	0x20, 0x57, 0x65, 0x6C, 0x63, 0x6F, 0x6D, 0x65, 0x20, 0x41, 0x74, 0x74,
	0x65, 0x6E, 0x64, 0x61, 0x6E, 0x63, 0x65, 0x20, 0x45, 0x76, 0x65, 0x6E,
	0x74, 0x00, 0x53, 0x74, 0x61, 0x79, 0x20, 0x6C, 0x6F, 0x67, 0x67, 0x65,
	0x64, 0x20, 0x69, 0x6E, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x31, 0x30, 0x20,
	0x6D, 0x69, 0x6E, 0x75, 0x74, 0x65, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x20, 0x61, 0x20, 0x6E, 0x65, 0x77, 0x20, 0x6F, 0x72, 0x20, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6E, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x63, 0x63, 0x6F,
	0x75, 0x6E, 0x74, 0x0A, 0x64, 0x75, 0x72, 0x69, 0x6E, 0x67, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x65, 0x76, 0x65, 0x6E, 0x74, 0x20, 0x74, 0x6F, 0x20,
	0x67, 0x65, 0x74, 0x20, 0x61, 0x20, 0x43, 0x75, 0x6D, 0x75, 0x6C, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x20, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2E,
	0x0A, 0x0A, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x66, 0x6F,
	0x72, 0x20, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x4C, 0x6F, 0x67, 0x69,
	0x6E, 0x20, 0x44, 0x61, 0x79, 0x73, 0x0A, 0x0A, 0x31, 0x20, 0x44, 0x61,
	0x79, 0x3A, 0x20, 0x53, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x20, 0x31, 0x20,
	0x50, 0x6F, 0x69, 0x6E, 0x74, 0x20, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x63,
	0x65, 0x6E, 0x64, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x44, 0x65, 0x63, 0x6F,
	0x64, 0x65, 0x72, 0x2C, 0x20, 0x31, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74,
	0x20, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x44, 0x65, 0x63, 0x6F, 0x64,
	0x65, 0x72, 0x2C, 0x0A, 0x6F, 0x72, 0x20, 0x35, 0x30, 0x30, 0x20, 0x4D,
	0x69, 0x6C, 0x65, 0x61, 0x67, 0x65, 0x0A, 0x0A, 0x32, 0x20, 0x44, 0x61,
	0x79, 0x73, 0x3A, 0x20, 0x53, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x20, 0x32,
	0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x20, 0x54, 0x72, 0x61, 0x6E, 0x73,
	0x63, 0x65, 0x6E, 0x64, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x44, 0x65, 0x63,
	0x6F, 0x64, 0x65, 0x72, 0x73, 0x2C, 0x20, 0x32, 0x20, 0x50, 0x6F, 0x69,
	0x6E, 0x74, 0x20, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x44, 0x65, 0x63,
	0x6F, 0x64, 0x65, 0x72, 0x73, 0x2C, 0x0A, 0x6F, 0x72, 0x20, 0x31, 0x2C,
	0x30, 0x30, 0x30, 0x20, 0x4D, 0x69, 0x6C, 0x65, 0x61, 0x67, 0x65, 0x0A,
	0x0A, 0x33, 0x20, 0x44, 0x61, 0x79, 0x73, 0x3A, 0x20, 0x53, 0x65, 0x6C,
	0x65, 0x63, 0x74, 0x20, 0x33, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x20,
	0x54, 0x72, 0x61, 0x6E, 0x73, 0x63, 0x65, 0x6E, 0x64, 0x65, 0x6E, 0x63,
	0x65, 0x20, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72, 0x73, 0x2C, 0x20,
	0x33, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x20, 0x43, 0x6C, 0x61, 0x73,
	0x73, 0x20, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72, 0x73, 0x2C, 0x0A,
	0x6F, 0x72, 0x20, 0x32, 0x30, 0x30, 0x30, 0x20, 0x4D, 0x69, 0x6C, 0x65,
	0x61, 0x67, 0x65, 0x0A, 0x0A, 0x34, 0x20, 0x44, 0x61, 0x79, 0x73, 0x3A,
	0x20, 0x53, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x20, 0x34, 0x20, 0x50, 0x6F,
	0x69, 0x6E, 0x74, 0x20, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x63, 0x65, 0x6E,
	0x64, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65,
	0x72, 0x73, 0x2C, 0x20, 0x34, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x20,
	0x43, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65,
	0x72, 0x73, 0x2C, 0x0A, 0x6F, 0x72, 0x20, 0x33, 0x30, 0x30, 0x30, 0x20,
	0x4D, 0x69, 0x6C, 0x65, 0x61, 0x67, 0x65, 0x0A, 0x0A, 0x35, 0x20, 0x44,
	0x61, 0x79, 0x73, 0x3A, 0x20, 0x53, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x20,
	0x35, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x20, 0x54, 0x72, 0x61, 0x6E,
	0x73, 0x63, 0x65, 0x6E, 0x64, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x44, 0x65,
	0x63, 0x6F, 0x64, 0x65, 0x72, 0x73, 0x2C, 0x20, 0x35, 0x20, 0x50, 0x6F,
	0x69, 0x6E, 0x74, 0x20, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x44, 0x65,
	0x63, 0x6F, 0x64, 0x65, 0x72, 0x73, 0x2C, 0x0A, 0x6F, 0x72, 0x20, 0x34,
	0x30, 0x30, 0x30, 0x20, 0x4D, 0x69, 0x6C, 0x65, 0x61, 0x67, 0x65, 0x0A,
	0x0A, 0x36, 0x20, 0x44, 0x61, 0x79, 0x73, 0x3A, 0x20, 0x53, 0x65, 0x6C,
	0x65, 0x63, 0x74, 0x20, 0x36, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x20,
	0x54, 0x72, 0x61, 0x6E, 0x73, 0x63, 0x65, 0x6E, 0x64, 0x65, 0x6E, 0x63,
	0x65, 0x20, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72, 0x73, 0x2C, 0x20,
	0x36, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x20, 0x43, 0x6C, 0x61, 0x73,
	0x73, 0x20, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72, 0x73, 0x2C, 0x0A,
	0x6F, 0x72, 0x20, 0x35, 0x30, 0x30, 0x30, 0x20, 0x4D, 0x69, 0x6C, 0x65,
	0x61, 0x67, 0x65, 0x0A, 0x0A, 0x37, 0x20, 0x44, 0x61, 0x79, 0x73, 0x3A,
	0x20, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x20, 0x31, 0x30, 0x20,
	0x50, 0x6F, 0x69, 0x6E, 0x74, 0x20, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x63,
	0x65, 0x6E, 0x64, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x44, 0x65, 0x63, 0x6F,
	0x64, 0x65, 0x72, 0x73, 0x20, 0x2B, 0x20, 0x31, 0x30, 0x20, 0x50, 0x6F,
	0x69, 0x6E, 0x74, 0x20, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x44, 0x65,
	0x63, 0x6F, 0x64, 0x65, 0x72, 0x73, 0x0A, 0x2B, 0x20, 0x56, 0x49, 0x50,
	0x20, 0x46, 0x72, 0x65, 0x65, 0x20, 0x50, 0x61, 0x73, 0x73, 0x20, 0x28,
	0x32, 0x20, 0x44, 0x61, 0x79, 0x73, 0x29, 0x0A, 0x0A, 0x2A, 0x20, 0x43,
	0x6C, 0x61, 0x69, 0x6D, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x20, 0x6F, 0x6E, 0x63, 0x65, 0x20, 0x70, 0x65,
	0x72, 0x20, 0x61, 0x63, 0x63, 0x6F, 0x75, 0x6E, 0x74, 0x2E, 0x00, 0x75,
	0x72, 0x6C, 0x00, 0x00, 0x08, 0x00, 0x44, 0x61, 0x69, 0x6C, 0x79, 0x20,
	0x4C, 0x6F, 0x67, 0x69, 0x6E, 0x20, 0x54, 0x69, 0x6D, 0x65, 0x00, 0x06,
	0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x6F, 0x74,
	0x61, 0x6C, 0x20, 0x44, 0x61, 0x79, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20,
	0x44, 0x61, 0x79, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x44, 0x61, 0x79,
	0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x44, 0x61, 0x79, 0x73, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x6F, 0x74,
	0x61, 0x6C, 0x20, 0x44, 0x61, 0x79, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20,
	0x44, 0x61, 0x79, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x44, 0x61, 0x79,
	0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x03, 0x01, 0x00, 0x20, 0x0A, 0x00, 0x00, 0x01, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x76, 0x74, 0x32,
	0x32, 0x30, 0x34, 0x32, 0x31, 0x5F, 0x57, 0x65, 0x6C, 0x63, 0x6F, 0x6D,
	0x65, 0x4E, 0x65, 0x77, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x00, 0x09,
	0x00, 0x00, 0xF4, 0x07, 0xA8, 0x01, 0xF4, 0x7D, 0xAA, 0x01, 0x00, 0x00,
	0x47, 0x6F, 0x6C, 0x64, 0x65, 0x6E, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69,
	0x65, 0x20, 0x4B, 0x69, 0x6C, 0x6C, 0x20, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x20, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x00, 0x45, 0x61, 0x72,
	0x6E, 0x20, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x62, 0x79,
	0x20, 0x72, 0x61, 0x63, 0x6B, 0x69, 0x6E, 0x67, 0x20, 0x75, 0x70, 0x20,
	0x47, 0x6F, 0x6C, 0x64, 0x65, 0x6E, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69,
	0x65, 0x20, 0x6B, 0x69, 0x6C, 0x6C, 0x73, 0x2E, 0x0A, 0x2D, 0x20, 0x31,
	0x2C, 0x20, 0x32, 0x2C, 0x20, 0x33, 0x2C, 0x20, 0x35, 0x2C, 0x20, 0x37,
	0x2C, 0x20, 0x31, 0x30, 0x20, 0x4B, 0x69, 0x6C, 0x6C, 0x73, 0x0A, 0x0A,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x0A, 0x2D, 0x20, 0x53, 0x65,
	0x6C, 0x65, 0x63, 0x74, 0x20, 0x31, 0x20, 0x66, 0x72, 0x6F, 0x6D, 0x20,
	0x61, 0x6D, 0x6F, 0x6E, 0x67, 0x3A, 0x20, 0x41, 0x64, 0x64, 0x2D, 0x4F,
	0x6E, 0x20, 0x53, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20,
	0x42, 0x6F, 0x78, 0x2C, 0x20, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x63, 0x65,
	0x6E, 0x64, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x57, 0x65, 0x61, 0x70, 0x6F,
	0x6E, 0x20, 0x53, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20,
	0x42, 0x6F, 0x78, 0x2C, 0x20, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6E, 0x74,
	0x65, 0x65, 0x64, 0x20, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x63, 0x65, 0x6E,
	0x64, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x20,
	0x42, 0x6F, 0x78, 0x2C, 0x20, 0x31, 0x30, 0x30, 0x20, 0x57, 0x65, 0x61,
	0x70, 0x6F, 0x6E, 0x20, 0x45, 0x6E, 0x68, 0x61, 0x6E, 0x63, 0x65, 0x6D,
	0x65, 0x6E, 0x74, 0x20, 0x45, 0x58, 0x50, 0x20, 0x43, 0x6F, 0x75, 0x70,
	0x6F, 0x6E, 0x20, 0x78, 0x34, 0x2C, 0x20, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x20, 0x34, 0x20, 0x50, 0x61, 0x72, 0x74, 0x73, 0x20, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x20, 0x42, 0x6F, 0x78, 0x20, 0x78, 0x31, 0x30, 0x2C,
	0x20, 0x6F, 0x72, 0x20, 0x31, 0x30, 0x30, 0x30, 0x20, 0x4D, 0x69, 0x6C,
	0x65, 0x61, 0x67, 0x65, 0x20, 0x43, 0x6F, 0x75, 0x70, 0x6F, 0x6E, 0x0A,
	0x0A, 0x2A, 0x45, 0x61, 0x63, 0x68, 0x20, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x20, 0x69, 0x73, 0x20, 0x65, 0x61, 0x72, 0x6E, 0x65, 0x64, 0x20,
	0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6F, 0x6E, 0x20, 0x6B, 0x69, 0x6C,
	0x6C, 0x20, 0x63, 0x6F, 0x75, 0x6E, 0x74, 0x20, 0x6F, 0x6E, 0x63, 0x65,
	0x20, 0x70, 0x65, 0x72, 0x20, 0x61, 0x63, 0x63, 0x6F, 0x75, 0x6E, 0x74,
	0x2E, 0x0A, 0x2A, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x63,
	0x6C, 0x61, 0x69, 0x6D, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x6F, 0x6E, 0x63,
	0x65, 0x20, 0x70, 0x65, 0x72, 0x20, 0x61, 0x63, 0x63, 0x6F, 0x75, 0x6E,
	0x74, 0x2E, 0x0A, 0x2A, 0x59, 0x6F, 0x75, 0x20, 0x63, 0x61, 0x6E, 0x20,
	0x6B, 0x69, 0x6C, 0x6C, 0x20, 0x75, 0x70, 0x20, 0x74, 0x6F, 0x20, 0x33,
	0x20, 0x70, 0x65, 0x72, 0x20, 0x64, 0x61, 0x79, 0x2E, 0x0A, 0x2A, 0x47,
	0x6F, 0x6C, 0x64, 0x65, 0x6E, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69, 0x65,
	0x73, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x20, 0x63, 0x68, 0x61,
	0x6E, 0x63, 0x65, 0x20, 0x74, 0x6F, 0x20, 0x73, 0x70, 0x61, 0x77, 0x6E,
	0x20, 0x69, 0x6E, 0x20, 0x4E, 0x6F, 0x72, 0x6D, 0x61, 0x6C, 0x20, 0x64,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6C, 0x74, 0x79, 0x20, 0x6F, 0x72,
	0x20, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x20, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x20, 0x33, 0x20, 0x6D, 0x69, 0x6E, 0x75, 0x74, 0x65, 0x73, 0x20,
	0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x2E,
	0x00, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E,
	0x63, 0x73, 0x6E, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6F, 0x2E, 0x63, 0x6F,
	0x6D, 0x2F, 0x77, 0x65, 0x65, 0x6B, 0x6C, 0x79, 0x2D, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x2D, 0x6E, 0x6F, 0x74, 0x65, 0x73, 0x2D, 0x6E, 0x6F, 0x76,
	0x65, 0x6D, 0x62, 0x65, 0x72, 0x2D, 0x32, 0x2D, 0x32, 0x30, 0x32, 0x32,
	0x2F, 0x00, 0x00, 0x07, 0x00, 0x44, 0x61, 0x69, 0x6C, 0x79, 0x20, 0x4D,
	0x61, 0x78, 0x69, 0x6D, 0x75, 0x6D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x47,
	0x6F, 0x6C, 0x64, 0x65, 0x6E, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69, 0x65,
	0x20, 0x4B, 0x69, 0x6C, 0x6C, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x47,
	0x6F, 0x6C, 0x64, 0x65, 0x6E, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69, 0x65,
	0x20, 0x4B, 0x69, 0x6C, 0x6C, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x47,
	0x6F, 0x6C, 0x64, 0x65, 0x6E, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69, 0x65,
	0x20, 0x4B, 0x69, 0x6C, 0x6C, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x47,
	0x6F, 0x6C, 0x64, 0x65, 0x6E, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69, 0x65,
	0x20, 0x4B, 0x69, 0x6C, 0x6C, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x47,
	0x6F, 0x6C, 0x64, 0x65, 0x6E, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69, 0x65,
	0x20, 0x4B, 0x69, 0x6C, 0x6C, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x47,
	0x6F, 0x6C, 0x64, 0x65, 0x6E, 0x20, 0x5A, 0x6F, 0x6D, 0x62, 0x69, 0x65,
	0x20, 0x4B, 0x69, 0x6C, 0x6C, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x76, 0x74, 0x5F, 0x6B,
	0x69, 0x6C, 0x6C, 0x5F, 0x67, 0x6F, 0x6C, 0x64, 0x65, 0x6E, 0x5F, 0x7A,
	0x6F, 0x6D, 0x62, 0x69, 0x65, 0x5F, 0x32, 0x32, 0x31, 0x30, 0x32, 0x30,
	0x00, 0x0A, 0x00, 0x00, 0x74, 0xA5, 0xA8, 0x01, 0x03, 0x42, 0xA9, 0x01,
	0x00, 0x00, 0x45, 0x78, 0x74, 0x72, 0x61, 0x20, 0x46, 0x72, 0x65, 0x65,
	0x20, 0x44, 0x61, 0x69, 0x6C, 0x79, 0x20, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x20, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x00, 0x20, 0x2D, 0x20,
	0x45, 0x61, 0x72, 0x6E, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6F,
	0x6E, 0x61, 0x6C, 0x20, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x20,
	0x62, 0x79, 0x20, 0x6D, 0x65, 0x65, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x74, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x61, 0x74, 0x74,
	0x65, 0x6E, 0x64, 0x61, 0x6E, 0x63, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x66, 0x6F, 0x72, 0x20,
	0x46, 0x72, 0x65, 0x65, 0x20, 0x44, 0x61, 0x69, 0x6C, 0x79, 0x20, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2E, 0x0A, 0x0A, 0x2D, 0x20, 0x35,
	0x20, 0x64, 0x61, 0x79, 0x73, 0x3A, 0x20, 0x43, 0x75, 0x6D, 0x75, 0x6C,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x41, 0x74, 0x74, 0x65, 0x6E, 0x64,
	0x61, 0x6E, 0x63, 0x65, 0x20, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x20,
	0x42, 0x6F, 0x78, 0x20, 0x78, 0x31, 0x0A, 0x2D, 0x20, 0x31, 0x30, 0x20,
	0x64, 0x61, 0x79, 0x73, 0x3A, 0x20, 0x43, 0x75, 0x6D, 0x75, 0x6C, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x20, 0x41, 0x74, 0x74, 0x65, 0x6E, 0x64, 0x61,
	0x6E, 0x63, 0x65, 0x20, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x20, 0x42,
	0x6F, 0x78, 0x20, 0x78, 0x31, 0x0A, 0x2D, 0x20, 0x31, 0x35, 0x20, 0x64,
	0x61, 0x79, 0x73, 0x3A, 0x20, 0x43, 0x75, 0x6D, 0x75, 0x6C, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x20, 0x41, 0x74, 0x74, 0x65, 0x6E, 0x64, 0x61, 0x6E,
	0x63, 0x65, 0x20, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x20, 0x42, 0x6F,
	0x78, 0x20, 0x78, 0x31, 0x0A, 0x2D, 0x20, 0x32, 0x30, 0x20, 0x64, 0x61,
	0x79, 0x73, 0x3A, 0x20, 0x43, 0x75, 0x6D, 0x75, 0x6C, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x20, 0x41, 0x74, 0x74, 0x65, 0x6E, 0x64, 0x61, 0x6E, 0x63,
	0x65, 0x20, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x20, 0x42, 0x6F, 0x78,
	0x20, 0x78, 0x31, 0x0A, 0x2D, 0x20, 0x32, 0x35, 0x20, 0x64, 0x61, 0x79,
	0x73, 0x3A, 0x20, 0x43, 0x75, 0x6D, 0x75, 0x6C, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x20, 0x41, 0x74, 0x74, 0x65, 0x6E, 0x64, 0x61, 0x6E, 0x63, 0x65,
	0x20, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x20, 0x42, 0x6F, 0x78, 0x20,
	0x78, 0x31, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77, 0x77,
	0x77, 0x2E, 0x63, 0x73, 0x6E, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6F, 0x2E,
	0x63, 0x6F, 0x6D, 0x2F, 0x77, 0x65, 0x65, 0x6B, 0x6C, 0x79, 0x2D, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x2D, 0x6E, 0x6F, 0x74, 0x65, 0x73, 0x2D, 0x6E,
	0x6F, 0x76, 0x65, 0x6D, 0x62, 0x65, 0x72, 0x2D, 0x33, 0x30, 0x2D, 0x32,
	0x30, 0x32, 0x32, 0x2F, 0x00, 0x00, 0x05, 0x00, 0x35, 0x2D, 0x44, 0x61,
	0x79, 0x20, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x30, 0x2D, 0x44, 0x61,
	0x79, 0x20, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x35, 0x2D, 0x44, 0x61,
	0x79, 0x20, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x30, 0x2D, 0x44, 0x61,
	0x79, 0x20, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x35, 0x2D, 0x44, 0x61,
	0x79, 0x20, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x61, 0x74,
	0x74, 0x6C, 0x65, 0x73, 0x75, 0x70, 0x70, 0x6C, 0x79, 0x5F, 0x32, 0x30,
	0x32, 0x32, 0x31, 0x31, 0x00, 0x0B, 0x00, 0x00, 0x34, 0xF4, 0xA8, 0x01,
	0xF4, 0x42, 0xA9, 0x01, 0x00, 0x00, 0x4C, 0x61, 0x62, 0x6F, 0x72, 0x61,
	0x74, 0x6F, 0x72, 0x79, 0x20, 0x44, 0x61, 0x69, 0x6C, 0x79, 0x20, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x45, 0x76,
	0x65, 0x6E, 0x74, 0x00, 0x2D, 0x20, 0x59, 0x6F, 0x75, 0x20, 0x77, 0x69,
	0x6C, 0x6C, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x20, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x6D,
	0x65, 0x65, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x20,
	0x69, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4C, 0x61, 0x62, 0x6F, 0x72,
	0x61, 0x74, 0x6F, 0x72, 0x79, 0x20, 0x6D, 0x6F, 0x64, 0x65, 0x20, 0x64,
	0x75, 0x72, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x76,
	0x65, 0x6E, 0x74, 0x0A, 0x0A, 0x20, 0x2D, 0x20, 0x52, 0x65, 0x61, 0x63,
	0x68, 0x20, 0x31, 0x30, 0x20, 0x6D, 0x69, 0x6E, 0x75, 0x74, 0x65, 0x73,
	0x20, 0x6F, 0x66, 0x20, 0x50, 0x54, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20,
	0x7A, 0x6F, 0x6D, 0x62, 0x69, 0x65, 0x20, 0x69, 0x6E, 0x20, 0x4C, 0x61,
	0x62, 0x6F, 0x72, 0x61, 0x74, 0x6F, 0x72, 0x79, 0x20, 0x6D, 0x6F, 0x64,
	0x65, 0x0A, 0x20, 0x2D, 0x20, 0x55, 0x73, 0x65, 0x20, 0x73, 0x6B, 0x69,
	0x6C, 0x6C, 0x73, 0x20, 0x33, 0x20, 0x74, 0x69, 0x6D, 0x65, 0x73, 0x20,
	0x61, 0x73, 0x20, 0x61, 0x20, 0x7A, 0x6F, 0x6D, 0x62, 0x69, 0x65, 0x20,
	0x69, 0x6E, 0x20, 0x4C, 0x61, 0x62, 0x6F, 0x72, 0x61, 0x74, 0x6F, 0x72,
	0x79, 0x20, 0x6D, 0x6F, 0x64, 0x65, 0x0A, 0x20, 0x2D, 0x20, 0x4F, 0x6E,
	0x63, 0x65, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20,
	0x6D, 0x65, 0x74, 0x20, 0x61, 0x6C, 0x6C, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x73,
	0x3A, 0x20, 0x63, 0x6C, 0x61, 0x69, 0x6D, 0x20, 0x31, 0x20, 0x45, 0x76,
	0x65, 0x6E, 0x74, 0x20, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72, 0x0A,
	0x0A, 0x20, 0x2A, 0x20, 0x59, 0x6F, 0x75, 0x20, 0x63, 0x61, 0x6E, 0x20,
	0x6F, 0x6E, 0x6C, 0x79, 0x20, 0x63, 0x6C, 0x61, 0x69, 0x6D, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x20, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x20, 0x6D, 0x65, 0x65, 0x74, 0x69, 0x6E, 0x67, 0x20,
	0x61, 0x6C, 0x6C, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x0A, 0x20, 0x2A, 0x20,
	0x43, 0x61, 0x6E, 0x20, 0x6F, 0x6E, 0x6C, 0x79, 0x20, 0x62, 0x65, 0x20,
	0x61, 0x63, 0x63, 0x6F, 0x6D, 0x70, 0x6C, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x20, 0x6F, 0x6E, 0x63, 0x65, 0x20, 0x70, 0x65, 0x72, 0x20, 0x61, 0x63,
	0x63, 0x6F, 0x75, 0x6E, 0x74, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6E, 0x67,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x76, 0x65, 0x6E, 0x74, 0x0A, 0x2A,
	0x20, 0x43, 0x61, 0x6E, 0x6E, 0x6F, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61,
	0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x61,
	0x75, 0x74, 0x6F, 0x20, 0x68, 0x75, 0x6E, 0x74, 0x69, 0x6E, 0x67, 0x2E,
	0x00, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E,
	0x63, 0x73, 0x6E, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6F, 0x2E, 0x63, 0x6F,
	0x6D, 0x2F, 0x77, 0x65, 0x65, 0x6B, 0x6C, 0x79, 0x2D, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x2D, 0x6E, 0x6F, 0x74, 0x65, 0x73, 0x2D, 0x64, 0x65, 0x63,
	0x65, 0x6D, 0x62, 0x65, 0x72, 0x2D, 0x31, 0x34, 0x2D, 0x32, 0x30, 0x32,
	0x32, 0x2F, 0x00, 0x00, 0x02, 0x00, 0x4C, 0x61, 0x62, 0x6F, 0x72, 0x61,
	0x74, 0x6F, 0x72, 0x79, 0x20, 0x44, 0x61, 0x69, 0x6C, 0x79, 0x20, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x54, 0x6F,
	0x74, 0x61, 0x6C, 0x20, 0x50, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x61, 0x62, 0x6F, 0x72, 0x61, 0x74,
	0x6F, 0x72, 0x79, 0x20, 0x44, 0x61, 0x69, 0x6C, 0x79, 0x20, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x54, 0x6F, 0x74,
	0x61, 0x6C, 0x20, 0x53, 0x6B, 0x69, 0x6C, 0x6C, 0x20, 0x55, 0x73, 0x65,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x03, 0x01, 0x00, 0x05, 0x21, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xE3, 0x25, 0xA9, 0x01, 0x00, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x65, 0x6E, 0x63, 0x65, 0x4C, 0x61, 0x62, 0x4D, 0x6F, 0x64, 0x65,
	0x5F, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x30, 0x31, 0x00, 0x0C, 0x00,
	0x00, 0x74, 0xA5, 0xA8, 0x01, 0xF4, 0x42, 0xA9, 0x01, 0x00, 0x00, 0x47,
	0x75, 0x61, 0x72, 0x61, 0x6E, 0x74, 0x65, 0x65, 0x64, 0x20, 0x54, 0x72,
	0x61, 0x6E, 0x73, 0x63, 0x65, 0x6E, 0x64, 0x65, 0x6E, 0x63, 0x65, 0x20,
	0x52, 0x6F, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x47, 0x72, 0x6F,
	0x75, 0x70, 0x20, 0x47, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79, 0x20,
	0x45, 0x76, 0x65, 0x6E, 0x74, 0x00, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x20, 0x31, 0x20, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6E, 0x74, 0x65,
	0x65, 0x64, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x20, 0x70, 0x65, 0x72,
	0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x63,
	0x65, 0x6E, 0x64, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x44, 0x65, 0x63, 0x6F,
	0x64, 0x65, 0x72, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x64, 0x75, 0x72,
	0x69, 0x6E, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x76, 0x65, 0x6E,
	0x74, 0x2E, 0x0A, 0x0A, 0x20, 0x2D, 0x20, 0x53, 0x65, 0x6C, 0x65, 0x63,
	0x74, 0x20, 0x6F, 0x6E, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x66, 0x6F, 0x6C, 0x6C, 0x6F, 0x77, 0x69, 0x6E, 0x67, 0x20, 0x66,
	0x6F, 0x72, 0x20, 0x65, 0x76, 0x65, 0x72, 0x79, 0x20, 0x33, 0x30, 0x30,
	0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x20, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x0A, 0x20, 0x2D, 0x20, 0x4E, 0x45, 0x47, 0x45, 0x56,
	0x20, 0x4E, 0x47, 0x2D, 0x37, 0x20, 0x41, 0x6A, 0x61, 0x78, 0x2C, 0x20,
	0x53, 0x70, 0x65, 0x6C, 0x6C, 0x20, 0x4C, 0x61, 0x6E, 0x63, 0x65, 0x20,
	0x53, 0x63, 0x61, 0x72, 0x6C, 0x65, 0x74, 0x20, 0x52, 0x6F, 0x73, 0x65,
	0x2C, 0x20, 0x50, 0x73, 0x79, 0x63, 0x68, 0x69, 0x63, 0x20, 0x48, 0x61,
	0x72, 0x6D, 0x6F, 0x6E, 0x69, 0x75, 0x6D, 0x2C, 0x20, 0x4C, 0x69, 0x67,
	0x68, 0x74, 0x6E, 0x69, 0x6E, 0x67, 0x20, 0x46, 0x75, 0x72, 0x79, 0x00,
	0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x63,
	0x73, 0x6E, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6F, 0x2E, 0x63, 0x6F, 0x6D,
	0x2F, 0x77, 0x65, 0x65, 0x6B, 0x6C, 0x79, 0x2D, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x2D, 0x6E, 0x6F, 0x74, 0x65, 0x73, 0x2D, 0x6E, 0x6F, 0x76, 0x65,
	0x6D, 0x62, 0x65, 0x72, 0x2D, 0x33, 0x30, 0x2D, 0x32, 0x30, 0x32, 0x32,
	0x2F, 0x00, 0x00, 0x01, 0x00, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x50,
	0x6F, 0x69, 0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x76, 0x74, 0x32, 0x32, 0x31,
	0x31, 0x31, 0x37, 0x5F, 0x54, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72,
	0x00, 0x0D, 0x00, 0x00, 0x74, 0xA5, 0xA8, 0x01, 0xB4, 0x91, 0xA9, 0x01,
	0x00, 0x00, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x63, 0x65, 0x6E, 0x64, 0x65,
	0x6E, 0x63, 0x65, 0x20, 0x43, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x47, 0x75,
	0x61, 0x72, 0x61, 0x6E, 0x74, 0x65, 0x65, 0x64, 0x20, 0x47, 0x69, 0x76,
	0x65, 0x61, 0x77, 0x61, 0x79, 0x00, 0x2D, 0x20, 0x59, 0x6F, 0x75, 0x20,
	0x77, 0x69, 0x6C, 0x6C, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x20, 0x62, 0x61, 0x73, 0x65,
	0x64, 0x20, 0x6F, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6E, 0x75, 0x6D,
	0x62, 0x65, 0x72, 0x20, 0x6F, 0x66, 0x20, 0x43, 0x6C, 0x61, 0x73, 0x73,
	0x20, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72, 0x73, 0x20, 0x75, 0x73,
	0x65, 0x64, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x65, 0x76, 0x65, 0x6E, 0x74, 0x2E, 0x0A, 0x0A, 0x20, 0x2D,
	0x20, 0x55, 0x73, 0x65, 0x20, 0x31, 0x20, 0x43, 0x6C, 0x61, 0x73, 0x73,
	0x20, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72, 0x3A, 0x20, 0x31, 0x20,
	0x47, 0x75, 0x61, 0x72, 0x61, 0x6E, 0x74, 0x65, 0x65, 0x64, 0x20, 0x50,
	0x6F, 0x69, 0x6E, 0x74, 0x0A, 0x20, 0x2D, 0x20, 0x55, 0x73, 0x65, 0x20,
	0x31, 0x20, 0x50, 0x72, 0x65, 0x6D, 0x69, 0x75, 0x6D, 0x20, 0x43, 0x6C,
	0x61, 0x73, 0x73, 0x20, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72, 0x3A,
	0x20, 0x33, 0x20, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6E, 0x74, 0x65, 0x65,
	0x64, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x0A, 0x0A, 0x20, 0x2D,
	0x20, 0x52, 0x65, 0x61, 0x63, 0x68, 0x20, 0x31, 0x35, 0x30, 0x20, 0x50,
	0x6F, 0x69, 0x6E, 0x74, 0x73, 0x3A, 0x20, 0x53, 0x65, 0x6C, 0x65, 0x63,
	0x74, 0x20, 0x4E, 0x79, 0x78, 0x20, 0x6F, 0x72, 0x20, 0x53, 0x6B, 0x61,
	0x64, 0x69, 0x0A, 0x20, 0x2D, 0x20, 0x52, 0x65, 0x61, 0x63, 0x68, 0x20,
	0x33, 0x30, 0x30, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x3A, 0x20,
	0x53, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x20, 0x4E, 0x79, 0x78, 0x20, 0x6F,
	0x72, 0x20, 0x53, 0x6B, 0x61, 0x64, 0x69, 0x0A, 0x0A, 0x20, 0x2A, 0x20,
	0x55, 0x70, 0x6F, 0x6E, 0x20, 0x73, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x69,
	0x6E, 0x67, 0x20, 0x61, 0x20, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x2C, 0x20,
	0x79, 0x6F, 0x75, 0x20, 0x61, 0x75, 0x74, 0x6F, 0x6D, 0x61, 0x74, 0x69,
	0x63, 0x61, 0x6C, 0x6C, 0x79, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x20, 0x69, 0x74, 0x73, 0x20, 0x65, 0x78, 0x63, 0x6C, 0x75, 0x73,
	0x69, 0x76, 0x65, 0x20, 0x63, 0x6F, 0x73, 0x74, 0x75, 0x6D, 0x65, 0x20,
	0x28, 0x50, 0x65, 0x72, 0x6D, 0x61, 0x6E, 0x65, 0x6E, 0x74, 0x29, 0x2E,
	0x0A, 0x20, 0x2A, 0x20, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x20,
	0x66, 0x72, 0x6F, 0x6D, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x20, 0x63, 0x61, 0x6E, 0x20, 0x6F, 0x6E, 0x6C, 0x79,
	0x20, 0x62, 0x65, 0x20, 0x63, 0x6C, 0x61, 0x69, 0x6D, 0x65, 0x64, 0x20,
	0x6F, 0x6E, 0x63, 0x65, 0x20, 0x70, 0x65, 0x72, 0x20, 0x61, 0x63, 0x63,
	0x6F, 0x75, 0x6E, 0x74, 0x2E, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F,
	0x2F, 0x77, 0x77, 0x77, 0x2E, 0x63, 0x73, 0x6E, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6F, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x77, 0x65, 0x65, 0x6B, 0x6C,
	0x79, 0x2D, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2D, 0x6E, 0x6F, 0x74, 0x65,
	0x73, 0x2D, 0x6E, 0x6F, 0x76, 0x65, 0x6D, 0x62, 0x65, 0x72, 0x2D, 0x33,
	0x30, 0x2D, 0x32, 0x30, 0x32, 0x32, 0x2F, 0x00, 0x00, 0x02, 0x00, 0x54,
	0x6F, 0x74, 0x61, 0x6C, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x6F,
	0x74, 0x61, 0x6C, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65,
	0x76, 0x74, 0x32, 0x32, 0x31, 0x31, 0x31, 0x37, 0x5F, 0x43, 0x44, 0x65,
	0x63, 0x6F, 0x64, 0x65, 0x72, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x00, 0x0E,
	0x00, 0x00, 0x34, 0xF4, 0xA8, 0x01, 0xF4, 0x42, 0xA9, 0x01, 0x00, 0x00,
	0x4C, 0x61, 0x62, 0x6F, 0x72, 0x61, 0x74, 0x6F, 0x72, 0x79, 0x20, 0x45,
	0x78, 0x70, 0x6C, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x4D,
	0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x45, 0x76, 0x65, 0x6E, 0x74,
	0x00, 0x2D, 0x20, 0x45, 0x61, 0x72, 0x6E, 0x20, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x74, 0x69, 0x6D,
	0x65, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x20,
	0x31, 0x30, 0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x20, 0x62, 0x79,
	0x20, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x69, 0x6E, 0x67, 0x20, 0x70,
	0x6F, 0x69, 0x6E, 0x74, 0x73, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6E, 0x67,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x76, 0x65, 0x6E, 0x74, 0x0A, 0x0A,
	0x20, 0x2D, 0x20, 0x52, 0x65, 0x61, 0x63, 0x68, 0x20, 0x32, 0x30, 0x20,
	0x6D, 0x69, 0x6E, 0x75, 0x74, 0x65, 0x73, 0x20, 0x6F, 0x66, 0x20, 0x50,
	0x54, 0x20, 0x69, 0x6E, 0x20, 0x7A, 0x6F, 0x6D, 0x62, 0x69, 0x65, 0x20,
	0x6D, 0x6F, 0x64, 0x65, 0x3A, 0x20, 0x35, 0x20, 0x70, 0x6F, 0x69, 0x6E,
	0x74, 0x73, 0x20, 0x28, 0x75, 0x70, 0x20, 0x74, 0x6F, 0x20, 0x31, 0x30,
	0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x29, 0x0A, 0x20, 0x2D, 0x20,
	0x32, 0x20, 0x4B, 0x69, 0x6C, 0x6C, 0x73, 0x2C, 0x20, 0x36, 0x20, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x2C, 0x20, 0x6F, 0x72, 0x20, 0x32,
	0x20, 0x48, 0x75, 0x6D, 0x61, 0x6E, 0x20, 0x49, 0x6E, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x6F, 0x6E, 0x73, 0x20, 0x69, 0x6E, 0x20, 0x5A, 0x6F, 0x6D,
	0x62, 0x69, 0x65, 0x20, 0x5A, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x4C, 0x61,
	0x62, 0x6F, 0x72, 0x61, 0x74, 0x6F, 0x72, 0x79, 0x20, 0x6D, 0x6F, 0x64,
	0x65, 0x73, 0x3A, 0x20, 0x32, 0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x73,
	0x20, 0x28, 0x75, 0x70, 0x20, 0x74, 0x6F, 0x20, 0x33, 0x30, 0x20, 0x70,
	0x6F, 0x69, 0x6E, 0x74, 0x73, 0x20, 0x61, 0x20, 0x64, 0x61, 0x79, 0x29,
	0x0A, 0x20, 0x2D, 0x20, 0x55, 0x70, 0x6F, 0x6E, 0x20, 0x61, 0x63, 0x71,
	0x75, 0x69, 0x72, 0x69, 0x6E, 0x67, 0x20, 0x31, 0x30, 0x20, 0x70, 0x6F,
	0x69, 0x6E, 0x74, 0x73, 0x3A, 0x20, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x20,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x20, 0x42, 0x6F, 0x78, 0x20, 0x78,
	0x31, 0x28, 0x75, 0x70, 0x20, 0x74, 0x6F, 0x20, 0x34, 0x20, 0x61, 0x20,
	0x64, 0x61, 0x79, 0x29, 0x0A, 0x20, 0x2D, 0x20, 0x55, 0x70, 0x6F, 0x6E,
	0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6E, 0x67, 0x20, 0x32, 0x30,
	0x30, 0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x3A, 0x20, 0x54, 0x72,
	0x61, 0x6E, 0x73, 0x63, 0x65, 0x6E, 0x64, 0x65, 0x6E, 0x63, 0x65, 0x20,
	0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x72, 0x20, 0x78, 0x33, 0x20, 0x28,
	0x75, 0x70, 0x20, 0x74, 0x6F, 0x20, 0x6F, 0x6E, 0x63, 0x65, 0x20, 0x70,
	0x65, 0x72, 0x20, 0x61, 0x63, 0x63, 0x6F, 0x75, 0x6E, 0x74, 0x29, 0x00,
	0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x63,
	0x73, 0x6E, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6F, 0x2E, 0x63, 0x6F, 0x6D,
	0x2F, 0x77, 0x65, 0x65, 0x6B, 0x6C, 0x79, 0x2D, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x2D, 0x6E, 0x6F, 0x74, 0x65, 0x73, 0x2D, 0x64, 0x65, 0x63, 0x65,
	0x6D, 0x62, 0x65, 0x72, 0x2D, 0x31, 0x34, 0x2D, 0x32, 0x30, 0x32, 0x32,
	0x2F, 0x00, 0x00, 0x05, 0x00, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x20, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x20, 0x42, 0x6F, 0x78, 0x20, 0x41, 0x63,
	0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x50, 0x6F,
	0x69, 0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00,
	0x00, 0x01, 0x00, 0xFB, 0x09, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x61, 0x62, 0x6F, 0x72, 0x61,
	0x74, 0x6F, 0x72, 0x79, 0x20, 0x45, 0x78, 0x70, 0x6C, 0x6F, 0x72, 0x61,
	0x74, 0x69, 0x6F, 0x6E, 0x20, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E,
	0x20, 0x54, 0x6F, 0x64, 0x61, 0x79, 0x27, 0x73, 0x20, 0x54, 0x6F, 0x74,
	0x61, 0x6C, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x61, 0x62, 0x6F,
	0x72, 0x61, 0x74, 0x6F, 0x72, 0x79, 0x20, 0x45, 0x78, 0x70, 0x6C, 0x6F,
	0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x4D, 0x69, 0x73, 0x73, 0x69,
	0x6F, 0x6E, 0x20, 0x54, 0x6F, 0x64, 0x61, 0x79, 0x27, 0x73, 0x20, 0x50,
	0x54, 0x20, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x50, 0x6F, 0x69, 0x6E,
	0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x4C, 0x61, 0x62, 0x6F, 0x72, 0x61, 0x74, 0x6F, 0x72, 0x79, 0x20,
	0x45, 0x78, 0x70, 0x6C, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20,
	0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x54, 0x6F, 0x64, 0x61,
	0x79, 0x27, 0x73, 0x20, 0x4B, 0x69, 0x6C, 0x6C, 0x2F, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x20, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x20, 0x50, 0x6F,
	0x69, 0x6E, 0x74, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x4C, 0x61, 0x62, 0x6F, 0x72, 0x61, 0x74, 0x6F, 0x72,
	0x79, 0x20, 0x45, 0x78, 0x70, 0x6C, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,
	0x6E, 0x20, 0x4D, 0x69, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x54, 0x6F,
	0x74, 0x61, 0x6C, 0x20, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x73, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x64, 0x20, 0x00,
	0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x65, 0x76, 0x74, 0x32, 0x32, 0x31, 0x32, 0x30, 0x31, 0x5F,
	0x65, 0x78, 0x70, 0x6C, 0x6F, 0x72, 0x65, 0x4C, 0x61, 0x62, 0x00
};

void CPacketManager::SendAlarm(CExtendedSocket* socket, vector<Notice_s>& notices)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Alarm);
	msg->BuildHeader();

	msg->WriteData(rawData, sizeof(rawData));

	/*msg->WriteUInt8(0);

	msg->WriteUInt16(notices.size());
	for (auto notice : notices)
	{
		msg->WriteUInt8(notice.id);
		msg->WriteUInt8(0); // is user has read notice
		msg->WriteUInt8(0);
		msg->WriteUInt32(notice.startDate);
		msg->WriteUInt32(notice.endDate);
		msg->WriteUInt16(0);
		msg->WriteString(notice.name);
		msg->WriteString("url");
		msg->WriteString(notice.description);
		msg->WriteString("desc3");

		if (1)
		{
			msg->WriteUInt8(0);
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
		}

		msg->WriteUInt16(1); // count
		if (1)
		{
			msg->WriteString("kavo4");
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
			msg->WriteUInt16(0); // count
			if (0)
			{
				msg->WriteUInt32(0);
				msg->WriteUInt16(0);
				msg->WriteUInt32(0);
				msg->WriteUInt32(0);
				msg->WriteUInt8(0);
			}
		}
		msg->WriteUInt16(0);

		msg->WriteUInt8(0);
		msg->WriteUInt8(0);
		msg->WriteUInt32(0);
	}*/

	socket->Send(msg);
}

unsigned char Questunk1[10419] = {
	0x01, 0x10, 0x24, 0x01, 0xBD, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03,
	0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x05,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00,
	0x00, 0x00, 0x0F, 0x00, 0x01, 0xBE, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00,
	0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D,
	0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00,
	0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xBF, 0x02, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x0D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xC0, 0x02, 0x00, 0x00, 0x23,
	0x3F, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x0D, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xC1, 0x02, 0x00, 0x00,
	0x23, 0x3F, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x01, 0x00, 0x0D, 0xD0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xC2, 0x02, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xC3, 0x02,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xC4,
	0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x08, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01,
	0xC5, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xF4, 0x01, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00,
	0x01, 0xC6, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x05, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F,
	0x00, 0x01, 0xC7, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x0A, 0x00, 0x00,
	0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00,
	0x0F, 0x00, 0x01, 0xC8, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xB8, 0x0B,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00,
	0x00, 0x0F, 0x00, 0x01, 0xC9, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03,
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00,
	0x00, 0x00, 0x0F, 0x00, 0x01, 0xCA, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00,
	0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D,
	0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00,
	0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xCB, 0x02, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00,
	0x0D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xCC, 0x02, 0x00, 0x00, 0x23,
	0x3F, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x0D, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xCD, 0x02, 0x00, 0x00,
	0x23, 0x3F, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xCE, 0x02, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xCF, 0x02,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xD0,
	0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x01, 0x00, 0x0D, 0xD0, 0x07, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01,
	0xD1, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x09, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x05, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00,
	0x01, 0xD2, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x09, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x07, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F,
	0x00, 0x01, 0xD3, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x05,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x32, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00,
	0x0F, 0x00, 0x01, 0xD4, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00,
	0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x1E, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00,
	0x00, 0x0F, 0x00, 0x01, 0xD5, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03,
	0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x0D, 0x32,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00,
	0x00, 0x00, 0x0F, 0x00, 0x01, 0xD6, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00,
	0x03, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D,
	0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00,
	0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xD7, 0x02, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x0D, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xD8, 0x02, 0x00, 0x00, 0x23,
	0x3F, 0x00, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xD9, 0x02, 0x00, 0x00,
	0x23, 0x3F, 0x00, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x0D, 0xF4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xDA, 0x02, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x01, 0x00, 0x0D, 0xD0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xDB, 0x02,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xDC,
	0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01,
	0xDD, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x1E, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00,
	0x01, 0xDE, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x04, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x32, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F,
	0x00, 0x01, 0xDF, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x04,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x0D, 0x32, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00,
	0x0F, 0x00, 0x01, 0xE0, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00,
	0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x32, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00,
	0x00, 0x0F, 0x00, 0x01, 0xE1, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03,
	0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x14,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00,
	0x00, 0x00, 0x0F, 0x00, 0x01, 0xE2, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00,
	0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D,
	0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00,
	0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xE3, 0x02, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x03, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x0D, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xE4, 0x02, 0x00, 0x00, 0x23,
	0x3F, 0x00, 0x03, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,
	0x00, 0x0D, 0xD0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xE5, 0x02, 0x00, 0x00,
	0x23, 0x3F, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x0D, 0x0A, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xE6, 0x02, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xE7, 0x02,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xE8,
	0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01,
	0xE9, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00,
	0x01, 0xEA, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x0B, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x05, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F,
	0x00, 0x01, 0xEB, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x0B,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x14, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00,
	0x0F, 0x00, 0x01, 0xEC, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00,
	0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x32, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00,
	0x00, 0x0F, 0x00, 0x01, 0xED, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03,
	0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x1E,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00,
	0x00, 0x00, 0x0F, 0x00, 0x01, 0xEE, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00,
	0x03, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x0D,
	0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00,
	0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xEF, 0x02, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x03, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x0D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xF0, 0x02, 0x00, 0x00, 0x23,
	0x3F, 0x00, 0x03, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x0D, 0xB8, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xF1, 0x02, 0x00, 0x00,
	0x23, 0x3F, 0x00, 0x03, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xF2, 0x02, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xF3, 0x02,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x01, 0x00, 0x0D, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0xF9,
	0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x08, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01,
	0xFA, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x08, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x14, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00,
	0x01, 0xFB, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x06, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x05, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F,
	0x00, 0x01, 0xFC, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x08,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x14, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00,
	0x0F, 0x00, 0x01, 0xFD, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00,
	0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x0D, 0xD0, 0x07,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00,
	0x00, 0x0F, 0x00, 0x01, 0xD1, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02,
	0x02, 0x00, 0x00, 0x01, 0x00, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xD2, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x01,
	0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0D,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x1E,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD3, 0x07, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x02, 0x02, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x01, 0x00,
	0x0D, 0xE8, 0x03, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD4, 0x07, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xD5, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD6,
	0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x00,
	0x06, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xD7, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00, 0x00, 0x07,
	0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x88, 0x13, 0x00, 0x00, 0x88,
	0x13, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xD8, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x08, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x88, 0x13, 0x00, 0x00,
	0x53, 0x0C, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xD9, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDA, 0x07,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00, 0x00, 0x0A, 0x00, 0x04,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x10, 0x27, 0x00, 0x00, 0x10, 0x27, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDB,
	0x07, 0x00, 0x00, 0x23, 0x3F, 0x01, 0x02, 0x02, 0x00, 0x00, 0x0B, 0x00,
	0x07, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xDC, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00, 0x00, 0x0C,
	0x00, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xDD, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x0D, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00,
	0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x05, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xDE, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00,
	0x00, 0x0E, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x0D, 0x32, 0x00, 0x00,
	0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x64,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xDF, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00, 0x00,
	0x0F, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00,
	0x64, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x64, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xE0, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00, 0x00, 0x10,
	0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x0D, 0xC8, 0x00, 0x00, 0x00, 0xC8,
	0x00, 0x00, 0x00, 0x01, 0x0D, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE1,
	0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x11, 0x00,
	0x02, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x32, 0x00, 0x00, 0x00, 0x0D, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xE2, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x01, 0x02, 0x00, 0x00, 0x00, 0x12,
	0x00, 0x02, 0x00, 0x00, 0x04, 0x00, 0x0D, 0x88, 0x13, 0x00, 0x00, 0xE6,
	0x00, 0x00, 0x00, 0x01, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00,
	0x00, 0x02, 0x0D, 0xE8, 0x03, 0x00, 0x00, 0xA7, 0x00, 0x00, 0x00, 0x03,
	0x0D, 0x64, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE3, 0x07, 0x00, 0x00, 0x23,
	0x3F, 0x01, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x00, 0x03,
	0x00, 0x0D, 0xF4, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x0D,
	0xE8, 0x03, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x0D, 0x88, 0x13,
	0x00, 0x00, 0xA7, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x14, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xE4, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x01, 0x02,
	0x00, 0x00, 0x00, 0x14, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xC4,
	0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x32, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xE5, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x01,
	0x02, 0x02, 0x00, 0x00, 0x15, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D,
	0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE6, 0x07, 0x00, 0x00, 0x23, 0x3F,
	0x01, 0x02, 0x00, 0x00, 0x00, 0x16, 0x00, 0x06, 0x00, 0x00, 0x02, 0x00,
	0x0D, 0x64, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x64,
	0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x14, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xE7, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x01,
	0x02, 0x00, 0x00, 0x00, 0x17, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x0D,
	0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x1E,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE8, 0x07, 0x00, 0x00, 0x23, 0x3F,
	0x01, 0x02, 0x00, 0x00, 0x00, 0x18, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00,
	0x0D, 0x10, 0x27, 0x00, 0x00, 0x7E, 0x08, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE9, 0x07, 0x00, 0x00, 0x23,
	0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x19, 0x00, 0x04, 0x00, 0x00, 0x01,
	0x00, 0x0D, 0x2C, 0x01, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEA, 0x07, 0x00, 0x00,
	0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x07, 0x00, 0x00,
	0x01, 0x00, 0x0D, 0x2C, 0x01, 0x00, 0x00, 0xA1, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x61, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x07, 0x00,
	0x00, 0x23, 0x3F, 0x01, 0x02, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x07, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0xE8, 0x03, 0x00, 0x00, 0x46, 0x02, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEC, 0x07,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00, 0x00, 0x1C, 0x00, 0x07,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xED,
	0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00, 0x00, 0x1D, 0x00,
	0x07, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xEE, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x01, 0x02, 0x00, 0x00, 0x00, 0x1E,
	0x00, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xEF, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x1F, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xE8, 0x03, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xF0, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00,
	0x00, 0x20, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xE8, 0x03, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xF1, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x01, 0x02, 0x00,
	0x00, 0x00, 0x21, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xB8, 0x0B,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x32, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xF2, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x22, 0x00, 0x04, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x2C,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xF3, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xF4, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF5, 0x07, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xF6, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xF7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x07, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x28, 0x00, 0x01, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x90, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF9, 0x07,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x29, 0x00, 0x01,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x90, 0x01, 0x00, 0x00, 0x67, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFA,
	0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2A, 0x00,
	0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x90, 0x01, 0x00, 0x00, 0x04, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xFB, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00, 0x00, 0x2B,
	0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x64,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xFC, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x01, 0x02, 0x02, 0x00, 0x00,
	0x2C, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00,
	0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xFD, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00,
	0x00, 0x2D, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x05, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xFE, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x01, 0x02, 0x00,
	0x00, 0x00, 0x2E, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x32, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xFF, 0x07, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x2F, 0x00, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00,
	0x02, 0x00, 0x00, 0x00, 0x30, 0x00, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0D,
	0x64, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x02, 0x00, 0x00, 0x00, 0x31, 0x00, 0x05, 0x00, 0x00, 0x01, 0x00,
	0x0D, 0xC4, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x08, 0x00, 0x00, 0x23,
	0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x32, 0x00, 0x05, 0x00, 0x00, 0x01,
	0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x61, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x08, 0x00, 0x00,
	0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x33, 0x00, 0x05, 0x00, 0x00,
	0x01, 0x00, 0x0D, 0x5E, 0x01, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x61, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x08, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x34, 0x00, 0x05, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x5E, 0x01, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x08,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x08, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x38, 0x00, 0x04,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0xE8, 0x03, 0x00, 0x00, 0xCB, 0x03, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00, 0x00, 0x39, 0x00,
	0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x64, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0A, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x3A,
	0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x0B, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x3B, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x0C, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00,
	0x00, 0x3C, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x0D, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00,
	0x00, 0x00, 0x3D, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xB8, 0x0B,
	0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x0E, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02,
	0x02, 0x00, 0x00, 0x3E, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x2C,
	0x01, 0x00, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00,
	0x02, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D,
	0xB8, 0x0B, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x08, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x02, 0x00, 0x00, 0x00, 0x40, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00,
	0x0D, 0x10, 0x27, 0x00, 0x00, 0x6D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x08, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x12, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02,
	0x00, 0x00, 0x42, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00,
	0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x13, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02,
	0x02, 0x00, 0x00, 0x43, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xB8,
	0x0B, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x01, 0x00, 0x61, 0x1E, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00,
	0x02, 0x00, 0x00, 0x00, 0x44, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D,
	0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x08, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x02, 0x00, 0x00, 0x00, 0x45, 0x00, 0x04, 0x00, 0x00, 0x06, 0x00,
	0x0D, 0xE8, 0x03, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x01, 0x0D, 0xF4,
	0x01, 0x00, 0x00, 0xF4, 0x01, 0x00, 0x00, 0x02, 0x0D, 0x90, 0x01, 0x00,
	0x00, 0x90, 0x01, 0x00, 0x00, 0x03, 0x0D, 0x2C, 0x01, 0x00, 0x00, 0xCD,
	0x00, 0x00, 0x00, 0x04, 0x0D, 0xC8, 0x00, 0x00, 0x00, 0xC8, 0x00, 0x00,
	0x00, 0x05, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x61, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x08, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x01, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x08,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x06,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x01, 0x02, 0x00, 0x00, 0x00, 0x48, 0x00,
	0x06, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xE8, 0x03, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x19, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x49,
	0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x16,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x1A, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x4A, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x88, 0x13, 0x00, 0x00,
	0x18, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x1B, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00,
	0x00, 0x4B, 0x00, 0x06, 0x00, 0x00, 0x02, 0x00, 0x0D, 0x96, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x1C, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x01, 0x02, 0x02, 0x00, 0x00,
	0x4C, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x1D, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x1E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x08, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x01, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x08,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x51, 0x00, 0x01,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00, 0x00, 0x52, 0x00,
	0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x64, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x23, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x53,
	0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x15,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x24, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x54, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00,
	0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x25, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00,
	0x00, 0x55, 0x00, 0x04, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xE8, 0x03, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x14, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x26, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00,
	0x00, 0x00, 0x56, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x27, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x57, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64,
	0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x14, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x29, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x08, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x2C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x08, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x60, 0x00, 0x01, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x08,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x61, 0x00, 0x01,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x62, 0x00,
	0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x41, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x33, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x08, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x35, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x65, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00,
	0x02, 0x00, 0x00, 0x00, 0x66, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D,
	0x64, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x08, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x02, 0x00, 0x00, 0x00, 0x67, 0x00, 0x04, 0x00, 0x00, 0x0C, 0x00,
	0x0D, 0xC8, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x08, 0x0D, 0xC8,
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x0D, 0xC8, 0x00, 0x00,
	0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x0D, 0xC8, 0x00, 0x00, 0x00, 0x04,
	0x00, 0x00, 0x00, 0x03, 0x0D, 0xC8, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
	0x00, 0x04, 0x0D, 0xC8, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x05,
	0x0D, 0xC8, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x0D, 0xC8,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0D, 0xC8, 0x00, 0x00,
	0x00, 0x0F, 0x00, 0x00, 0x00, 0x09, 0x0D, 0xC8, 0x00, 0x00, 0x00, 0x10,
	0x00, 0x00, 0x00, 0x0A, 0x0D, 0xC8, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00,
	0x00, 0x0B, 0x0D, 0xC8, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x61, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x08, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x68, 0x00, 0x01, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x08,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x69, 0x00, 0x01,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3A,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x6A, 0x00,
	0x02, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x2C, 0x01, 0x00, 0x00, 0x01, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x3B, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x6B,
	0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xE8, 0x03, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x3C, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00, 0x00,
	0x6C, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xE8, 0x03, 0x00, 0x00,
	0xE8, 0x03, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x3D, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00,
	0x00, 0x6D, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xE8, 0x03, 0x00,
	0x00, 0xE8, 0x03, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x3E, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00,
	0x00, 0x00, 0x6E, 0x00, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x32, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x3F, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x6F, 0x00, 0x06, 0x00, 0x00, 0x06, 0x00, 0x0D, 0x01,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x03, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x04, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05,
	0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x08, 0x00, 0x00, 0x23,
	0x3F, 0x00, 0x02, 0x02, 0x00, 0x00, 0x70, 0x00, 0x06, 0x00, 0x00, 0x06,
	0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0D,
	0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x0D, 0x01, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x0D, 0x01, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x04, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x00, 0x00, 0x05, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x08,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x71, 0x00, 0x06,
	0x00, 0x00, 0x06, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02,
	0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0D, 0x01,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x0D, 0x01, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x42, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00, 0x00,
	0x72, 0x00, 0x06, 0x00, 0x00, 0x03, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x00, 0x00, 0x02, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x08,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x73, 0x00, 0x06,
	0x00, 0x00, 0x03, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
	0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x08, 0x00, 0x00, 0x23,
	0x3F, 0x00, 0x02, 0x02, 0x00, 0x00, 0x74, 0x00, 0x01, 0x00, 0x00, 0x01,
	0x00, 0x0D, 0xA0, 0x86, 0x01, 0x00, 0xA0, 0x86, 0x01, 0x00, 0x01, 0x00,
	0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x08, 0x00, 0x00,
	0x23, 0x3F, 0x00, 0x02, 0x02, 0x00, 0x00, 0x75, 0x00, 0x06, 0x00, 0x00,
	0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x08, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00, 0x00, 0x76, 0x00, 0x06, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x08,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x02, 0x00, 0x00, 0x77, 0x00, 0x06,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x78, 0x00,
	0x04, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x2C, 0x01, 0x00, 0x00, 0x14, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x4D, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x08, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x4F, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x50, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x08, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x52, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x53, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x08, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x55, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x56, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x86,
	0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x10, 0x27, 0x00, 0x00, 0xFA,
	0x1C, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x57, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x87, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x10, 0x27, 0x00, 0x00,
	0xD1, 0x02, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x58, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00,
	0x00, 0x88, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x10, 0x27, 0x00,
	0x00, 0x23, 0x0F, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x59, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00,
	0x00, 0x00, 0x89, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x10, 0x27,
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x5A, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x8A, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x10,
	0x27, 0x00, 0x00, 0x58, 0x02, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x5B, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00,
	0x02, 0x00, 0x00, 0x00, 0x8B, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D,
	0x10, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x08, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x02, 0x00, 0x00, 0x00, 0x8C, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00,
	0x0D, 0x10, 0x27, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5D, 0x08, 0x00, 0x00, 0x23,
	0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x8D, 0x00, 0x03, 0x00, 0x00, 0x01,
	0x00, 0x0D, 0x10, 0x27, 0x00, 0x00, 0x5A, 0x02, 0x00, 0x00, 0x01, 0x00,
	0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5E, 0x08, 0x00, 0x00,
	0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x8E, 0x00, 0x03, 0x00, 0x00,
	0x01, 0x00, 0x0D, 0x10, 0x27, 0x00, 0x00, 0xF2, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x08, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x8F, 0x00, 0x03, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x10, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x08,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x90, 0x00, 0x03,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x10, 0x27, 0x00, 0x00, 0xD0, 0x02, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x91, 0x00,
	0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x10, 0x27, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x62, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x92,
	0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x10, 0x27, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x63, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x93, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x10, 0x27, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x64, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00,
	0x00, 0x94, 0x00, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x02, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x08, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x66, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0x08,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x97, 0x00, 0x03,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x10, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x98, 0x00,
	0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x10, 0x27, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x6A, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x9A,
	0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x6B, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x9B, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x6C, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00,
	0x00, 0x9C, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x6D, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00,
	0x00, 0x00, 0x9D, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x6E, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x9E, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x6F, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x70, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x08, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xA2, 0x00, 0x03, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x10, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x08,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xA3, 0x00, 0x07,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x74, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00,
	0x00, 0xA4, 0x00, 0x06, 0x00, 0x00, 0x03, 0x00, 0x0D, 0x01, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x02, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xA5, 0x00,
	0x06, 0x00, 0x00, 0x03, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x00, 0x00, 0x01, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x02, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x08, 0x00, 0x00,
	0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xA6, 0x00, 0x06, 0x00, 0x00,
	0x03, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
	0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0D, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00,
	0x02, 0x00, 0x00, 0x00, 0xA7, 0x00, 0x06, 0x00, 0x00, 0x03, 0x00, 0x0D,
	0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0D, 0x01, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x78, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00,
	0x00, 0xA8, 0x00, 0x06, 0x00, 0x00, 0x03, 0x00, 0x0D, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x02, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xA9, 0x00,
	0x06, 0x00, 0x00, 0x05, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x02, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0D,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0D, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x1E, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x7A, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x7B, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x08, 0x00, 0x00,
	0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xAC, 0x00, 0x07, 0x00, 0x00,
	0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x7D, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xAD,
	0x00, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x83, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x84, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xB4,
	0x00, 0x06, 0x00, 0x00, 0x05, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x02, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
	0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0D, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x14, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00,
	0x02, 0x02, 0x00, 0x00, 0xB5, 0x00, 0x07, 0x01, 0x00, 0x01, 0x00, 0x0D,
	0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x08, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x02, 0x02, 0x00, 0x00, 0xB6, 0x00, 0x07, 0x01, 0x00, 0x01, 0x00,
	0x0D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x08, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x88, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89,
	0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8A, 0x08, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x8B, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8C,
	0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8D, 0x08, 0x00, 0x00, 0x23,
	0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xBD, 0x00, 0x07, 0x00, 0x00, 0x01,
	0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8E,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xBE, 0x00,
	0x07, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x8F, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00,
	0x00, 0x00, 0xBF, 0x00, 0x06, 0x00, 0x00, 0x06, 0x00, 0x0D, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x01, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x02, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x03, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x04, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x0D,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x14,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x08, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x02, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00,
	0x0D, 0x10, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x91, 0x08, 0x00, 0x00, 0x23,
	0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xC1, 0x00, 0x07, 0x00, 0x00, 0x01,
	0x00, 0x0D, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x92,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xC2, 0x00,
	0x07, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x93, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00,
	0x00, 0x00, 0xC3, 0x00, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x95, 0x08, 0x00, 0x00, 0x23,
	0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xC5, 0x00, 0x03, 0x00, 0x00, 0x01,
	0x00, 0x0D, 0x88, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x08, 0x00, 0x00,
	0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xC6, 0x00, 0x03, 0x00, 0x00,
	0x01, 0x00, 0x0D, 0x10, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0x08, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xC7, 0x00, 0x03, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x08,
	0x00, 0x00, 0x23, 0x3F, 0x01, 0x02, 0x00, 0x00, 0x00, 0xC8, 0x00, 0x03,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xC9, 0x00,
	0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xE8, 0x03, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x9A, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xCA,
	0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xE8, 0x03, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x9B, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00,
	0xCB, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x9C, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00,
	0x00, 0xCC, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x9D, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00,
	0x00, 0x00, 0xCD, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xE8, 0x03,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x9E, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x01, 0x02,
	0x00, 0x00, 0x00, 0xCE, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x9F, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00,
	0x02, 0x00, 0x00, 0x00, 0xCF, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D,
	0xE8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x08, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x02, 0x00, 0x00, 0x00, 0xD0, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00,
	0x0D, 0xE8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA1, 0x08, 0x00, 0x00, 0x23,
	0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xD1, 0x00, 0x03, 0x00, 0x00, 0x01,
	0x00, 0x0D, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA2, 0x08, 0x00, 0x00,
	0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xD2, 0x00, 0x03, 0x00, 0x00,
	0x01, 0x00, 0x0D, 0xF4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA3, 0x08, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xD3, 0x00, 0x03, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA5, 0x08,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xD5, 0x00, 0x03,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA6,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xD6, 0x00,
	0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xA7, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xD7,
	0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xA9, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00,
	0xD9, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xAA, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00,
	0x00, 0xDA, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xAB, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00,
	0x00, 0x00, 0xDB, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xAC, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02,
	0x00, 0x00, 0x00, 0xDC, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xAD, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00,
	0x02, 0x00, 0x00, 0x00, 0xDD, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00, 0x0D,
	0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAE, 0x08, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x02, 0x00, 0x00, 0x00, 0xDE, 0x00, 0x03, 0x00, 0x00, 0x01, 0x00,
	0x0D, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61,
	0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAF, 0x08, 0x00, 0x00, 0x23,
	0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xDF, 0x00, 0x03, 0x00, 0x00, 0x01,
	0x00, 0x0D, 0xE8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x08, 0x00, 0x00,
	0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x03, 0x00, 0x00,
	0x01, 0x00, 0x0D, 0xE8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB1, 0x08, 0x00,
	0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xE1, 0x00, 0x03, 0x00,
	0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB2, 0x08,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xE2, 0x00, 0x03,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB3,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xE3, 0x00,
	0x06, 0x00, 0x00, 0x04, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x02, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0D,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB5, 0x08, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x02, 0x00, 0x00, 0x00, 0xE5, 0x00, 0x07, 0x00, 0x00, 0x01, 0x00,
	0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB6, 0x08,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xE6, 0x00, 0x07,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xB7, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00,
	0x00, 0xE7, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xB8, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00,
	0x00, 0x00, 0xE8, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xB9, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02,
	0x00, 0x00, 0x00, 0xE9, 0x00, 0x01, 0x00, 0x00, 0x04, 0x00, 0x0D, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x03, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBA,
	0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xEA, 0x00,
	0x01, 0x00, 0x00, 0x04, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x02, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0D,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x05,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBB, 0x08, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x02, 0x00, 0x00, 0x00, 0xEB, 0x00, 0x01, 0x00, 0x00, 0x04, 0x00,
	0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0D, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xBC, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00,
	0xEC, 0x00, 0x01, 0x00, 0x00, 0x05, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x02, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x03, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0D,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x05,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBD, 0x08, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x02, 0x00, 0x00, 0x00, 0xED, 0x00, 0x01, 0x00, 0x00, 0x04, 0x00,
	0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0D, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xBE, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00,
	0xEE, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xBF, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00,
	0x00, 0xEF, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xF4, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xC0, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00,
	0x00, 0x00, 0xF0, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xC8, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xC1, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02,
	0x00, 0x00, 0x00, 0xF1, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xC8,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xC2, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00,
	0x02, 0x00, 0x00, 0x00, 0xF2, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x0D,
	0xF4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3, 0x08, 0x00, 0x00, 0x23, 0x3F,
	0x00, 0x02, 0x00, 0x00, 0x00, 0xF3, 0x00, 0x06, 0x00, 0x00, 0x04, 0x00,
	0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0D, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xC4, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00,
	0xF4, 0x00, 0x07, 0x00, 0x00, 0x02, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xC6, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xF6,
	0x00, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xC7, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02,
	0x00, 0x00, 0x00, 0xF7, 0x00, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x08, 0x00, 0x00,
	0x23, 0x3F, 0x00, 0x02, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x06, 0x00, 0x00,
	0x04, 0x00, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0D, 0x01,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x0D, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xC9, 0x08, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x02, 0x00,
	0x00, 0x00, 0xF9, 0x00, 0x06, 0x00, 0x00, 0x04, 0x00, 0x0D, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0D, 0x01, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x02, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x03, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x61, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x00,
	0x00, 0x00, 0x23, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x0D, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x01, 0x7E,
	0x00, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x01,
	0x7F, 0x00, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0x03, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00,
	0x01, 0xB9, 0x0C, 0x9A, 0x01, 0x00, 0x00, 0x00, 0x14, 0x01, 0x00, 0x05,
	0x01, 0x00, 0x00
};

void CPacketManager::SendQuestUnk1(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Quest);
	msg->BuildHeader();

	msg->WriteData(Questunk1, sizeof(Questunk1));

	socket->Send(msg);
}

unsigned char Questunk11[17] = {
	0x0B, 0xF3, 0x02, 0x00, 0x00, 0x23, 0x3F, 0x00, 0x03, 0x00, 0x0A, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01
};

void CPacketManager::SendQuestUnk11(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Quest);
	msg->BuildHeader();

	msg->WriteData(Questunk11, sizeof(Questunk11));

	socket->Send(msg);
}

unsigned char Questunk12[11] = {
	0x0C, 0xDE, 0x07, 0x00, 0x00, 0x01, 0x09, 0x64, 0x00, 0x00, 0x00
};

void CPacketManager::SendQuestUnk12(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Quest);
	msg->BuildHeader();

	msg->WriteData(Questunk12, sizeof(Questunk12));

	socket->Send(msg);
}

unsigned char Questunk13[14] = {
	0x0D, 0xF3, 0x02, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x0F,
	0x00, 0x01
};

void CPacketManager::SendQuestUnk13(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Quest);
	msg->BuildHeader();

	msg->WriteData(Questunk13, sizeof(Questunk13));

	socket->Send(msg);
}

void CPacketManager::SendUpdateInfoNicknameChangeReply(CExtendedSocket* socket, int replyCode)
{
	string msgText;
	CSendPacket* msg = CreatePacket(socket, PacketId::UpdateInfo);
	msg->BuildHeader();

	msg->WriteUInt8(2); // nickname change reply
	switch (replyCode)
	{
	case 1:
		msgText = "";
		replyCode = 2;
		break;
	case -1:
		msgText = "CSO_NICKNAME_TOO_SHORT";
		break;
	case -2:
		msgText = "CSO_NICKNAME_TOO_LONG";
		break;
	case -3:
		msgText = "CSO_NICKNAME_ALREADY_EXIST";
		break;
	case 4:
		msgText = "CSO_NICKNAME_INVALID_NAME_CHAR";
		break;
	case 5:
		msgText = "CSO_NICKNAME_DIGIT_BEFORE_CHAR";
		break;
	case 6:
		msgText = "CSO_NICKNAME_EXCEED_CHAR_COUNT";
		break;
	case 7:
		msgText = "CSO_NICKNAME_PROHIBITED";
		break;
	case 8:
		msgText = "CSO_NEED_NICKNAME_ITEM";
		break;
	};

	msg->WriteUInt8(replyCode);

	msg->WriteString(msgText);

	socket->Send(msg);
}

void CPacketManager::SendTitle(CExtendedSocket* socket, int id)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Title);
	msg->BuildHeader();

	msg->WriteUInt8(0);
	msg->WriteUInt16(id);

	socket->Send(msg);
}

void CPacketManager::SendUDPHostData(CExtendedSocket* socket, bool host, int userID, string ipAddress, int port)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Udp);
	msg->BuildHeader();

	msg->WriteUInt8(1);
	msg->WriteUInt8(host);
	msg->WriteUInt32(userID);
	msg->WriteUInt32(ip_string_to_int(ipAddress), false);
	msg->WriteUInt16(port);

	socket->Send(msg);
}

void CPacketManager::SendHostServerStop(CExtendedSocket* socket)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::HostServer);
	msg->BuildHeader();

	msg->WriteUInt8(0);

	socket->Send(msg);
}

void BuildClanChronicle(CSendPacket* msg, vector<ClanChronicle>& chronicle)
{
	msg->WriteUInt32(chronicle.size());
	for (auto& chr : chronicle)
	{
		msg->WriteUInt32(chr.date);
		msg->WriteUInt8(chr.type);
		msg->WriteUInt8(1); // unk
		msg->WriteUInt8(1); // size
		for (int i = 0; i < 1; i++)
		{
			msg->WriteString(chr.str);
		}
	}
}

void BuildClanStorage(CSendPacket* msg, vector<RewardItem>& items)
{
	msg->WriteUInt16(items.size());
	for (auto& item : items)
	{
		msg->WriteUInt16(0); // unk
		msg->WriteUInt8(item.itemID != 0);
		if (item.itemID != 0)
		{
			msg->WriteUInt16(item.itemID);
			msg->WriteUInt16(item.count);
			msg->WriteUInt32(item.duration);
			msg->WriteUInt16(0);
			msg->WriteUInt32(0);
			msg->WriteUInt16(0);
			msg->WriteUInt8(0); // part maybe
			for (int i = 0; i < 0; i++)
			{
				msg->WriteUInt8(0);
				msg->WriteUInt16(0);
			}
		}
	}
}

void BuildClanInfo(CSendPacket* msg, Clan_s& clan)
{
	msg->WriteUInt32(clan.id);
	msg->WriteString(clan.name);
	msg->WriteString(clan.clanMaster);
	msg->WriteUInt64(clan.gameModeID);
	msg->WriteUInt64(clan.mapID);

	msg->WriteUInt8(0);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteUInt16(0);
		msg->WriteUInt32(0);
	}

	msg->WriteUInt8(0);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteUInt16(0);
		msg->WriteUInt16(0);
		msg->WriteUInt32(0);
	}

	msg->WriteUInt8(0);
	for (int i = 0; i < 0; i++)
	{
		msg->WriteUInt8(0);
		msg->WriteUInt16(0);
		msg->WriteUInt32(0);
	}

	//msg->WriteUInt8(clan.time);
	msg->WriteUInt32(clan.memberCount);
	msg->WriteUInt32(clan.maxMemberCount);
	msg->WriteUInt32(0);
	msg->WriteUInt32(0);

	for (int i = 0; i < 2; i++)
	{
		msg->WriteUInt32(0);
		msg->WriteUInt32(0);
	}
	for (int i = 0; i < 2; i++)
	{
		msg->WriteUInt32(0); // achiements?
	}

	BuildClanChronicle(msg, clan.chronicle);

	msg->WriteUInt32(clan.markID);
	msg->WriteUInt8(clan.markChangeCount); // mark change count
	msg->WriteUInt16(clan.expBoost);
	msg->WriteUInt16(clan.pointBoost);
	msg->WriteString(clan.noticeMsg);
	msg->WriteUInt8(0);

	// clan storage last updated items
	BuildClanStorage(msg, clan.lastStorageItems);

	msg->WriteUInt16(0);
	msg->WriteUInt32(0);
	msg->WriteUInt16(0);
}


void CPacketManager::SendClanList(CExtendedSocket* socket, vector<ClanList_s>& clans, int pageID, int pageMax)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::RequestClanList);
	msg->WriteUInt8(clans.size());
	msg->WriteUInt16(pageID);
	msg->WriteUInt16(pageMax);
	for (auto& clan : clans)
	{
		msg->WriteUInt32(clan.id);
		msg->WriteString(clan.name);
		msg->WriteString(clan.clanMaster);
		msg->WriteUInt32(clan.score);
		msg->WriteUInt32(clan.markID);
		msg->WriteUInt16(clan.gameModeID);
		msg->WriteUInt8(clan.time);
		msg->WriteUInt16(2228);
		msg->WriteUInt32(clan.region);
		msg->WriteUInt16(clan.memberCount);
		msg->WriteUInt8(clan.joinMethod);
		msg->WriteString(clan.noticeMsg);
		msg->WriteUInt8(0);
		msg->WriteUInt32(0); // float?
	}

	socket->Send(msg);
}

void CPacketManager::SendClanInfo(CExtendedSocket* socket, Clan_s& clan)
{
	CSendPacket* msg = g_pPacketManager->CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::RequestClanInfo);
	
	BuildClanInfo(msg, clan);

	socket->Send(msg);
}

void CPacketManager::SendClanReply(CExtendedSocket* socket, int replyID, int replyCode, const char* errStr)
{
	// test reply?
	CSendPacket* msg = g_pPacketManager->CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(replyID);
	msg->WriteUInt8(replyCode); // 0 error 1 approved
	if (!replyCode)
		msg->WriteString(errStr);

	socket->Send(msg);
}

void CPacketManager::SendClanJoinReply(CExtendedSocket* socket, int replyCode, const char* errStr)
{
	// test reply?
	CSendPacket* msg = g_pPacketManager->CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::RequestClanJoin);
	msg->WriteUInt8(replyCode);
	if (replyCode == 2 || replyCode == 4)
		msg->WriteString(errStr);
	else
		msg->WriteUInt8(0);

	socket->Send(msg);
}

void CPacketManager::SendClanCreateUserList(CExtendedSocket* socket, vector<ClanUser>& users)
{
	CSendPacket* msg = g_pPacketManager->CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::ClanUserList);
	msg->WriteUInt8(0);
	msg->WriteUInt16(users.size());
	for (auto& user : users)
	{
		msg->WriteString(user.userName);
		msg->WriteString(user.character.gameName);
		msg->WriteUInt32(user.userID);
		msg->WriteUInt8(user.user != NULL);
		msg->WriteUInt32(0); // unk
		msg->WriteUInt8(0); // unk
	}

	socket->Send(msg);
}

void CPacketManager::SendClanUpdateUserList(CExtendedSocket* socket, ClanUser& user, bool remove)
{
	CSendPacket* msg = g_pPacketManager->CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::ClanUserList);
	msg->WriteUInt8(remove ? 2 : 1);
	if (!remove)
	{
		msg->WriteString(user.userName);
		msg->WriteString(user.character.gameName);
		msg->WriteUInt32(user.userID);
		msg->WriteUInt8(user.user != NULL);
		msg->WriteUInt32(0); // unk
		msg->WriteUInt8(0); // unk
	}
	else
	{
		msg->WriteString(user.userName);
	}

	socket->Send(msg);
}

void CPacketManager::SendClanStoragePage(CExtendedSocket* socket, ClanStoragePage& clanStoragePage)
{
	CSendPacket* msg = g_pPacketManager->CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::RequestClanStorage);
	msg->WriteUInt8(0); // get storage page

	msg->WriteUInt8(clanStoragePage.pageID);

	BuildClanStorage(msg, clanStoragePage.items);

	socket->Send(msg);
}

void CPacketManager::SendClanStorageHistory(CExtendedSocket* socket)
{
	CSendPacket* msg = g_pPacketManager->CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::RequestClanStorage);
	msg->WriteUInt8(1); // get storage history
	msg->WriteUInt16(1);
	for (int i = 0; i < 1; i++)
	{
		msg->WriteUInt32(1);
		msg->WriteString("Jusic");
		msg->WriteUInt8(1);
		msg->WriteUInt16(1);
		msg->WriteUInt16(1);
		msg->WriteUInt16(1);
	}

	socket->Send(msg);
}

void CPacketManager::SendClanStorageAccessGrade(CExtendedSocket* socket, vector<int>& accessGrade)
{
	CSendPacket* msg = g_pPacketManager->CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::RequestClanStorage);
	msg->WriteUInt8(3); // access grade

	for (int i = 0; i < (int)accessGrade.size(); i++)
	{
		msg->WriteUInt8(accessGrade[i]);
	}

	socket->Send(msg);
}

void CPacketManager::SendClanStorageReply(CExtendedSocket* socket, int replyCode, const char* errStr)
{
	CSendPacket* msg = g_pPacketManager->CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::RequestClanStorage);
	msg->WriteUInt8(2); // storage error reply

	msg->WriteUInt8(replyCode); // 0 error 1 approved
	if (!replyCode)
	{
		msg->WriteString(errStr);
	}

	socket->Send(msg);
}

void CPacketManager::SendClanCreateMemberUserList(CExtendedSocket* socket, vector<ClanUser>& users)
{
	CSendPacket* msg = g_pPacketManager->CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::RequestClanMemberUserList);

	// TODO: implement type 1(add/update user), 2(remove user), 3(remove all)
	msg->WriteUInt8(0);
	msg->WriteUInt16(users.size());
	for (auto& user : users)
	{
		msg->WriteUInt8(user.character.level);
		msg->WriteString(user.userName);
		msg->WriteString(user.character.gameName);
		msg->WriteUInt8(user.memberGrade);
		msg->WriteUInt32(user.character.kills);
		msg->WriteUInt32(user.character.deaths);
		msg->WriteUInt32(0); // survival
		msg->WriteUInt32(0); // human kills
		msg->WriteUInt32(0); // zombie kills
		msg->WriteUInt32(0);
	}

	socket->Send(msg);
}

void CPacketManager::SendClanUpdateMemberUserList(CExtendedSocket* socket, ClanUser& user, bool remove)
{
	CSendPacket* msg = g_pPacketManager->CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::RequestClanMemberUserList);

	// TODO: implement type 1(add/update user), 2(remove user), 3(remove all)
	msg->WriteUInt8(remove ? 2 : 1);
	if (!remove)
	{
		msg->WriteUInt8(user.character.level);
		msg->WriteString(user.userName);
		msg->WriteString(user.character.gameName);
		msg->WriteUInt8(user.memberGrade);
		msg->WriteUInt32(user.character.kills);
		msg->WriteUInt32(user.character.deaths);
		msg->WriteUInt32(0); // survival
		msg->WriteUInt32(0); // human kills
		msg->WriteUInt32(0); // zombie kills
		msg->WriteUInt32(0);
	}
	else
	{
		msg->WriteString(user.userName);
	}

	socket->Send(msg);
}

void CPacketManager::SendClanCreateJoinUserList(CExtendedSocket* socket, vector<ClanUserJoinRequest>& users)
{
	CSendPacket* msg = g_pPacketManager->CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::RequestClanJoinUserList);

	// TODO: implement type 1(add/update user), 2(remove user), 3(remove all)
	msg->WriteUInt8(0);
	msg->WriteUInt8(users.size());
	for (auto& user : users)
	{
		msg->WriteUInt8(user.character.level);
		msg->WriteString(user.userName);
		msg->WriteString(user.character.gameName);
		msg->WriteString(user.inviterGameName);
		msg->WriteUInt32(228); // unk
		msg->WriteUInt32(user.character.kills);
		msg->WriteUInt32(user.character.deaths);
		msg->WriteUInt32(0); // survival
		msg->WriteUInt32(0); // zombie kill
		msg->WriteUInt32(0); // human kill
		msg->WriteUInt32(0); // clan leave count
		msg->WriteUInt32(user.date);
	}

	socket->Send(msg);
}

void CPacketManager::SendClanUpdateJoinUserList(CExtendedSocket* socket, ClanUserJoinRequest& user, bool remove)
{
	CSendPacket* msg = g_pPacketManager->CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::RequestClanJoinUserList);

	// TODO: implement type 1(add/update user), 2(remove user), 3(remove all)
	msg->WriteUInt8(remove ? 2 : 1);
	if (!remove)
	{
		msg->WriteUInt8(user.character.level); // level
		msg->WriteString(user.userName);
		msg->WriteString(user.character.gameName);
		msg->WriteString(user.inviterGameName);
		msg->WriteUInt32(228); // unk
		msg->WriteUInt32(user.character.kills); // kills
		msg->WriteUInt32(user.character.deaths); // deaths
		msg->WriteUInt32(0); // survival
		msg->WriteUInt32(0); // zombie kill
		msg->WriteUInt32(0); // human kill
		msg->WriteUInt32(0); // clan leave count
		msg->WriteUInt32(user.date);
	}
	else
	{
		msg->WriteString(user.userName);
	}

	socket->Send(msg);
}

void CPacketManager::SendClanDeleteJoinUserList(CExtendedSocket* socket)
{
	CSendPacket* msg = g_pPacketManager->CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::RequestClanJoinUserList);
	msg->WriteUInt8(3);

	socket->Send(msg);
}

void CPacketManager::SendClanUpdate(CExtendedSocket* socket, int type, int memberGrade, Clan_s& clan)
{
	CSendPacket* msg = g_pPacketManager->CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::ClanUpdate);

	msg->WriteUInt8(type);
	switch (type)
	{
	case 0:
		msg->WriteUInt8(memberGrade);
		msg->WriteUInt8(clan.joinMethod);
		msg->WriteUInt8(0); // unk

		BuildClanInfo(msg, clan);

		break;
	case 1:
		msg->WriteUInt8(memberGrade);
		msg->WriteUInt8(clan.joinMethod);
		msg->WriteUInt8(0); // unk
		msg->WriteUInt32(clan.id);
		msg->WriteString(clan.name);
		msg->WriteString(clan.clanMaster);
		break;
	case 2:
		msg->WriteUInt16(clan.gameModeID);
		msg->WriteUInt16(clan.mapID);
		msg->WriteUInt8(clan.time);
		break;
	case 3:
		msg->WriteUInt32(clan.memberCount);
		msg->WriteUInt32(clan.maxMemberCount);
		break;
	case 4:
		for (int i = 0; i < 2; i++)
		{
			msg->WriteUInt32(0);
			msg->WriteUInt32(0);
		}
		break;
	case 5:
		for (int i = 0; i < 2; i++)
		{
			msg->WriteUInt32(0);
		}
		break;
	case 6:
		BuildClanChronicle(msg, clan.chronicle);
		break;
	case 7:
		msg->WriteUInt32(clan.markID);
		msg->WriteUInt8(clan.markChangeCount); // mark change count
		break;
	case 8:
		msg->WriteUInt16(clan.expBoost);
		msg->WriteUInt16(clan.pointBoost);
		msg->WriteUInt16(22); // unk
		msg->WriteUInt16(33); // unk
		msg->WriteUInt32(44); // unk

		break;
	case 9:
		msg->WriteString(clan.noticeMsg);
		break;
	case 10:
		msg->WriteUInt8(0);
		break;
	case 11:
		BuildClanStorage(msg, clan.lastStorageItems);
		break;
	}

	socket->Send(msg);
}

void CPacketManager::SendClanUpdateNotice(CExtendedSocket* socket, Clan_s& clan)
{
	CSendPacket* msg = g_pPacketManager->CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::ClanUpdateNoticeMsg);

	msg->WriteString("UNK2");
	msg->WriteString(clan.noticeMsg);
	msg->WriteUInt32(0);

	socket->Send(msg);
}

unsigned char markColor[2250] = {
	0x01, 0x90, 0x00, 0x00, 0x62, 0x05, 0x00, 0x04, 0x02, 0x00, 0x00, 0x00,
	0x00, 0x10, 0x02, 0x00, 0x42, 0x02, 0x00, 0x80, 0x00, 0x00, 0x00, 0x04,
	0x00, 0x0B, 0x02, 0x20, 0x80, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0xA0,
	0x00, 0x40, 0x00, 0x00, 0x00, 0x10, 0x00, 0x02, 0x02, 0x00, 0x80, 0x48,
	0x00, 0x00, 0x00, 0x08, 0x10, 0x02, 0x00, 0x80, 0x00, 0x00, 0x00, 0x40,
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02,
	0x00, 0x00, 0x00, 0x10, 0x00, 0x81, 0x00, 0x02, 0x02, 0x10, 0xC8, 0x40,
	0x00, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x80, 0x0C, 0x00, 0x00,
	0x00, 0x00, 0x40, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
	0x00, 0x00, 0x04, 0x00, 0x00, 0x40, 0x00, 0x01, 0x00, 0x80, 0x81, 0x10,
	0x01, 0x35, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x90, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x40, 0x00, 0x58, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x00,
	0x00, 0x00, 0x03, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x02,
	0x00, 0x00, 0x00, 0x21, 0x50, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x04, 0x02, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x02, 0xA2, 0x04, 0x80, 0x00, 0x00, 0x84, 0x81, 0x40, 0x00, 0x04,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x02, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x80, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
unsigned char markColor2[2250] = {
	0x01, 0x90, 0x00, 0x00, 0x62, 0x05, 0x00, 0x04, 0x02, 0x00, 0x00, 0x00,
	0x00, 0x10, 0x02, 0x00, 0x42, 0x02, 0x00, 0x80, 0x00, 0x00, 0x00, 0x04,
	0x00, 0x0B, 0x02, 0x20, 0x80, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0xA0,
	0x00, 0x40, 0x00, 0x00, 0x00, 0x10, 0x00, 0x02, 0x02, 0x00, 0x80, 0x48,
	0x00, 0x00, 0x00, 0x08, 0x10, 0x02, 0x00, 0x80, 0x00, 0x00, 0x00, 0x40,
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02,
	0x00, 0x00, 0x00, 0x10, 0x00, 0x81, 0x00, 0x02, 0x02, 0x10, 0xC8, 0x40,
	0x00, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x80, 0x0C, 0x00, 0x00,
	0x00, 0x00, 0x40, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
	0x00, 0x00, 0x04, 0x00, 0x00, 0x40, 0x00, 0x01, 0x00, 0x80, 0x81, 0x10,
	0x01, 0x35, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x90, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x40, 0x00, 0x58, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x00,
	0x00, 0x00, 0x03, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x02,
	0x00, 0x00, 0x00, 0x21, 0x50, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x04, 0x02, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x02, 0xA2, 0x04, 0x80, 0x00, 0x00, 0x84, 0x81, 0x40, 0x00, 0x04,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x02, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x80, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void CPacketManager::SendClanMarkColor(CExtendedSocket* socket)
{
	CSendPacket* msg = g_pPacketManager->CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::RequestClanUpdateMark);

	msg->WriteUInt8(0);
	msg->WriteUInt8(0);

	//msg->WriteUInt16(0x8CA);
	//msg->WriteData(markColor2, sizeof(markColor2));

	msg->WriteUInt16(0x8CA);
	//msg->WriteUInt8(1);
	//msg->WriteUInt8(90);

	for (int i = 0; i < 0x8CA; i++)
	{
		msg->WriteUInt8(0);
	}
	socket->Send(msg);
}

void CPacketManager::SendClanMarkReply(CExtendedSocket* socket, int replyCode, const char* errStr)
{
	CSendPacket* msg = g_pPacketManager->CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::RequestClanUpdateMark);

	msg->WriteUInt8(0);
	msg->WriteUInt8(1);

	msg->WriteUInt8(replyCode);
	if (!replyCode)
	{
		msg->WriteString(errStr);
	}

	socket->Send(msg);
}

void CPacketManager::SendClanInvite(CExtendedSocket* socket, string inviterGameName, int clanID)
{
	CSendPacket* msg = g_pPacketManager->CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::ClanInvite);

	msg->WriteString(inviterGameName);
	msg->WriteUInt32(clanID);

	socket->Send(msg);
}

void CPacketManager::SendClanMasterDelegate(CExtendedSocket* socket)
{
	CSendPacket* msg = g_pPacketManager->CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::RequestClanDelegateMaster);

	msg->WriteUInt8(0);
	msg->WriteString("KAVO SHO ALO");

	socket->Send(msg);
}

void CPacketManager::SendClanKick(CExtendedSocket* socket)
{
	CSendPacket* msg = g_pPacketManager->CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::ClanKicked);

	msg->WriteUInt8(0);

	socket->Send(msg);
}

void CPacketManager::SendClanChatMessage(CExtendedSocket* socket, string gameName, string message)
{
	CSendPacket* msg = g_pPacketManager->CreatePacket(socket, PacketId::Clan);
	msg->BuildHeader();

	msg->WriteUInt8(ClanPacketType::ClanChatMessage);
	msg->WriteString(gameName);
	msg->WriteString(message);

	socket->Send(msg);
}

void CPacketManager::SendBanList(CExtendedSocket* socket, vector<UserBanList>& banList)
{
	CSendPacket* msg = g_pPacketManager->CreatePacket(socket, PacketId::Ban);
	msg->BuildHeader();
	msg->WriteUInt8(BanPacketType::BanList);
	msg->WriteUInt8(banList.size());
	for (auto& ban : banList)
	{
		msg->WriteString(ban.gameName);
		msg->WriteUInt8(ban.isNotExists);
	}
	socket->Send(msg);
}

void CPacketManager::SendBanUpdateList(CExtendedSocket* socket, string gameName, bool remove)
{
	CSendPacket* msg = g_pPacketManager->CreatePacket(socket, PacketId::Ban);
	msg->BuildHeader();
	msg->WriteUInt8(remove ? BanPacketType::BanRemoveNicknameReply : BanPacketType::BanAddNicknameReply);
	msg->WriteString(gameName);
	socket->Send(msg);
}

void CPacketManager::SendBanSettings(CExtendedSocket* socket, int settings)
{
	CSendPacket* msg = g_pPacketManager->CreatePacket(socket, PacketId::Ban);
	msg->BuildHeader();
	msg->WriteUInt8(BanPacketType::BanSettingsReply);
	msg->WriteUInt8(settings);
	socket->Send(msg);
}

void CPacketManager::SendMessengerUserInfo(CExtendedSocket* socket, int userID, CUserCharacter& character)
{
	CSendPacket* msg = g_pPacketManager->CreatePacket(socket, PacketId::Messenger);
	msg->BuildHeader();

	msg->WriteUInt8(1); // user info

	msg->WriteUInt32(userID);
	msg->WriteString("22223123132");

	CPacketHelper_FullUserInfo fullUserInfo;
	fullUserInfo.Build(msg->m_OutStream, userID, character);

	socket->Send(msg);
}

void CPacketManager::SendRankReply(CExtendedSocket* socket, int replyCode)
{
	CSendPacket* msg = g_pPacketManager->CreatePacket(socket, PacketId::Rank);
	msg->BuildHeader();
	msg->WriteUInt8(RankPacketType::RankReply);
	msg->WriteUInt8(replyCode); // 0 - CSO_Rank_Disable, 1 - CSO_Rank_TimeOut, 2 - CSO_Rank_NotFound, 3 - CSO_Rank_Isquerying, 4 - CSO_Rank_ErrorData, 5 - CSO_Rank_NotPeriod
	socket->Send(msg);
}

void CPacketManager::SendRankUserInfo(CExtendedSocket* socket, int userID, CUserCharacter& character)
{
	CSendPacket* msg = g_pPacketManager->CreatePacket(socket, PacketId::Rank);
	msg->BuildHeader();

	msg->WriteUInt8(RankPacketType::RankUserInfo);

	msg->WriteUInt32(userID);
	msg->WriteString(character.gameName);
	msg->WriteUInt32(character.level);
	msg->WriteUInt64(character.exp);
	msg->WriteUInt8(1); // 0 - Don't show location, 1 - Show location
	msg->WriteUInt32(character.nation);
	msg->WriteString(character.regionName); // Region name
	msg->WriteString(character.clanName);
	msg->WriteUInt32(character.clanMarkID);
	msg->WriteUInt32(character.battles);
	msg->WriteUInt32(character.win);
	msg->WriteUInt32(character.kills);
	msg->WriteUInt32(character.deaths);
	msg->WriteString("TEst222"); // match clan
	msg->WriteUInt8(character.leagueID);
	msg->WriteUInt8(character.tier[character.leagueID]); // tier
	msg->WriteUInt8(0); // unk

	socket->Send(msg);
}

void CPacketManager::SendAddonPacket(CExtendedSocket* socket, vector<int>& addons)
{
	CSendPacket* msg = CreatePacket(socket, PacketId::Addon);
	msg->BuildHeader();

	msg->WriteUInt16(addons.size());
	for (auto addonID : addons)
	{
		msg->WriteUInt16(addonID);
	}

	socket->Send(msg);
}